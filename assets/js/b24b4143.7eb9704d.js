"use strict";(self.webpackChunktestkube_documentation=self.webpackChunktestkube_documentation||[]).push([[4583],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var s=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function u(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?u(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):u(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,s,r=function(e,t){if(null==e)return{};var n,s,r={},u=Object.keys(e);for(s=0;s<u.length;s++)n=u[s],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var u=Object.getOwnPropertySymbols(e);for(s=0;s<u.length;s++)n=u[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=s.createContext({}),l=function(e){var t=s.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return s.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},b=s.forwardRef((function(e,t){var n=e.components,r=e.mdxType,u=e.originalType,o=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),b=l(n),m=r,d=b["".concat(o,".").concat(m)]||b[m]||p[m]||u;return n?s.createElement(d,i(i({ref:t},c),{},{components:n})):s.createElement(d,i({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var u=n.length,i=new Array(u);i[0]=b;var a={};for(var o in t)hasOwnProperty.call(t,o)&&(a[o]=t[o]);a.originalType=e,a.mdxType="string"==typeof e?e:r,i[1]=a;for(var l=2;l<u;l++)i[l]=n[l];return s.createElement.apply(null,i)}return s.createElement.apply(null,n)}b.displayName="MDXCreateElement"},8821:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>p,frontMatter:()=>u,metadata:()=>a,toc:()=>l});var s=n(7462),r=(n(7294),n(3905));const u={sidebar_position:2,sidebar_label:"Running"},i="Running Test Suites",a={unversionedId:"using-testkube/test-suites/testsuites-running",id:"using-testkube/test-suites/testsuites-running",title:"Running Test Suites",description:"To run your Tests Suites, pass testsuites run command with the test name to your kubectl testkube plugin. Test Suites are started asynchronously by default.",source:"@site/docs/3-using-testkube/test-suites/testsuites-running.md",sourceDirName:"3-using-testkube/test-suites",slug:"/using-testkube/test-suites/testsuites-running",permalink:"/testkube/using-testkube/test-suites/testsuites-running",draft:!1,editUrl:"https://github.com/kubeshop/testkube/docs/docs/3-using-testkube/test-suites/testsuites-running.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,sidebar_label:"Running"},sidebar:"tutorialSidebar",previous:{title:"Creating",permalink:"/testkube/using-testkube/test-suites/testsuites-creating"},next:{title:"Getting results",permalink:"/testkube/using-testkube/test-suites/testsuites-getting-results"}},o={},l=[{value:"<strong>Running Testsuites Synchronously</strong>",id:"running-testsuites-synchronously",level:2}],c={toc:l};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,s.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"running-test-suites"},"Running Test Suites"),(0,r.kt)("p",null,"To run your Tests Suites, pass ",(0,r.kt)("inlineCode",{parentName:"p"},"testsuites run")," command with the test name to your ",(0,r.kt)("inlineCode",{parentName:"p"},"kubectl testkube")," plugin. Test Suites are started asynchronously by default."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl testkube run testsuite test-example\n\nName: test-example.fairly-humble-tick\nStatus: pending\n\n  STEP | STATUS | ID | ERROR\n+------+--------+----+-------+\n\n\n\nUse the following command to get test suite  execution details:\n$ kubectl testkube get tse 61e1136165e59a3183465125\n\n\nUse the following command to get test suite execution details:\n$ kubectl testkube watch tse 61e1136165e59a3183465125\n")),(0,r.kt)("p",null,"After the test is started, you can check the current status of the test with ",(0,r.kt)("inlineCode",{parentName:"p"},"tests execution EXECUTION_ID"),"."),(0,r.kt)("h2",{id:"running-testsuites-synchronously"},(0,r.kt)("strong",{parentName:"h2"},"Running Testsuites Synchronously")),(0,r.kt)("p",null,"You can start a testsuite synchronously by passing the ",(0,r.kt)("inlineCode",{parentName:"p"},"-f")," flag (like --follow) to your command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl testkube run testsuite test-example -f\n\nName: test-example.equally-enabled-heron\nStatus: pending\n\n  STEP | STATUS | ID | ERROR\n+------+--------+----+-------+\n\n...\n\n\n             STEP            | STATUS  |            ID            | ERROR\n+----------------------------+---------+--------------------------+-------+\n  run test: testkube/test1 | success | 61e1142465e59a318346512d |\n\n\nName: test-example.equally-enabled-heron\nStatus: pending\n\n             STEP            | STATUS  |            ID            | ERROR\n+----------------------------+---------+--------------------------+-------+\n  run test: testkube/test1 | success | 61e1142465e59a318346512d |\n  delay 2000ms               | success |                          |\n\n\n...\n\n\nName: test-example.equally-enabled-heron\nStatus: success\n\n             STEP            | STATUS  |            ID            | ERROR\n+----------------------------+---------+--------------------------+-------+\n  run test: testkube/test1 | success | 61e1142465e59a318346512d |\n  delay 2000ms               | success |                          |\n  run test: testkube/test1 | success | 61e1142a65e59a318346512f |\n\n\n\nUse the following command to get test execution details:\n$ kubectl testkube get tse 61e1142465e59a318346512b\n\n")))}p.isMDXComponent=!0}}]);