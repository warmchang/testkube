"use strict";(self.webpackChunktestkube_documentation=self.webpackChunktestkube_documentation||[]).push([[4880,4701,9960],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=u(n),m=r,h=p["".concat(s,".").concat(m)]||p[m]||d[m]||l;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=p;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var u=2;u<l;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},23612:(e,t,n)=>{n.d(t,{Z:()=>h});var a=n(67294),r=n(86010),l=n(35281),i=n(95999);const o="admonition_LlT9",s="admonitionHeading_tbUL",u="admonitionIcon_kALy",c="admonitionContent_S0QG";const d={note:{infimaClassName:"secondary",iconComponent:function(){return a.createElement("svg",{viewBox:"0 0 14 16"},a.createElement("path",{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))},label:a.createElement(i.Z,{id:"theme.admonition.note",description:"The default label used for the Note admonition (:::note)"},"note")},tip:{infimaClassName:"success",iconComponent:function(){return a.createElement("svg",{viewBox:"0 0 12 16"},a.createElement("path",{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))},label:a.createElement(i.Z,{id:"theme.admonition.tip",description:"The default label used for the Tip admonition (:::tip)"},"tip")},danger:{infimaClassName:"danger",iconComponent:function(){return a.createElement("svg",{viewBox:"0 0 12 16"},a.createElement("path",{fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))},label:a.createElement(i.Z,{id:"theme.admonition.danger",description:"The default label used for the Danger admonition (:::danger)"},"danger")},info:{infimaClassName:"info",iconComponent:function(){return a.createElement("svg",{viewBox:"0 0 14 16"},a.createElement("path",{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))},label:a.createElement(i.Z,{id:"theme.admonition.info",description:"The default label used for the Info admonition (:::info)"},"info")},caution:{infimaClassName:"warning",iconComponent:function(){return a.createElement("svg",{viewBox:"0 0 16 16"},a.createElement("path",{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))},label:a.createElement(i.Z,{id:"theme.admonition.caution",description:"The default label used for the Caution admonition (:::caution)"},"caution")}},p={secondary:"note",important:"info",success:"tip",warning:"danger"};function m(e){const{mdxAdmonitionTitle:t,rest:n}=function(e){const t=a.Children.toArray(e),n=t.find((e=>{var t;return a.isValidElement(e)&&"mdxAdmonitionTitle"===(null==(t=e.props)?void 0:t.mdxType)})),r=a.createElement(a.Fragment,null,t.filter((e=>e!==n)));return{mdxAdmonitionTitle:n,rest:r}}(e.children);return{...e,title:e.title??t,children:n}}function h(e){const{children:t,type:n,title:i,icon:h}=m(e),f=function(e){const t=p[e]??e;return d[t]||(console.warn(`No admonition config found for admonition type "${t}". Using Info as fallback.`),d.info)}(n),b=i??f.label,{iconComponent:y}=f,k=h??a.createElement(y,null);return a.createElement("div",{className:(0,r.Z)(l.k.common.admonition,l.k.common.admonitionType(e.type),"alert",`alert--${f.infimaClassName}`,o)},a.createElement("div",{className:s},a.createElement("span",{className:u},k),b),a.createElement("div",{className:c},t))}},85162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(67294),r=n(86010);const l="tabItem_Ymn6";function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,i),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>w});var a=n(87462),r=n(67294),l=n(86010),i=n(12466),o=n(76775),s=n(91980),u=n(67392),c=n(50012);function d(e){return function(e){var t;return(null==(t=r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})))?void 0:t.filter(Boolean))??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function p(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??d(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:n}=e;const a=(0,o.k6)(),l=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(l),(0,r.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(a.location.search);t.set(l,e),a.replace({...a.location,search:t.toString()})}),[l,a])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,l=p(e),[i,o]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:l}))),[s,u]=h({queryString:n,groupId:a}),[d,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,l]=(0,c.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&l.set(e)}),[n,l])]}({groupId:a}),b=(()=>{const e=s??d;return m({value:e,tabValues:l})?e:null})();(0,r.useLayoutEffect)((()=>{b&&o(b)}),[b]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),f(e)}),[u,f,l]),tabValues:l}}var b=n(72389);const y="tabList__CuJ",k="tabItem_LNqP";function v(e){let{className:t,block:n,selectedValue:o,selectValue:s,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:d}=(0,i.o5)(),p=e=>{const t=e.currentTarget,n=c.indexOf(t),a=u[n].value;a!==o&&(d(t),s(a))},m=e=>{var t;let n=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1];break}}null==(t=n)||t.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>c.push(e),onKeyDown:m,onClick:p},i,{className:(0,l.Z)("tabs__item",k,null==i?void 0:i.className,{"tabs__item--active":o===t})}),n??t)})))}function g(e){let{lazy:t,children:n,selectedValue:a}=e;const l=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function T(e){const t=f(e);return r.createElement("div",{className:(0,l.Z)("tabs-container",y)},r.createElement(v,(0,a.Z)({},e,t)),r.createElement(g,(0,a.Z)({},e,t)))}function w(e){const t=(0,b.Z)();return r.createElement(T,(0,a.Z)({key:String(t)},e))}},13538:(e,t,n)=>{n.r(t),n.d(t,{ExecutorInfo:()=>m,assets:()=>d,contentTitle:()=>u,default:()=>f,frontMatter:()=>s,metadata:()=>c,toc:()=>p});var a=n(87462),r=(n(67294),n(3905)),l=n(74866),i=n(85162),o=n(23612);const s={},u="Artillery.io",c={unversionedId:"test-types/executor-artillery",id:"test-types/executor-artillery",title:"Artillery.io",description:"The Artillery executor allows you to run Artillery tests with Testkube.",source:"@site/docs/test-types/executor-artillery.mdx",sourceDirName:"test-types",slug:"/test-types/executor-artillery",permalink:"/test-types/executor-artillery",draft:!1,editUrl:"https://github.com/kubeshop/testkube/docs/docs/test-types/executor-artillery.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Test Types",permalink:"/category/test-types"},next:{title:"cURL",permalink:"/test-types/executor-curl"}},d={},p=[{value:"<strong>Test Environment</strong>",id:"test-environment",level:2},{value:"<strong>Create a Test Manifest</strong>",id:"create-a-test-manifest",level:2},{value:"Create a New Testkube Test",id:"create-a-new-testkube-test",level:2},{value:"Running a Test",id:"running-a-test",level:2},{value:"Getting Test Results",id:"getting-test-results",level:2},{value:"Additional examples",id:"additional-examples",level:2}],m=()=>(0,r.kt)("div",null,(0,r.kt)(o.Z,{type:"info",icon:"\ud83c\udf93",title:"What is Artillery?",mdxType:"Admonition"},(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("a",{href:"https://www.artillery.io/"},"Artillery.io")," is an open-source performance testing toolkit used primarily to perform cloud-scale load testing."),(0,r.kt)("li",null,"Artillery is designed to be both straightforward in configuration (YAML files), and powerful.")))),h={toc:p,ExecutorInfo:m};function f(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,a.Z)({},h,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"artilleryio"},"Artillery.io"),(0,r.kt)("p",null,"The Artillery executor allows you to run Artillery tests with Testkube."),(0,r.kt)(m,{mdxType:"ExecutorInfo"}),(0,r.kt)("h2",{id:"test-environment"},(0,r.kt)("strong",{parentName:"h2"},"Test Environment")),(0,r.kt)("p",null,"Let's assume that our SUT (Service Under Test) is an internal Kubernetes service which has\nClusterIP ",(0,r.kt)("inlineCode",{parentName:"p"},"Service")," created and is exposed on port ",(0,r.kt)("inlineCode",{parentName:"p"},"8088"),". The service name is ",(0,r.kt)("inlineCode",{parentName:"p"},"testkube-api-server"),"\nand is exposing the ",(0,r.kt)("inlineCode",{parentName:"p"},"/health")," endpoint that we want to test."),(0,r.kt)("p",null,"To call the SUT inside a cluster:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl http://testkube-api-server:8088/health\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"200 OK\n")),(0,r.kt)("h2",{id:"create-a-test-manifest"},(0,r.kt)("strong",{parentName:"h2"},"Create a Test Manifest")),(0,r.kt)("p",null,"The Artillery tests are defined in declarative manner, as YAML files.",(0,r.kt)("br",{parentName:"p"}),"\n","The test should warm up our service a little bit first, then we can hit a little harder."),(0,r.kt)("p",null,"Let's save our test into ",(0,r.kt)("inlineCode",{parentName:"p"},"test.yaml")," file with the content below:   "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'config:\n  target: "http://testkube-api-server:8088"\n  phases:\n    - duration: 6\n      arrivalRate: 5\n      name: Warm up\n    - duration: 120\n      arrivalRate: 5\n      rampTo: 50\n      name: Ramp up load\n    - duration: 60\n      arrivalRate: 50\n      name: Sustained load\nscenarios:\n  - name: "Check health endpoint"\n    flow:\n      - get:\n          url: "/health"\n')),(0,r.kt)("p",null,"Our test is ready but how do we run it in a Kubernetes cluster? Testkube will help you with that! "),(0,r.kt)("p",null,"Let's create a new Testkube test based on the saved Artillery test definition."),(0,r.kt)("h2",{id:"create-a-new-testkube-test"},"Create a New Testkube Test"),(0,r.kt)("p",null,"If you want to upload a test file directly (like in this example) you can use Dashboard, or CLI - depending on your preferences."),(0,r.kt)(l.Z,{groupId:"dashboard-cli",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"dash",label:"Dashboard",mdxType:"TabItem"},(0,r.kt)("p",null,"If you prefer to use the Dashboard, just go to Tests, and click ",(0,r.kt)("inlineCode",{parentName:"p"},"Add a new test")," button. Then you need to fill in the test Name, choose the test Type (",(0,r.kt)("inlineCode",{parentName:"p"},"artillery/test"),"), Test Source (",(0,r.kt)("inlineCode",{parentName:"p"},"File"),", which allow you to upload specific file), and choose the File.\n",(0,r.kt)("img",{alt:"Container executor creation dialog",src:n(18285).Z,width:"879",height:"684"}))),(0,r.kt)(i.Z,{value:"cli",label:"CLI",mdxType:"TabItem"},(0,r.kt)("p",null,"If you prefer using the CLI instead, you can create the test with ",(0,r.kt)("inlineCode",{parentName:"p"},"testkube create test"),".\nYou need to set the test:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"--name")," (for example, ",(0,r.kt)("inlineCode",{parentName:"li"},"artillery-api-test"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"--type")," (in this case ",(0,r.kt)("inlineCode",{parentName:"li"},"artillery/test"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"--file")," which is a path to your test file (in this case ",(0,r.kt)("inlineCode",{parentName:"li"},"test.yaml"),")")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"testkube create test --name artillery-api-test --type artillery/test --file test.yaml\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"Test created  \ud83e\udd47\n")))),(0,r.kt)("h2",{id:"running-a-test"},"Running a Test"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ testkube run test artillery-api-test                                                                                                                       \nType:              artillery/test\nName:              artillery-api-test\nExecution ID:      63ee9ca6872e05f0ea790d73\nExecution name:    artillery-api-test-1\nExecution number:  1\nStatus:            running\nStart time:        2023-02-16 21:14:14.451905194 +0000 UTC\nEnd time:          0001-01-01 00:00:00 +0000 UTC\nDuration:          \n\n\n\nTest execution started\nWatch test execution until complete:\n$ kubectl testkube watch execution artillery-api-test-1\n\n\nUse following command to get test execution details:\n$ kubectl testkube get execution artillery-api-test-1\n")),(0,r.kt)("p",null,"You can also watch your test results in real-time with ",(0,r.kt)("inlineCode",{parentName:"p"},"-f"),' flag (like "follow"). '),(0,r.kt)("p",null,"Test runs can be named. If no name is passed, Testkube will autogenerate a name."),(0,r.kt)("h2",{id:"getting-test-results"},"Getting Test Results"),(0,r.kt)("p",null,"Let's get back our finished test results. The test report and output will be stored in Testkube storage to revisit when necessary."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"testkube get execution artillery-api-test-1                                               \nID:         63ee9cd8872e05f0ea790d76\nName:       artillery-api-test-1\nNumber:            1\nTest name:         artillery-api-test\nType:              artillery/test\nStatus:            passed\nStart time:        2023-02-16 21:15:04.979 +0000 UTC\nEnd time:          2023-02-16 21:18:19.463 +0000 UTC\nDuration:          00:03:14\n\n...\n... (long output)\n...\n\nAll VUs finished. Total time: 3 minutes, 7 seconds\n\n--------------------------------\nSummary report @ 21:18:16(+0000)\n--------------------------------\n\nhttp.codes.200: ................................................................ 6330\nhttp.request_rate: ............................................................. 33/sec\nhttp.requests: ................................................................. 6330\nhttp.response_time:\n  min: ......................................................................... 0\n  max: ......................................................................... 11\n  median: ...................................................................... 0\n  p95: ......................................................................... 1\n  p99: ......................................................................... 2\nhttp.responses: ................................................................ 6330\nvusers.completed: .............................................................. 6330\nvusers.created: ................................................................ 6330\nvusers.created_by_name.Check health endpoint: .................................. 6330\nvusers.failed: ................................................................. 0\nvusers.session_length:\n  min: ......................................................................... 0.9\n  max: ......................................................................... 25.6\n  median: ...................................................................... 1.3\n  p95: ......................................................................... 3.3\n  p99: ......................................................................... 9.5\nLog file: /tmp/test-report.json\n\n\nTest execution completed with success in 3m14.484s \ud83e\udd47\n\n")),(0,r.kt)("h2",{id:"additional-examples"},"Additional examples"),(0,r.kt)("p",null,"Additional Artillery examples can be found in the Testkube repository ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/testkube/blob/main/test/artillery/executor-smoke/"},"here"),"."))}f.isMDXComponent=!0},18285:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/dashboard-create-artillery-api-test-727a136c9175a7fb4c6efc18126652b2.png"}}]);