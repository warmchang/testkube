"use strict";(self.webpackChunktestkube_documentation=self.webpackChunktestkube_documentation||[]).push([[7484],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var a=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var i=a.createContext({}),c=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=c(n),g=s,d=m["".concat(i,".").concat(g)]||m[g]||p[g]||r;return n?a.createElement(d,o(o({ref:t},u),{},{components:n})):a.createElement(d,o({ref:t},u))}));function g(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,o=new Array(r);o[0]=m;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:s,o[1]=l;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},50737:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var a=n(87462),s=(n(67294),n(3905));const r={},o="Getting Started",l={unversionedId:"getting-started",id:"getting-started",title:"Getting Started",description:"Please follow the install steps for the first installation of Testkube.",source:"@site/docs/2-getting-started.md",sourceDirName:".",slug:"/getting-started",permalink:"/testkube/getting-started",draft:!1,editUrl:"https://github.com/kubeshop/testkube/docs/docs/2-getting-started.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/testkube/installing"},next:{title:"Using Testkube",permalink:"/testkube/category/using-testkube"}},i={},c=[{value:"<strong>Getting Help</strong>",id:"getting-help",level:2},{value:"<strong>Launching Testkube UI</strong>",id:"launching-testkube-ui",level:2},{value:"<strong>Defining Tests</strong>",id:"defining-tests",level:2},{value:"<strong>Creating Postman Collections Based Tests</strong>",id:"creating-postman-collections-based-tests",level:3},{value:"<strong>Creating Cypress Tests</strong>",id:"creating-cypress-tests",level:3},{value:"<strong>Starting a New Test Execution</strong>",id:"starting-a-new-test-execution",level:2},{value:"<strong>Getting Execution Details</strong>",id:"getting-execution-details",level:2},{value:"<strong>Getting Available Scripts</strong>",id:"getting-available-scripts",level:2},{value:"<strong>Getting Available Executions</strong>",id:"getting-available-executions",level:2},{value:"<strong>Changing the Output Format</strong>",id:"changing-the-output-format",level:2},{value:"<strong>Deleting a Test</strong>",id:"deleting-a-test",level:2}],u={toc:c};function p(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"getting-started"},"Getting Started"),(0,s.kt)("p",null,"Please follow the ",(0,s.kt)("a",{parentName:"p",href:"/testkube/installing"},"install steps")," for the first installation of Testkube."),(0,s.kt)("h2",{id:"getting-help"},(0,s.kt)("strong",{parentName:"h2"},"Getting Help")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl testkube --help \n\n# or any other command\nkubectl testkube get --help \n")),(0,s.kt)("h2",{id:"launching-testkube-ui"},(0,s.kt)("strong",{parentName:"h2"},"Launching Testkube UI")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl testkube dashboard\n")),(0,s.kt)("h2",{id:"defining-tests"},(0,s.kt)("strong",{parentName:"h2"},"Defining Tests")),(0,s.kt)("p",null,"After installing, you will need to add Tests to your cluster, which are created as a Custom Resource in Kubernetes\n(access to Kubernetes cluster is required)."),(0,s.kt)("p",null,"This document provides examples for using  ",(0,s.kt)("em",{parentName:"p"},"Postman collections")," and ",(0,s.kt)("em",{parentName:"p"},"Cypress")," executors. Please visit the ",(0,s.kt)("strong",{parentName:"p"},"Test Types")," section of the documentation to read about additional types of implementations."),(0,s.kt)("p",null,'If you don\'t want to create Custom Resources "by hand", we have a little helper for this: '),(0,s.kt)("h3",{id:"creating-postman-collections-based-tests"},(0,s.kt)("strong",{parentName:"h3"},"Creating Postman Collections Based Tests")),(0,s.kt)("p",null,"First, let's export a Postman collection from Postman UI (the file content should look similar to the one below):"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'cat <<EOF > my_postman_collection.json\n{\n    "info": {\n        "_postman_id": "8af42c21-3e31-49c1-8b27-d6e60623a180",\n        "name": "Kubeshop",\n        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"\n    },\n    "item": [\n        {\n            "name": "Home",\n            "event": [\n                {\n                    "listen": "test",\n                    "script": {\n                        "exec": [\n                            "pm.test(\\"Body matches string\\", function () {",\n                            "    pm.expect(pm.response.text()).to.include(\\"Accelerator\\");",\n                            "});"\n                        ],\n                        "type": "text/javascript"\n                    }\n                }\n            ],\n            "request": {\n                "method": "GET",\n                "header": [],\n                "url": {\n                    "raw": "https://kubeshop.io/",\n                    "protocol": "https",\n                    "host": [\n                        "kubeshop",\n                        "io"\n                    ],\n                    "path": [\n                        ""\n                    ]\n                }\n            },\n            "response": []\n        },\n        {\n            "name": "Team",\n            "event": [\n                {\n                    "listen": "test",\n                    "script": {\n                        "exec": [\n                            "pm.test(\\"Status code is 200\\", function () {",\n                            "    pm.response.to.have.status(200);",\n                            "});"\n                        ],\n                        "type": "text/javascript"\n                    }\n                }\n            ],\n            "request": {\n                "method": "GET",\n                "header": [],\n                "url": {\n                    "raw": "https://kubeshop.io/our-team",\n                    "protocol": "https",\n                    "host": [\n                        "kubeshop",\n                        "io"\n                    ],\n                    "path": [\n                        "our-team"\n                    ]\n                }\n            },\n            "response": []\n        }\n    ]\n}\nEOF\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl testkube create test --file my_postman_collection.json --type postman/collection --name my-test-name \n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Note"),": This is just an example of how it works. For further details you can visit the ",(0,s.kt)("a",{parentName:"p",href:"/testkube/test-types/executor-postman"},"Postman documentation"),"."),(0,s.kt)("h3",{id:"creating-cypress-tests"},(0,s.kt)("strong",{parentName:"h3"},"Creating Cypress Tests")),(0,s.kt)("p",null,"Cypress is in the form of projects. To run them we need to pass the whole directory structure with the npm based dependencies. You can create a new test with Testkube:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"}," kubectl testkube create test --git-uri https://github.com/kubeshop/testkube-executor-cypress.git --git-branch main --git-path examples --name my-test-name --type cypress/project\n")),(0,s.kt)("p",null,"Where:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"git-uri")," is the git uri where testkube will get the Cypress project."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"git-branch")," is which branch should be checked out (by default - the main branch will be used)."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"git-path")," is which path of the repository should be checked out (testkube is doing a partial git checkout so it will be fast even for very big monorepos)."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"name")," - is the unique Script Custom Resource name."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"type")," - cypress/project - for Cypress based project test structure.")),(0,s.kt)("h2",{id:"starting-a-new-test-execution"},(0,s.kt)("strong",{parentName:"h2"},"Starting a New Test Execution")),(0,s.kt)("p",null,"When our test is defined as a Custom Resource we can now run it:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl testkube run test my-test-name \n\n#  ... some test run output ...\n\n")),(0,s.kt)("p",null,"Use the following command to get test execution details:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl testkube get execution 611b6da38cd74034e7c9d408\n\n")),(0,s.kt)("p",null,"Or watch for completion with"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl testkube watch execution 611b6da38cd74034e7c9d408\n\n")),(0,s.kt)("h2",{id:"getting-execution-details"},(0,s.kt)("strong",{parentName:"h2"},"Getting Execution Details")),(0,s.kt)("p",null,"After the test execution is complete, access the test details by running the\ntests execution command:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl testkube get execution 6103a45b7e18c4ea04883866\n\n#....some execution details....\n\n")),(0,s.kt)("h2",{id:"getting-available-scripts"},(0,s.kt)("strong",{parentName:"h2"},"Getting Available Scripts")),(0,s.kt)("p",null,"To run a test execution, you'll need to know the test name:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl testkube get tests\n\n")),(0,s.kt)("p",null,"Output:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"+----------------------+--------------------+\n|         NAME         |        TYPE        |\n+----------------------+--------------------+\n| create-001-test      | postman/collection |\n| envs1                | postman/collection |\n| test-kubeshop        | postman/collection |\n| test-kubeshop-failed | postman/collection |\n| test-postman-script  | postman/collection |\n+----------------------+--------------------+\n\n")),(0,s.kt)("h2",{id:"getting-available-executions"},(0,s.kt)("strong",{parentName:"h2"},"Getting Available Executions")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl testkube get executions TEST_NAME\n")),(0,s.kt)("p",null,"Output:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"+------------+--------------------+--------------------------+---------------------------+----------+\n|   TEST     |        TYPE        |       EXECUTION ID       |      EXECUTION NAME       | STATUS   |\n+------------+--------------------+--------------------------+---------------------------+----------+\n| parms-test | postman/collection | 611a5a1a910ca385751eb2c6 | pt1                       | success  |\n| parms-test | postman/collection | 611a5a40910ca385751eb2c8 | pt2                       | error    |\n| parms-test | postman/collection | 611a5b6d910ca385751eb2ca | forcibly-frank-panda      | error    |\n| parms-test | postman/collection | 611a5b83910ca385751eb2cc | slightly-merry-jennet     | error    |\n| parms-test | postman/collection | 611b6d6c8cd74034e7c9d406 | frequently-expert-terrier | error    |\n| parms-test | postman/collection | 611b6da38cd74034e7c9d408 | violently-fresh-elephant  | error    |\n+------------+--------------------+--------------------------+---------------------------+----------+\n")),(0,s.kt)("h2",{id:"changing-the-output-format"},(0,s.kt)("strong",{parentName:"h2"},"Changing the Output Format")),(0,s.kt)("p",null,"For lists and details, you can use different output formats via the ",(0,s.kt)("inlineCode",{parentName:"p"},"--output")," flag. The following formats are currently supported:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"RAW - Raw output from the given executor (e.g., for Postman collection, it's terminal text with colors and tables)."),(0,s.kt)("li",{parentName:"ul"},"JSON - Test run data are encoded in JSON."),(0,s.kt)("li",{parentName:"ul"},"GO - For go-template formatting (like in Docker and Kubernetes), you'll need to add the ",(0,s.kt)("inlineCode",{parentName:"li"},"--go-template")," flag with a custom format. The default is ",(0,s.kt)("strong",{parentName:"li"},'{{ . | printf("%+v") }}'),". This will help you check available fields.")),(0,s.kt)("p",null,"There plans to support other output formats like junit etc. If there is something specific that you need, please reach out to us."),(0,s.kt)("h2",{id:"deleting-a-test"},(0,s.kt)("strong",{parentName:"h2"},"Deleting a Test")),(0,s.kt)("p",null,"The command to delete a test is ",(0,s.kt)("inlineCode",{parentName:"p"},"kubectl testkube delete tests TEST_NAME"),". The ",(0,s.kt)("inlineCode",{parentName:"p"},"--all")," flag can be used to delete all."))}p.isMDXComponent=!0}}]);