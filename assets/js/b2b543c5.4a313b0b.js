"use strict";(self.webpackChunktestkube_documentation=self.webpackChunktestkube_documentation||[]).push([[5453],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(n),h=a,g=d["".concat(l,".").concat(h)]||d[h]||c[h]||i;return n?r.createElement(g,o(o({ref:t},u),{},{components:n})):r.createElement(g,o({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},73600:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const i={},o="Playwright Tests",s={unversionedId:"test-types/executor-playwright",id:"test-types/executor-playwright",title:"Playwright Tests",description:"Playwright is an end-to-end testing and automation framework developed by Microsoft. Starting from the Testkube Helm chart version 1.9.5, it is now possible to use Testkube to manage your Playwright tests inside your Kubernetes cluster.",source:"@site/docs/test-types/executor-playwright.md",sourceDirName:"test-types",slug:"/test-types/executor-playwright",permalink:"/test-types/executor-playwright",draft:!1,editUrl:"https://github.com/kubeshop/testkube/docs/docs/test-types/executor-playwright.md",tags:[],version:"current",frontMatter:{}},l={},p=[{value:"Running Playwright Tests",id:"running-playwright-tests",level:2},{value:"Create Test",id:"create-test",level:3},{value:"Run Test",id:"run-test",level:3},{value:"Check Artifacts",id:"check-artifacts",level:3},{value:"Special Requirements",id:"special-requirements",level:2}],u={toc:p};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"playwright-tests"},"Playwright Tests"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://playwright.dev/"},"Playwright")," is an end-to-end testing and automation framework developed by Microsoft. Starting from the Testkube Helm chart version 1.9.5, it is now possible to use Testkube to manage your Playwright tests inside your Kubernetes cluster."),(0,a.kt)("h2",{id:"running-playwright-tests"},"Running Playwright Tests"),(0,a.kt)("p",null,"The Playwright Testkube runner pulls the test code from Git directories. When creating a new test, this needs to be configured via the ",(0,a.kt)("inlineCode",{parentName:"p"},"--git-*")," flags."),(0,a.kt)("h3",{id:"create-test"},"Create Test"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'$ testkube create test --git-branch lilla/feat/playwright-executor --git-uri https://github.com/vLia/testkube-tests.git --git-path "playwright" --name playwright-test-demo --type playwright/test\n\nTest created testkube / playwright-test-demo \ud83e\udd47\n')),(0,a.kt)("h3",{id:"run-test"},"Run Test"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ testkube run test playwright-test-demo\nType:              playwright/test\nName:              playwright-test-demo\nExecution ID:      63eb5948d2588841ffa577a0\nExecution name:    playwright-test-demo-1\nExecution number:  1\nStatus:            running\nStart time:        2023-02-14 09:50:00.924165379 +0000 UTC\nEnd time:          0001-01-01 00:00:00 +0000 UTC\nDuration:          \n\n\n\nTest execution started\nWatch test execution until complete:\n$ kubectl testkube watch execution playwright-test-demo-1\n\n\nUse following command to get test execution details:\n$ kubectl testkube get execution playwright-test-demo-1\n\n")),(0,a.kt)("p",null,"To follow up with the results of the execution, you can either ",(0,a.kt)("inlineCode",{parentName:"p"},"watch")," the execution while it is running or ",(0,a.kt)("inlineCode",{parentName:"p"},"get")," the results of it after it is done, as seen in the commands printed out by the cli."),(0,a.kt)("h3",{id:"check-artifacts"},"Check Artifacts"),(0,a.kt)("p",null,"To get a list of the created artifacts, use the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ testkube get artifact playwright-test-demo-1\n  EXECUTION | NAME                  | SIZE (KB)  \n------------+-----------------------+------------\n            | playwright-report.zip |    180527  \n")),(0,a.kt)("p",null,"These files were created and uploaded to the previously configured object storage. To download them, use the ",(0,a.kt)("inlineCode",{parentName:"p"},"testkube download artifact")," command."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ testkube download artifact playwright-test-demo-1 playwright-report.zip data\nFile data/playwright-report.zip downloaded.\n")),(0,a.kt)("h2",{id:"special-requirements"},"Special Requirements"),(0,a.kt)("p",null,"Running tests in a containerized environment is convenient: it's simple, portable and increases the speed of development. There is a need to be aware of the limitations of this environment. Similarly to many other testing tools, Playwright provides the option to open a browser window for reports. Having this option on the default setting will block the Testkube test runner. It is important to make sure reporters are not opening additional windows. Please update your configuration files located at ",(0,a.kt)("inlineCode",{parentName:"p"},"playwright.config.js")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"playwright.config.ts"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"reporter: [\n  ['html', { open: 'never' }]\n],\n")))}c.isMDXComponent=!0}}]);