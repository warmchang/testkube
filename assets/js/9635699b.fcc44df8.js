"use strict";(self.webpackChunktestkube_documentation=self.webpackChunktestkube_documentation||[]).push([[6244],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),o=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=o(e.components);return a.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,u=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=o(n),m=r,h=d["".concat(u,".").concat(m)]||d[m]||p[m]||s;return n?a.createElement(h,l(l({ref:t},c),{},{components:n})):a.createElement(h,l({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,l=new Array(s);l[0]=d;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var o=2;o<s;o++)l[o]=n[o];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(67294),r=n(86010);const s="tabItem_Ymn6";function l(e){let{children:t,hidden:n,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(s,l),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>E});var a=n(87462),r=n(67294),s=n(86010),l=n(12466),i=n(76775),u=n(91980),o=n(67392),c=n(50012);function p(e){return function(e){return r.Children.map(e,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function d(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,o.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:n}=e;const a=(0,i.k6)(),s=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,u._X)(s),(0,r.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(a.location.search);t.set(s,e),a.replace({...a.location,search:t.toString()})}),[s,a])]}function b(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,s=d(e),[l,i]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:s}))),[u,o]=h({queryString:n,groupId:a}),[p,b]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,s]=(0,c.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&s.set(e)}),[n,s])]}({groupId:a}),k=(()=>{const e=u??p;return m({value:e,tabValues:s})?e:null})();(0,r.useLayoutEffect)((()=>{k&&i(k)}),[k]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);i(e),o(e),b(e)}),[o,b,s]),tabValues:s}}var k=n(72389);const f="tabList__CuJ",g="tabItem_LNqP";function N(e){let{className:t,block:n,selectedValue:i,selectValue:u,tabValues:o}=e;const c=[],{blockElementScrollPositionUntilNextRender:p}=(0,l.o5)(),d=e=>{const t=e.currentTarget,n=c.indexOf(t),a=o[n].value;a!==i&&(p(t),u(a))},m=e=>{var t;let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1];break}}null==(t=n)||t.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":n},t)},o.map((e=>{let{value:t,label:n,attributes:l}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>c.push(e),onKeyDown:m,onClick:d},l,{className:(0,s.Z)("tabs__item",g,null==l?void 0:l.className,{"tabs__item--active":i===t})}),n??t)})))}function y(e){let{lazy:t,children:n,selectedValue:a}=e;if(n=Array.isArray(n)?n:[n],t){const e=n.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},n.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function v(e){const t=b(e);return r.createElement("div",{className:(0,s.Z)("tabs-container",f)},r.createElement(N,(0,a.Z)({},e,t)),r.createElement(y,(0,a.Z)({},e,t)))}function E(e){const t=(0,k.Z)();return r.createElement(v,(0,a.Z)({key:String(t)},e))}},29892:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>u,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=n(87462),r=(n(67294),n(3905)),s=n(74866),l=n(85162);const i={},u="cURL",o={unversionedId:"test-types/executor-curl",id:"test-types/executor-curl",title:"cURL",description:"Testkube is able to run cURL commands as tests.",source:"@site/docs/test-types/executor-curl.mdx",sourceDirName:"test-types",slug:"/test-types/executor-curl",permalink:"/test-types/executor-curl",draft:!1,editUrl:"https://github.com/kubeshop/testkube/docs/docs/test-types/executor-curl.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Artillery.io",permalink:"/test-types/executor-artillery"},next:{title:"Cypress",permalink:"/test-types/executor-cypress"}},c={},p=[{value:"Abstraction over cURL",id:"abstraction-over-curl",level:2},{value:"Example Test",id:"example-test",level:2},{value:"Creating and Running a Test",id:"creating-and-running-a-test",level:2},{value:"File",id:"file",level:3},{value:"Git File",id:"git-file",level:3},{value:"File",id:"file-1",level:3},{value:"Git File",id:"git-file-1",level:3}],d={toc:p};function m(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"curl"},"cURL"),(0,r.kt)("p",null,"Testkube is able to run cURL commands as tests."),(0,r.kt)("h2",{id:"abstraction-over-curl"},"Abstraction over cURL"),(0,r.kt)("p",null,"Testkube executor provides an abstraction over cURL that allow you to create JSON-based cURL test files. They allow you to combine a cURL command with expected results:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"expected_status")," allows you to assert that a specific status code is returned."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"expected_body")," allows you to validate the body of the response.")),(0,r.kt)("p",null,"Below is an example of how to format the test:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "command": [\n    "curl",\n    "https://reqbin.com/echo/get/json",\n    "-H",\n    "\'Accept: application/json\'"\n  ],\n  "expected_status": "200",\n  "expected_body": "{\\"success\\":\\"true\\"}"\n}\n')),(0,r.kt)("p",null,"You can also find this test in the Testkube repository: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/testkube/blob/main/test/curl/curl.json"},"https://github.com/kubeshop/testkube/blob/main/test/curl/curl.json"),"."),(0,r.kt)("h2",{id:"example-test"},"Example Test"),(0,r.kt)("p",null,"In this example we will use the following cURL test: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/testkube/blob/main/test/curl/executor-tests/curl-smoke-test.json"},"https://github.com/kubeshop/testkube/blob/main/test/curl/executor-tests/curl-smoke-test.json"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'{\n    "command": [\n      "curl",\n      "https://testkube.io/"\n    ],\n    "expected_status": "200"\n}\n')),(0,r.kt)("h2",{id:"creating-and-running-a-test"},"Creating and Running a Test"),(0,r.kt)(s.Z,{groupId:"dashboard-cli",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"dash",label:"Dashboard",mdxType:"TabItem"},(0,r.kt)("p",null,"If you prefer to use the Dashboard, just go to Tests, and click the ",(0,r.kt)("inlineCode",{parentName:"p"},"Add a new test")," button. Fill in the Test Name, choose the Test Type (",(0,r.kt)("inlineCode",{parentName:"p"},"curl/test"),"), and then choose Test Source."),(0,r.kt)("h3",{id:"file"},"File"),(0,r.kt)("p",null,"For a File source, the test file is uploaded directly."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"curl test - creation dialog - file",src:n(48575).Z,width:"867",height:"675"})),(0,r.kt)("h3",{id:"git-file"},"Git File"),(0,r.kt)("p",null,"For a Git file, you need to fill in the repository details - Git repository URI (in this case ",(0,r.kt)("inlineCode",{parentName:"p"},"https://github.com/kubeshop/testkube.git"),"), branch (",(0,r.kt)("inlineCode",{parentName:"p"},"main"),"), and the path to the cURL test in your repository (",(0,r.kt)("inlineCode",{parentName:"p"},"test/curl/executor-tests/curl-smoke-test.json"),"). In this example, the repository is public, but in the case of private ones, you would need to additionally fill in the Git credentials."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"curl test - creation dialog - git file",src:n(82394).Z,width:"872",height:"1062"}))),(0,r.kt)(l.Z,{value:"cli",label:"CLI",mdxType:"TabItem"},(0,r.kt)("p",null,"If you prefer using the CLI, you can create the test with ",(0,r.kt)("inlineCode",{parentName:"p"},"testkube create test"),"."),(0,r.kt)("p",null,"You need to set:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"--name")," (for example, ",(0,r.kt)("inlineCode",{parentName:"li"},"curl-test"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"--type")," (in this case ",(0,r.kt)("inlineCode",{parentName:"li"},"curl/test"),")")),(0,r.kt)("p",null,"And, then choose the Test Content type based on the Test Source you want to use:"),(0,r.kt)("h3",{id:"file-1"},"File"),(0,r.kt)("p",null,"For a File test source:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"--test-content-type")," (",(0,r.kt)("inlineCode",{parentName:"li"},"file-uri"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"--file")," (path to your curl test - in this case ",(0,r.kt)("inlineCode",{parentName:"li"},"test/curl/executor-tests/curl-smoke-test.json"),")")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"testkube create test --name curl-test --type curl/test --test-content-type file-uri --file test/curl/executor-tests/curl-smoke-test.json\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh",metastring:'title="Expected output:"',title:'"Expected','output:"':!0},"Test created testkube / curl-test \ud83e\udd47\n")),(0,r.kt)("p",null,"You can then run the test with ",(0,r.kt)("inlineCode",{parentName:"p"},"testkube run test curl-test"),"."),(0,r.kt)("h3",{id:"git-file-1"},"Git File"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"--test-content-type")," (",(0,r.kt)("inlineCode",{parentName:"li"},"git-file"),", so specific file will be checked out from the Git repository)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"--git-uri")," - Repository URI (in case of this example, ",(0,r.kt)("inlineCode",{parentName:"li"},"https://github.com/kubeshop/testkube.git"),")."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"--git-branch")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"--git-path")," - Path to the k6 script in the repository (in this case ",(0,r.kt)("inlineCode",{parentName:"li"},"test/curl/executor-tests/curl-smoke-test.json"),").")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"testkube create test --name curl-test --type curl/test --test-content-type git-file --git-uri https://github.com/kubeshop/testkube.git --git-branch main --git-path test/curl/executor-tests/curl-smoke-test.json\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh",metastring:'title="Expected output:"',title:'"Expected','output:"':!0},"Test created testkube / curl-test \ud83e\udd47\n")),(0,r.kt)("p",null,"You can then run the test with ",(0,r.kt)("inlineCode",{parentName:"p"},"testkube run test curl-test"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"$ testkube run test curl-test\nType:              curl/test\nName:              curl-test\nExecution ID:      6400870d237c189271627cfa\nExecution name:    curl-test-1\nExecution number:  1\nStatus:            running\nStart time:        2023-03-02 11:22:53.0107448 +0000 UTC\nEnd time:          0001-01-01 00:00:00 +0000 UTC\nDuration:          \n\n\n\nTest execution started\nWatch test execution until complete:\n$ kubectl testkube watch execution curl-test-1\n\n\nUse following command to get test execution details:\n$ kubectl testkube get execution curl-test-1\n")),(0,r.kt)("p",null,"You can then watch the execution, or get the results after the execution is finished."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'ID:         6400870d237c189271627cfa\nName:       curl-test-1\nNumber:            1\nTest name:         curl-test\nType:              curl/test\nStatus:            passed\nStart time:        2023-03-02 11:22:53.01 +0000 UTC\nEnd time:          2023-03-02 11:23:02.472 +0000 UTC\nDuration:          00:00:09\nRepository parameters:\n  Branch:          main\n  Commit:          \n  Path:            test/curl/executor-tests/curl-smoke-test.json\n  Working dir:     \n  Certificate:     \n\nrunning test [6400870d237c189271627cfa]\n\ud83d\ude9a Initializing...\n\ud83c\udf0d Reading environment variables...\n\u2705 Environment variables read successfully\nRUNNER_ENDPOINT="testkube-minio-service-testkube:9000"\nRUNNER_ACCESSKEYID="********"\nRUNNER_SECRETACCESSKEY="********"\nRUNNER_REGION=""\nRUNNER_TOKEN=""\nRUNNER_BUCKET="testkube-artifacts"\nRUNNER_SSL=false\nRUNNER_SCRAPPERENABLED="true"\nRUNNER_GITUSERNAME=""\nRUNNER_GITTOKEN=""\nRUNNER_DATADIR="/data"\n\ud83d\udce6 Fetching test content from git-file...\n\u2705 Test content fetched to path /data/repo/test/curl/executor-tests/curl-smoke-test.json\n\ud83d\udcc2 Fetching uploads from object store testkube-minio-service-testkube:9000...\n\ud83d\udcc2 Placing files from buckets into /data/uploads/ []\n\ud83d\udcc2 Getting the contents of bucket folders [test-curl-test]\n\n\ud83d\udcc2 Setting up access to files in /data\n\ud83d\udd2c Executing in directory /data: \n $ chmod \n\u2705 Execution succeeded\n\u2705 Access to files enabled\n\u2705 Initialization successful\n0xc000f641f0\n\ud83d\ude9a Preparing test runner\n\ud83c\udf0d Reading environment variables...\n\u2705 Environment variables read successfully\nRUNNER_ENDPOINT="testkube-minio-service-testkube:9000"\nRUNNER_ACCESSKEYID="********"\nRUNNER_SECRETACCESSKEY="********"\nRUNNER_REGION=""\nRUNNER_TOKEN=""\nRUNNER_BUCKET="testkube-artifacts"\nRUNNER_SSL=false\nRUNNER_SCRAPPERENABLED="true"\nRUNNER_GITUSERNAME=""\nRUNNER_GITTOKEN=""\nRUNNER_DATADIR="/data"\nrunning test [6400870d237c189271627cfa]\n\ud83d\ude9a Preparing for test run\n\ud83d\udce6 Fetching test content from git-file...\n\u2705 Test content fetched to path /tmp/git-checkout2214379061/repo/test/curl/executor-tests/curl-smoke-test.json\n\ud83d\udd11 Filling in the input templates\n\u2705 Successfully filled the input templates\n\ud83d\udd2c Executing in directory : \n $ curl -is https://testkube.io/\nHTTP/2 200 \ndate: Thu, 02 Mar 2023 11:22:59 GMT\ncontent-type: text/html\n// ... output skipped\n\nTest execution completed with success in 9.462s \ud83e\udd47\n'))),(0,r.kt)(l.Z,{value:"crd",label:"Custom Resource",mdxType:"TabItem"},(0,r.kt)("p",null,"The third option to create the Test is to use a Test CRD. If you already have the test created, you can check the definition in Dashboard (",(0,r.kt)("inlineCode",{parentName:"p"},"Definition")," tab in Test Settings). "),(0,r.kt)("p",null,"You can also get a definition while using the ",(0,r.kt)("inlineCode",{parentName:"p"},"testkube create test")," command by adding ",(0,r.kt)("inlineCode",{parentName:"p"},"--crd-only"),".\nIn that case, the test won't be created but the definition will be displayed."),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"testkube create test --name curl-test --type curl/test --test-content-type git-file --git-uri https://github.com/kubeshop/testkube.git --git-branch main --git-path test/curl/executor-tests/curl-smoke-test.json --crd-only\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: tests.testkube.io/v3\nkind: Test\nmetadata:\n  name: curl-executor-smoke\n  namespace: testkube\n  labels:\n    core-tests: executors\nspec:\n  type: curl/test\n  content:\n    type: git-file\n    repository:\n      type: git-file\n      uri: https://github.com/kubeshop/testkube.git\n      branch: main\n      path: test/curl/executor-tests/curl-smoke-test.json\n")))),(0,r.kt)("p",null,"When the Test CRD is saved to the yaml file, it can then be applied directly with ",(0,r.kt)("inlineCode",{parentName:"p"},"kubectl apply -f SOME_FILE_NAME.yaml"),"."))}m.isMDXComponent=!0},48575:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/dashboard-curl-create-test-file-4a0abf1b9e92a3a23ee6852db33b6cad.png"},82394:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/dashboard-curl-create-test-git-file-38ad06f431caa734b70756a751c56769.png"}}]);