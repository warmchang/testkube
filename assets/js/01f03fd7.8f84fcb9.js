"use strict";(self.webpackChunktestkube_documentation=self.webpackChunktestkube_documentation||[]).push([[8358],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var o=t(67294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,s=function(e,n){if(null==e)return{};var t,o,s={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var c=o.createContext({}),u=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=u(e.components);return o.createElement(c.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,s=e.mdxType,a=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=u(t),m=s,g=d["".concat(c,".").concat(m)]||d[m]||l[m]||a;return t?o.createElement(g,r(r({ref:n},p),{},{components:t})):o.createElement(g,r({ref:n},p))}));function m(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var a=t.length,r=new Array(a);r[0]=d;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:s,r[1]=i;for(var u=2;u<a;u++)r[u]=t[u];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},23612:(e,n,t)=>{t.d(n,{Z:()=>g});var o=t(67294),s=t(86010),a=t(35281),r=t(95999);const i="admonition_LlT9",c="admonitionHeading_tbUL",u="admonitionIcon_kALy",p="admonitionContent_S0QG";const l={note:{infimaClassName:"secondary",iconComponent:function(){return o.createElement("svg",{viewBox:"0 0 14 16"},o.createElement("path",{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))},label:o.createElement(r.Z,{id:"theme.admonition.note",description:"The default label used for the Note admonition (:::note)"},"note")},tip:{infimaClassName:"success",iconComponent:function(){return o.createElement("svg",{viewBox:"0 0 12 16"},o.createElement("path",{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))},label:o.createElement(r.Z,{id:"theme.admonition.tip",description:"The default label used for the Tip admonition (:::tip)"},"tip")},danger:{infimaClassName:"danger",iconComponent:function(){return o.createElement("svg",{viewBox:"0 0 12 16"},o.createElement("path",{fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))},label:o.createElement(r.Z,{id:"theme.admonition.danger",description:"The default label used for the Danger admonition (:::danger)"},"danger")},info:{infimaClassName:"info",iconComponent:function(){return o.createElement("svg",{viewBox:"0 0 14 16"},o.createElement("path",{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))},label:o.createElement(r.Z,{id:"theme.admonition.info",description:"The default label used for the Info admonition (:::info)"},"info")},caution:{infimaClassName:"warning",iconComponent:function(){return o.createElement("svg",{viewBox:"0 0 16 16"},o.createElement("path",{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))},label:o.createElement(r.Z,{id:"theme.admonition.caution",description:"The default label used for the Caution admonition (:::caution)"},"caution")}},d={secondary:"note",important:"info",success:"tip",warning:"danger"};function m(e){const{mdxAdmonitionTitle:n,rest:t}=function(e){const n=o.Children.toArray(e),t=n.find((e=>{var n;return o.isValidElement(e)&&"mdxAdmonitionTitle"===(null==(n=e.props)?void 0:n.mdxType)})),s=o.createElement(o.Fragment,null,n.filter((e=>e!==t)));return{mdxAdmonitionTitle:t,rest:s}}(e.children);return{...e,title:e.title??n,children:t}}function g(e){const{children:n,type:t,title:r,icon:g}=m(e),f=function(e){const n=d[e]??e;return l[n]||(console.warn(`No admonition config found for admonition type "${n}". Using Info as fallback.`),l.info)}(t),h=r??f.label,{iconComponent:b}=f,k=g??o.createElement(b,null);return o.createElement("div",{className:(0,s.Z)(a.k.common.admonition,a.k.common.admonitionType(e.type),"alert",`alert--${f.infimaClassName}`,i)},o.createElement("div",{className:c},o.createElement("span",{className:u},k),h),o.createElement("div",{className:p},n))}},70399:(e,n,t)=>{t.r(n),t.d(n,{ExecutorInfo:()=>l,assets:()=>u,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>c,toc:()=>p});var o=t(87462),s=(t(67294),t(3905)),a=t(23612);const r={},i="SoapUI",c={unversionedId:"test-types/executor-soapui",id:"test-types/executor-soapui",title:"SoapUI",description:"SoapUI is an open-source tool used for the end-to-end testing of REST, SOAP and GraphQL APIs, as well as JMS, JDBC and other web services. Testkube supports the SoapUI executor implementation.",source:"@site/docs/test-types/executor-soapui.md",sourceDirName:"test-types",slug:"/test-types/executor-soapui",permalink:"/test-types/executor-soapui",draft:!1,editUrl:"https://github.com/kubeshop/testkube/docs/docs/test-types/executor-soapui.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Postman",permalink:"/test-types/executor-postman"},next:{title:"Prebuilt Testkube Executor",permalink:"/test-types/prebuilt-executor"}},u={},p=[{value:"<strong>Running a SoapUI Test</strong>",id:"running-a-soapui-test",level:2},{value:"<strong>Using Files as Input</strong>",id:"using-files-as-input",level:3},{value:"<strong>Using Strings as Input</strong>",id:"using-strings-as-input",level:3},{value:"<strong>Running the Tests</strong>",id:"running-the-tests",level:3},{value:"<strong>Using Parameters and Arguments in Your Tests</strong>",id:"using-parameters-and-arguments-in-your-tests",level:3},{value:"<strong>Reports, Plugins and Extensions</strong>",id:"reports-plugins-and-extensions",level:2}],l=()=>(0,s.kt)("div",null,(0,s.kt)(a.Z,{type:"info",icon:"\ud83c\udf93",title:"What is SoapUI?",mdxType:"Admonition"},(0,s.kt)("ul",null,(0,s.kt)("li",null,"SoapUI is an open-source tool used for end-to-end testing of REST, SOAP and GraphQL APIs, as well as JMS, JDBC and other web services.")))),d={toc:p,ExecutorInfo:l};function m(e){let{components:n,...t}=e;return(0,s.kt)("wrapper",(0,o.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"soapui"},"SoapUI"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://www.soapui.org"},"SoapUI")," is an open-source tool used for the end-to-end testing of REST, SOAP and GraphQL APIs, as well as JMS, JDBC and other web services. Testkube supports the SoapUI executor implementation."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Check out our ",(0,s.kt)("a",{parentName:"strong",href:"https://kubeshop.io/blog/run-kubernetes-tests-with-soapui-and-testkube"},"blog post")," to follow tutorial steps to Learn how to run functional tests in Kubernetes with SoapUI and Testkube.")),(0,s.kt)("p",null,"Testkube supports the ",(0,s.kt)("a",{parentName:"p",href:"https://www.soapui.org"},"SoapUI")," executor implementation."),(0,s.kt)("h2",{id:"running-a-soapui-test"},(0,s.kt)("strong",{parentName:"h2"},"Running a SoapUI Test")),(0,s.kt)("p",null,"In order to run a SoapUI test using Testkube, begin by creating a Testkube Test."),(0,s.kt)("p",null,"An example of an exported SoapUI test looks the following:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-xml"},'<?xml version="1.0" encoding="UTF-8"?>\n<con:soapui-project xmlns:con="http://eviware.com/soapui/config" id="68931eeb-521d-4870-972f-9d0f99c75cc2" activeEnvironment="Default" name="Testkube project" resourceRoot="${projectDir}" soapui-version="5.7.0" abortOnError="false" runType="SEQUENTIAL">\n   <con:settings>\n      <con:setting id="com.smartbear.swagger.ExportSwaggerAction$FormBase Path" />\n      <con:setting id="com.smartbear.swagger.ExportSwaggerAction$FormTarget File" />\n      <con:setting id="com.smartbear.swagger.ExportSwaggerAction$FormFormat">json</con:setting>\n      <con:setting id="com.smartbear.swagger.ExportSwaggerAction$FormAPI Version">Swagger 2.0</con:setting>\n      <con:setting id="com.smartbear.swagger.ExportSwaggerAction$FormSwagger Version">Swagger 2.0</con:setting>\n   </con:settings>\n   <con:interface xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:RestService" id="4bcedf3f-ac64-4f45-9615-7d58b15b9ca1" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://kubeshop.io" type="rest">\n      <con:settings />\n      <con:definitionCache type="TEXT" rootPart="" />\n      <con:endpoints>\n         <con:endpoint>https://kubeshop.io</con:endpoint>\n      </con:endpoints>\n      <con:resource name="" path="" id="538412a5-540d-4772-aca8-2b19e456af77">\n         <con:settings />\n         <con:parameters />\n         <con:method name="1" id="fa5cf353-bafd-4aa1-9fa6-301d0d5c6e95" method="GET">\n            <con:settings />\n            <con:parameters />\n            <con:representation type="RESPONSE">\n               <con:mediaType>text/html</con:mediaType>\n               <con:status>200</con:status>\n               <con:params />\n               <con:element>html</con:element>\n            </con:representation>\n            <con:representation type="RESPONSE">\n               <con:mediaType>application/json</con:mediaType>\n               <con:status>200</con:status>\n               <con:params />\n               <con:element xmlns:pet="https://kubeshop.io/">pet:Response</con:element>\n            </con:representation>\n            <con:representation type="RESPONSE">\n               <con:mediaType>text/html; charset=utf-8</con:mediaType>\n               <con:status>200</con:status>\n               <con:params />\n               <con:element>html</con:element>\n            </con:representation>\n            <con:request name="Request 1" id="e5ee1b97-e7a5-4fd0-9ecd-6671558f25bc" mediaType="application/json">\n               <con:settings>\n                  <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/&gt;</con:setting>\n               </con:settings>\n               <con:endpoint>https://kubeshop.io</con:endpoint>\n               <con:request />\n               <con:originalUri>https://kubeshop.io/</con:originalUri>\n               <con:credentials>\n                  <con:authType>No Authorization</con:authType>\n               </con:credentials>\n               <con:jmsConfig JMSDeliveryMode="PERSISTENT" />\n               <con:jmsPropertyConfig />\n               <con:parameters />\n            </con:request>\n         </con:method>\n      </con:resource>\n   </con:interface>\n   <con:testSuite id="d01755ab-653a-42e9-82ef-97ffea557480" name="Testkube TestSuite">\n      <con:settings />\n      <con:runType>SEQUENTIAL</con:runType>\n      <con:testCase id="8803628b-cc8d-4aaa-bbba-e1bc878f202b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Kubeshop TestCase" searchProperties="true">\n         <con:settings />\n         <con:testStep type="restrequest" name="1 - Request 1" id="00e86b82-8ef2-483f-837b-7669bebe3c87">\n            <con:settings />\n            <con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" service="https://kubeshop.io" resourcePath="" methodName="1" xsi:type="con:RestRequestStep">\n               <con:restRequest name="1 - Request 1" id="e5ee1b97-e7a5-4fd0-9ecd-6671558f25bc" mediaType="application/json">\n                  <con:settings>\n                     <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/&gt;</con:setting>\n                  </con:settings>\n                  <con:endpoint>https://kubeshop.io</con:endpoint>\n                  <con:request />\n                  <con:originalUri>https://kubeshop.io</con:originalUri>\n                  <con:assertion type="Valid HTTP Status Codes" id="c88e07cf-dd80-4b11-b21d-7cad8474202b" name="Valid HTTP Status Codes">\n                     <con:configuration>\n                        <codes>200</codes>\n                     </con:configuration>\n                  </con:assertion>\n                  <con:assertion type="Simple Contains" id="7072dc46-6b93-43b4-b6bd-0464db7b249e" name="Contains">\n                     <con:configuration>\n                        <token>testkube</token>\n                        <ignoreCase>true</ignoreCase>\n                        <useRegEx>false</useRegEx>\n                     </con:configuration>\n                  </con:assertion>\n                  <con:credentials>\n                     <con:authType>No Authorization</con:authType>\n                  </con:credentials>\n                  <con:jmsConfig JMSDeliveryMode="PERSISTENT" />\n                  <con:jmsPropertyConfig />\n                  <con:parameters />\n               </con:restRequest>\n            </con:config>\n         </con:testStep>\n         <con:properties />\n      </con:testCase>\n      <con:testCase id="4c0fc01b-16db-41e9-9844-d4c2a88d27f2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Testkube TestCase" searchProperties="true">\n         <con:settings />\n         <con:testStep type="restrequest" name="REST Request" id="e1be7e01-5d4d-424e-b2f9-7daf84aaafa9">\n            <con:settings />\n            <con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" service="https://kubeshop.io" methodName="1" resourcePath="" xsi:type="con:RestRequestStep">\n               <con:restRequest name="REST Request" id="191f16b4-cb04-4ffa-b8f9-da0e788c8262" mediaType="application/json">\n                  <con:settings>\n                     <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/&gt;</con:setting>\n                  </con:settings>\n                  <con:encoding>UTF-8</con:encoding>\n                  <con:endpoint>https://kubeshop.github.io/testkube/</con:endpoint>\n                  <con:request />\n                  <con:originalUri>https://kubeshop.io</con:originalUri>\n                  <con:assertion type="Simple Contains" id="d9497693-01e2-4e3e-8ce5-5a292f9b6e41" name="Contains">\n                     <con:configuration>\n                        <token>kubectl</token>\n                        <ignoreCase>false</ignoreCase>\n                        <useRegEx>false</useRegEx>\n                     </con:configuration>\n                  </con:assertion>\n                  <con:credentials>\n                     <con:authType>No Authorization</con:authType>\n                  </con:credentials>\n                  <con:jmsConfig JMSDeliveryMode="PERSISTENT" />\n                  <con:jmsPropertyConfig />\n                  <con:parameters />\n               </con:restRequest>\n            </con:config>\n         </con:testStep>\n         <con:properties />\n      </con:testCase>\n      <con:properties />\n   </con:testSuite>\n   <con:properties />\n   <con:wssContainer />\n   <con:oAuth2ProfileContainer />\n   <con:oAuth1ProfileContainer />\n   <con:sensitiveInformation />\n</con:soapui-project>\n')),(0,s.kt)("h3",{id:"using-files-as-input"},(0,s.kt)("strong",{parentName:"h3"},"Using Files as Input")),(0,s.kt)("p",null,"Testkube and the SoapUI executor accept a project file as input."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"$ kubectl testkube create test --file example-project.xml --type soapui/xml --name example-test\nTest created  / example-test \ud83e\udd47\n\n")),(0,s.kt)("h3",{id:"using-strings-as-input"},(0,s.kt)("strong",{parentName:"h3"},"Using Strings as Input")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"$ cat example-project.xml | kubectl testkube create test --type soapui/xml --name example-test-string\nTest created  / example-test-string \ud83e\udd47\n\n")),(0,s.kt)("h3",{id:"running-the-tests"},(0,s.kt)("strong",{parentName:"h3"},"Running the Tests")),(0,s.kt)("p",null,"To run the created test, use:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"$ kubectl testkube run test example-test\n\nType          : soapui/xml\nName          : example-test\nExecution ID  : 624eedd443ed8485ae9289e2\nExecution name: illegally-credible-mouse\n\n\n\nTest execution started\n\nWatch test execution until complete:\n$ kubectl testkube watch execution 624eedd443ed8485ae9289e2\n\n\nUse following command to get test execution details:\n$ kubectl testkube get execution 624eedd443ed8485ae9289e2\n\n")),(0,s.kt)("h3",{id:"using-parameters-and-arguments-in-your-tests"},(0,s.kt)("strong",{parentName:"h3"},"Using Parameters and Arguments in Your Tests")),(0,s.kt)("p",null,"SoapUI lets you configure your test runs using different parameters. To see all available command line arguments, check the ",(0,s.kt)("a",{parentName:"p",href:"https://www.soapui.org/docs/test-automation/running-functional-tests/"},"official SoapUI docs"),"."),(0,s.kt)("p",null,"To use parameters when working with Testkube, use the ",(0,s.kt)("inlineCode",{parentName:"p"},"kubectl testkube run")," command with the ",(0,s.kt)("inlineCode",{parentName:"p"},"--args")," parameter."),(0,s.kt)("p",null,"An example would be:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"$ kubectl testkube run test -f example-test --args '-I -c \"Testkube TestCase\"'\n\nType          : soapui/xml\nName          : successful-test\nExecution ID  : 625404e5a4cc6d2861193c60\nExecution name: currently-amused-pug\n\n\nGetting pod logs\nExecution completed ================================\n=\n= SOAPUI_HOME = /usr/local/SmartBear/SoapUI-5.7.0\n=\n================================\nSoapUI 5.7.0 TestCase Runner\n08:14:18,671 INFO  [DefaultSoapUICore] Creating new settings at [/root/soapui-settings.xml]\n08:14:27,457 INFO  [PluginManager] 0 plugins loaded in 11 ms\n08:14:27,459 INFO  [DefaultSoapUICore] All plugins loaded\n08:14:37,509 INFO  [WsdlProject] Loaded project from [file:/tmp/test-content2412821894]\n08:14:37,579 INFO  [SoapUITestCaseRunner] Running SoapUI tests in project [Testkube project]\n08:14:37,580 INFO  [SoapUITestCaseRunner] Running TestCase [Testkube TestCase]\n08:14:37,653 INFO  [SoapUITestCaseRunner] Running SoapUI testcase [Testkube TestCase]\n08:14:37,700 INFO  [SoapUITestCaseRunner] running step [REST Request]\n08:14:41,816 INFO  [SoapUITestCaseRunner] Assertion [Contains] has status VALID\n08:14:41,878 INFO  [SoapUITestCaseRunner] Finished running SoapUI testcase [Testkube TestCase], time taken: 866ms, status: FINISHED\n08:14:41,909 INFO  [SoapUITestCaseRunner] TestCase [Testkube TestCase] finished with status [FINISHED] in 866ms\n\n\n.\nUse the following command to get test execution details:\n$ kubectl testkube get execution 625404e5a4cc6d2861193c60\n")),(0,s.kt)("h2",{id:"reports-plugins-and-extensions"},(0,s.kt)("strong",{parentName:"h2"},"Reports, Plugins and Extensions")),(0,s.kt)("p",null,"In order to use reports, add the plugins and extensions as described in the ",(0,s.kt)("a",{parentName:"p",href:"https://www.soapui.org/docs/test-automation/running-in-docker/"},"SoapUI docs"),". This is currently not supported by Testkube.\nIf you are interested in using this feature, please create an ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/testkube/issues"},"issue")," in the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/testkube"},"Testkube repository"),"."))}m.isMDXComponent=!0}}]);