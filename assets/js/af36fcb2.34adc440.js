"use strict";(self.webpackChunktestkube_documentation=self.webpackChunktestkube_documentation||[]).push([[1657],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),i=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=i(e.components);return r.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,u=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),m=i(n),d=a,h=m["".concat(u,".").concat(d)]||m[d]||p[d]||s;return n?r.createElement(h,o(o({ref:t},l),{},{components:n})):r.createElement(h,o({ref:t},l))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=m;var c={};for(var u in t)hasOwnProperty.call(t,u)&&(c[u]=t[u]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var i=2;i<s;i++)o[i]=n[i];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},42733:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>c,toc:()=>i});var r=n(87462),a=(n(67294),n(3905));const s={sidebar_position:10,sidebar_label:"cURL"},o="cURL Commands",c={unversionedId:"test-types/executor-curl",id:"test-types/executor-curl",title:"cURL Commands",description:"Testkube is able to run cURL commands as tests. There are 2 possibilities to validate the outputs of the cURL command:",source:"@site/docs/4-test-types/executor-curl.md",sourceDirName:"4-test-types",slug:"/test-types/executor-curl",permalink:"/testkube/test-types/executor-curl",draft:!1,editUrl:"https://github.com/kubeshop/testkube/docs/docs/4-test-types/executor-curl.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10,sidebar_label:"cURL"},sidebar:"tutorialSidebar",previous:{title:"Ginkgo",permalink:"/testkube/test-types/executor-ginkgo"},next:{title:"Container Executor",permalink:"/testkube/test-types/container-executor"}},u={},i=[{value:"<strong>Running Tests Using cURL Commands</strong>",id:"running-tests-using-curl-commands",level:2},{value:"<strong>Creating and Running a cURL Test</strong>",id:"creating-and-running-a-curl-test",level:3}],l={toc:i};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"curl-commands"},"cURL Commands"),(0,a.kt)("p",null,"Testkube is able to run cURL commands as tests. There are 2 possibilities to validate the outputs of the cURL command:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"By using the status returned."),(0,a.kt)("li",{parentName:"ul"},"By checking the body of the response.")),(0,a.kt)("p",null,"Below is an example of how to format the tests:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "command": [\n    "curl",\n    "https://reqbin.com/echo/get/json",\n    "-H",\n    "\'Accept: application/json\'"\n  ],\n  "expected_status": "200",\n  "expected_body": "{\\"success\\":\\"true\\"}"\n}\n')),(0,a.kt)("p",null,"The test Custom Resource Definition (CRD) should be created with the type ",(0,a.kt)("inlineCode",{parentName:"p"},"curl/test"),"."),(0,a.kt)("h2",{id:"running-tests-using-curl-commands"},(0,a.kt)("strong",{parentName:"h2"},"Running Tests Using cURL Commands")),(0,a.kt)("h3",{id:"creating-and-running-a-curl-test"},(0,a.kt)("strong",{parentName:"h3"},"Creating and Running a cURL Test")),(0,a.kt)("p",null,"Save a test in a format as described above. In this example, it is ",(0,a.kt)("inlineCode",{parentName:"p"},"curl-test.json"),"."),(0,a.kt)("p",null,"Create the test by running ",(0,a.kt)("inlineCode",{parentName:"p"},'kubectl testkube create test --file curl-test.json --name curl-test --type "curl/test"'),"."),(0,a.kt)("p",null,"Check if the test was created using the command ",(0,a.kt)("inlineCode",{parentName:"p"},"kubectl testkube get tests"),". The output will be similar to:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"       NAME       |        TYPE         \n+-----------------+--------------------+\n  curl-test      | curl/test  \n")),(0,a.kt)("p",null,"The test can be run using ",(0,a.kt)("inlineCode",{parentName:"p"},"kubectl testkube run test curl-test")," which gives the output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"Type          : curl/test\nName          : curl-test\nExecution ID  : 613a2d7056499e6e3d5b9c3e\nExecution name: sadly-optimal-ram\n\nTest queued for execution\n\nUse the following command to get test execution details:\n$ kubectl testkube get execution 613a2d7056499e6e3d5b9c3e\n\nOr watch the script execution until complete:\n$ kubectl testkube watch execution 613a2d7056499e6e3d5b9c3e\n")),(0,a.kt)("p",null,"As seen above, results can be checked using ",(0,a.kt)("inlineCode",{parentName:"p"},"kubectl testkube get execution 613a2d7056499e6e3d5b9c3e"),", where the id of the execution is unique for each execution. Ensure that the correct id is used. The output will look something like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'Name: painfully-super-colt,Status: success,Duration: 534ms\n\nHTTP/2 200 \ndate: Thu, 09 Sep 2021 15:51:15 GMT\ncontent-type: application/json\ncontent-length: 19\nlast-modified: Thu, 09 Sep 2021 13:07:39 GMT\ncache-control: max-age=31536000\ncf-cache-status: HIT\nage: 6939\naccept-ranges: bytes\nexpect-ct: max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"\nreport-to: {"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=OZHPfvLjuVhpklzeGvhs8Ic0w%2FJ1%2BKgMcXeichnmMt9lKxF%2Fkco%2FHD2Z2vWfvInH9IPNuAQpjKu1Roqy8efIhVztIhvBP14Wx4wdBsQhzxUe9znZ%2Fmanwsky5G3Q"}],"group":"cf-nel","max_age":604800}\nnel: {"success_fraction":0,"report_to":"cf-nel","max_age":604800}\nserver: cloudflare\ncf-ray: 68c193af1f706571-LHR\nalt-svc: h3=":443"; ma=86400, h3-29=":443"; ma=86400, h3-28=":443"; ma=86400, h3-27=":443"; ma=86400\n\n{"success":"true"}\n')),(0,a.kt)("p",null,"There is a generated name for the execution, the status, duration and the output of the cURL command."))}p.isMDXComponent=!0}}]);