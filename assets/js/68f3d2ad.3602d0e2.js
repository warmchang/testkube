"use strict";(self.webpackChunktestkube_documentation=self.webpackChunktestkube_documentation||[]).push([[4748],{3905:(e,t,n)=>{n.d(t,{Zo:()=>g,kt:()=>k});var o=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,s=function(e,t){if(null==e)return{};var n,o,s={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var u=o.createContext({}),l=function(e){var t=o.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},g=function(e){var t=l(e.components);return o.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,u=e.parentName,g=i(e,["components","mdxType","originalType","parentName"]),p=l(n),k=s,d=p["".concat(u,".").concat(k)]||p[k]||c[k]||r;return n?o.createElement(d,a(a({ref:t},g),{},{components:n})):o.createElement(d,a({ref:t},g))}));function k(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,a=new Array(r);a[0]=p;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i.mdxType="string"==typeof e?e:s,a[1]=i;for(var l=2;l<r;l++)a[l]=n[l];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},2288:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>a,default:()=>c,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var o=n(87462),s=(n(67294),n(3905));const r={sidebar_position:9,sidebar_label:"Ginkgo"},a="Ginkgo-based Tests",i={unversionedId:"test-types/executor-ginkgo",id:"test-types/executor-ginkgo",title:"Ginkgo-based Tests",description:"Testkube allows us to run Ginkgo-based tests. (https://onsi.github.io/ginkgo/)",source:"@site/docs/4-test-types/executor-ginkgo.md",sourceDirName:"4-test-types",slug:"/test-types/executor-ginkgo",permalink:"/testkube/test-types/executor-ginkgo",draft:!1,editUrl:"https://github.com/kubeshop/testkube/docs/docs/4-test-types/executor-ginkgo.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9,sidebar_label:"Ginkgo"},sidebar:"tutorialSidebar",previous:{title:"Gradle",permalink:"/testkube/test-types/executor-gradle"},next:{title:"cURL",permalink:"/testkube/test-types/executor-curl"}},u={},l=[{value:"<strong>Test Environment</strong>",id:"test-environment",level:2},{value:"<strong>Create a New Ginkgo-based Test</strong>",id:"create-a-new-ginkgo-based-test",level:2},{value:"Write a Ginkgo test",id:"write-a-ginkgo-test",level:3},{value:"Add Test to Testkube",id:"add-test-to-testkube",level:3},{value:"<strong>Running a Test</strong>",id:"running-a-test",level:2},{value:"<strong>Getting Test Results</strong>",id:"getting-test-results",level:2},{value:"<strong>Summary</strong>",id:"summary",level:2}],g={toc:l};function c(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,o.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"ginkgo-based-tests"},"Ginkgo-based Tests"),(0,s.kt)("p",null,"Testkube allows us to run Ginkgo-based tests. (",(0,s.kt)("a",{parentName:"p",href:"https://onsi.github.io/ginkgo/"},"https://onsi.github.io/ginkgo/"),")"),(0,s.kt)("p",null,"| Ginkgo is a mature testing framework for Go designed to help you write expressive specs. Ginkgo builds on top of Go's testing foundation and is complemented by the Gomega matcher library. Together, Ginkgo and Gomega let you express the intent behind your specs clearly."),(0,s.kt)("h2",{id:"test-environment"},(0,s.kt)("strong",{parentName:"h2"},"Test Environment")),(0,s.kt)("p",null,"Let's try some simple Ginkgo. Testkube's Ginkgo Executor is using the ",(0,s.kt)("inlineCode",{parentName:"p"},"ginkgo")," binary and allows configuring it's behavior using arguments.\nBecause Ginkgo projects are quite complicated in terms of directory structure, we'll need to load them from a Git directory."),(0,s.kt)("p",null,"You can find example projects in the repository here: ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/testkube-executor-ginkgo/tree/main/examples"},"https://github.com/kubeshop/testkube-executor-ginkgo/tree/main/examples"),"."),(0,s.kt)("p",null,"Let's create a simple test which will check if an env variable is set to true: "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},"")),(0,s.kt)("p",null,"The default Ginkgo executor: "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: executor.testkube.io/v1\nkind: Executor\nmetadata:\n  name: ginkgo-executor\n  namespace: testkube\nspec:\n  features:\n  - artifacts\n  - junit-report\n  image: kubeshop/testkube-ginkgo-executor:0.0.4\n  types:\n  - ginkgo/test\n")),(0,s.kt)("h2",{id:"create-a-new-ginkgo-based-test"},(0,s.kt)("strong",{parentName:"h2"},"Create a New Ginkgo-based Test")),(0,s.kt)("h3",{id:"write-a-ginkgo-test"},"Write a Ginkgo test"),(0,s.kt)("p",null,"We'll try to check if there are any executors registered on the Testkube demo cluster. To do that we need to check the ",(0,s.kt)("inlineCode",{parentName:"p"},"/v1/executors"),"\nendpoint. Results should have at least one Executor registered."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'package testkube_api_test\n\nimport (\n    "encoding/json"\n    "io"\n    "net/http"\n\n    "github.com/kubeshop/testkube/pkg/api/v1/testkube"\n\n    . "github.com/onsi/ginkgo/v2"\n    . "github.com/onsi/gomega"\n)\n\nvar _ = Describe("API Test", func() {\n    It("There should be executors registered", func() {\n        resp, err := http.Get("https://demo.testkube.io/results/v1/executors")\n        Expect(err).To(BeNil())\n\n        executors, err := GetTestkubeExecutors(resp.Body)\n\n        Expect(err).To(BeNil())\n        Expect(len(executors)).To(BeNumerically(">", 1))\n    })\n})\n\nfunc GetTestkubeExecutors(body io.ReadCloser) ([]testkube.ExecutorDetails, error) {\n    bytes, err := io.ReadAll(body)\n    if err != nil {\n        return nil, err\n    }\n\n    results := []testkube.ExecutorDetails{}\n    err = json.Unmarshal(bytes, &results)\n\n    return results, err\n}\n\n')),(0,s.kt)("p",null,"The test is run in the standard Ginkgo bootstrapped project. "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"go mod init testkube-ginkgo-example\nginkgo bootstrap\n")),(0,s.kt)("p",null,"Everything was pushed to the Git repository."),(0,s.kt)("p",null,"You can also look at the code in our examples: ","[https://github.com/kubeshop/testkube-executor-ginkgo/tree/main/examples/testkube-api]"),(0,s.kt)("h3",{id:"add-test-to-testkube"},"Add Test to Testkube"),(0,s.kt)("p",null,"To add a Ginkgo test to Testkube you need to call the ",(0,s.kt)("inlineCode",{parentName:"p"},"create test")," command. We'll assume that our test is in a Git repository."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl testkube create test --git-uri https://github.com/kubeshop/testkube-executor-ginkgo.git --git-path examples/testkube-api --type ginkgo/test --name ginkgo-example-test --git-branch main\n")),(0,s.kt)("h2",{id:"running-a-test"},(0,s.kt)("strong",{parentName:"h2"},"Running a Test")),(0,s.kt)("p",null,"Let's pass the env variable to our test run:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"}," tk run test ginkgo-example-test -f                     \n\nType:              ginkgo/test\nName:              ginkgo-example-test\nExecution ID:      62eceb8df4732077cee099cf\nExecution name:    ginkgo-example-test-3\nExecution number:  3\nStatus:            running\nStart time:        2022-08-05 10:06:05.467437617 +0000 UTC\n\n... other logs \n\nRunning in parallel across 7 processes\n\u2022\n\nRan 1 of 1 Specs in 0.091 seconds\nSUCCESS! -- 1 Passed | 0 Failed | 0 Pending | 0 Skipped\n\n\nGinkgo ran 1 suite in 7.447676906s\nTest Suite Passed\n\nTest execution completed with success in 15.586s \ud83e\udd47\n\nWatch test execution until complete:\n$ kubectl testkube watch execution 62eceb8df4732077cee099cf\n\n\nUse the following command to get test execution details:\n$ kubectl testkube get execution 62eceb8df4732077cee099cf\n\n")),(0,s.kt)("h2",{id:"getting-test-results"},(0,s.kt)("strong",{parentName:"h2"},"Getting Test Results")),(0,s.kt)("p",null,"We can always get back to the test results: "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl testkube get execution 62eceb8df4732077cee099cf\n")),(0,s.kt)("p",null,"Output:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"# ....... a lot of Ginkgo logs\n\nID:         62eceb67f4732077cee099cd\nName        ginkgo-example-test-2\nNumber:            2\nTest name:         ginkgo-example-test\nType:              ginkgo/test\nStatus:            passed\nStart time:        2022-08-05 10:05:27.659 +0000 UTC\nEnd time:          2022-08-05 10:05:43.14 +0000 UTC\nDuration:          00:00:15\n\ngo: downloading github.com/kubeshop/testkube v1.4.5\ngo: downloading github.com/onsi/gomega v1.20.0\ngo: downloading github.com/onsi/ginkgo/v2 v2.1.4\ngo: downloading github.com/google/go-cmp v0.5.8\ngo: downloading golang.org/x/net v0.0.0-20220722155237-a158d28d115b\ngo: downloading gopkg.in/yaml.v3 v3.0.1\ngo: downloading golang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f\ngo: downloading golang.org/x/text v0.3.7\ngo: downloading go.mongodb.org/mongo-driver v1.10.1\ngo: downloading github.com/dustinkirkland/golang-petname v0.0.0-20191129215211-8e5a1ed0cff0\n\nRunning Suite: TestkubeApi Suite - /tmp/git-sparse-checkout2422275089/repo/examples/testkube-api\n================================================================================================\nRandom Seed: 1659693931 - will randomize all specs\n\nWill run 1 of 1 specs\nRunning in parallel across 7 processes\n\u2022\n\nRan 1 of 1 Specs in 0.088 seconds\nSUCCESS! -- 1 Passed | 0 Failed | 0 Pending | 0 Skipped\n\n\nGinkgo ran 1 suite in 7.7928584s\nTest Suite Passed\n\nStatus Test execution completed with success \ud83e\udd47\n")),(0,s.kt)("h2",{id:"summary"},(0,s.kt)("strong",{parentName:"h2"},"Summary")),(0,s.kt)("p",null,"Testkube simplifies running Go tests based on Ginkgo and allows them to run in your Kubernetes cluster with ease."))}c.isMDXComponent=!0}}]);