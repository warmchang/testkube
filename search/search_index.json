{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Testkube - your somewhat opinionated and friendly Kubernetes testing framework! Testkube decouples test artifacts and execution from CI/CD tooling. Tests are meant to be part of a cluster's state and can be executed as needed: Manually via kubectl CLI. Externally triggered via API (CI, external tooling, etc). Automatically on deployment of annotated/labeled services/pods/etc (WIP). The main Testkube components are: Kubectl plugin - simple - installed w/o 3rd party repositories (like Krew etc), communicates with API server. API Server - Work orchestrator, Runs executors, gathers execution results. Custom Resource Descriptors (CRD) Operator - Watches Testkube Custom Resources (CR), handles changes, communicates with API Server. Executors - Run tests defined for specific runner, currently available for Postman , Cypress , K6 and Curl . Results DB - For centralized test results management. A simple browser-based User Interface for monitoring test results. Testkube attempts to: Avoid vendor lock-in for test orchestration and execution in CI/CD pipelines. Make it easy to orchestrate and run any kinds of tests - functional, load/performance, security, compliance, etc., in your clusters, without having to wrap them in docker-images or provide network access. Make it possible to decouple test execution from build processes, allowing engineers to run specific tests whenever needed. Centralize all test results in a consistent format for actionable QA analytics. Provide a modular architecture for adding new types of test scripts and executors. Getting Started Check out the Installation and Getting Started guides to set up Testkube and run your first tests! Blog Posts Check out our blog posts that highlight Testkube functionality: Testkube Release v1.5 - August 29, 2022 Questions or Comments? What do you think of Testkube? We'd LOVE to hear from you! Please share your experiences and, of course, ideas on how we can make it better. Feel free to reach out on our Discord server .","title":"Welcome"},{"location":"#getting-started","text":"Check out the Installation and Getting Started guides to set up Testkube and run your first tests!","title":"Getting Started"},{"location":"#blog-posts","text":"Check out our blog posts that highlight Testkube functionality: Testkube Release v1.5 - August 29, 2022","title":"Blog Posts"},{"location":"#questions-or-comments","text":"What do you think of Testkube? We'd LOVE to hear from you! Please share your experiences and, of course, ideas on how we can make it better. Feel free to reach out on our Discord server .","title":"Questions or Comments?"},{"location":"UI/","text":"The Testkube UI The Testkube UI provides a simple web-based user interface for monitoring Testkube test results via a web browser. The URL to access the Testkube UI is https://demo.testkube.io , which, when first loaded, will prompt for the results endpoint of your Testkube installation. Click the Settings icon at the bottom left of the screen to return to change the Testkube API endpoint. See the UI Results Endpoint section below to find the endpoint to open the dashboard. Once you have the results endpoint, you can append it to the above URL (as an apiEndpoint parameter) for a direct link to the dashboard with your results: https://demo.testkube.io/?apiEndpoint=... Alternatively, the UI can be opened on your local machine using command sh kubectl testkube dashboard which uses port forwarding for accessing your local results endpoint (see more here ). Explore the UI The Testkube UI displays the current status of Tests and Test Suites executed in your environment. After selecting Tests or Test Suites in the left bar, the list of recent runs is displayed. At the top of the list, a Search field and filters for Labels and Status make finding tests in a large list easier: Select any Test or Test Suite to see the recent executions and their statuses. The execution statistics of the chosen Test or Test Suite are at the top of the screen, along with a graph of success or failure for the executions. The Recent executions tab has the list of executions. A green checkmark denotes a successful execution, a red 'x' denotes a failed execution and circling dots denotes a current run of a Test or Test Suite. The CLI Commands tab shows the commands used to perform the selected test: The Settings tab contains 3 types of information about the Test or Test Suite. General Settings Clicking the General box under the Settings tab displays the Test name & description and Labels for the Test or Test Suite: It is also the place to delete a Test or Test Suite: Variables & Secrets Visit Using Tests Variables for a description of adding Variables and Secrets. Definition Clicking the Definition box under the Settings tab allows the validation and export the configuration for the Test or Test Suite: UI Results Endpoint To expose the results endpoint to open the UI there are a few options: Expose the results endpoint using an Ingress controller and use it in the UI at https://demo.testkube.io . Install the dashboard together with Testkube. If you are using minikube use http://localhost:8088/v1 as a TestKube API endpoint. This is achieved by installing Testkube using the Helm Charts located at github.com/kubeshop/helm-charts . Prerequisites Add the repo to Helm: helm repo add kubeshop https://kubeshop.github.io/helm-charts && helm repo update An Ingress controller is needed to expose externally. By default Testkube is using ingress-nginx . Any other Ingress controller can be used but will require advanced configuration. A values file for guidance can be found here . Configure Ingress for Results Endpoint helm install testkube kubeshop/testkube --set testkube-api.ingress.enabled = \"true\" By default, the results are using the path /results , so the results will be accessible at ingress_host/results/ The Ingress configuration used is available in the Testkube Helm Repo . Installing the Testkube UI Ingress can be installed for the UI together with api-server Ingress by using a Helm chart: helm install testkube kubeshop/testkube --set testkube-dashboard.enabled = \"true\" --set testkube-dashboard.ingress.enabled = \"true\" --set testkube-api.ingress.enabled = \"true\" The Testkube UI talks to an api-server via the endpoint. Hence, the api-server will need to be exposed as well. To get the address of Ingress use: kubectl get ing HTTPS/TLS Configuration To have secure access to the UI and the results endpoint, a certificate should be provided. The Helm charts can be configured from the Ingress section of the values file: ingress : enabled : \"true\" annotations : kubernetes.io/ingress.class : nginx nginx.ingress.kubernetes.io/force-ssl-redirect : \"false\" nginx.ingress.kubernetes.io/ssl-redirect : \"false\" nginx.ingress.kubernetes.io/enable-cors : \"true\" nginx.ingress.kubernetes.io/cors-allow-methods : \"GET\" nginx.ingress.kubernetes.io/cors-allow-credentials : \"false\" # add an annotation indicating the issuer to use. cert-manager.io/cluster-issuer : letsencrypt-prod # controls whether the ingress is modified \u2018in-place\u2019, # or a new one is created specifically for the HTTP01 challenge. acme.cert-manager.io/http01-edit-in-place : \"true\" path : / hosts : - demo.testkube.io tlsenabled : \"true\" tls : # < placing a host in the TLS config will indicate a certificate should be created - hosts : - demo.testkube.io secretName : testkube-demo-cert-secret Certificates are automatically generated using encrypt and cert-manager, but can be configured for any particular case. A full values file example can be found here . If there is no need for TLS (Transport Layer Security) to be enabled, omit the TLS configuration. We highly discourage working in a non-safe environment which is exposed without the use of a TLS-based connection. Please do so in a private internal environment for testing or development purposes only. To pass specific values to the Ingress annotations, the Helm \"--set\" option can be used: helm install testkube kubeshop/testkube --set testkube-dashboard.enabled = \"true\" --set testkube-dashboard.ingress.enabled = \"true\" --set testkube-api.ingress.enabled = \"true\" --set testkube-api.ingress.annotations.kubernetes \\\\ .io/ingress \\\\ .class = \"anything_needed\" A better approach is to configure and call a values file with the Ingress custom values: helm install testkube kubeshop/testkube --values https://github.com/kubeshop/helm-charts/blob/39f73098630b333ba66db137e7fc016c39d92876/testkube/charts/testkube/values-demo.yaml","title":"UI"},{"location":"UI/#the-testkube-ui","text":"The Testkube UI provides a simple web-based user interface for monitoring Testkube test results via a web browser. The URL to access the Testkube UI is https://demo.testkube.io , which, when first loaded, will prompt for the results endpoint of your Testkube installation. Click the Settings icon at the bottom left of the screen to return to change the Testkube API endpoint. See the UI Results Endpoint section below to find the endpoint to open the dashboard. Once you have the results endpoint, you can append it to the above URL (as an apiEndpoint parameter) for a direct link to the dashboard with your results: https://demo.testkube.io/?apiEndpoint=... Alternatively, the UI can be opened on your local machine using command sh kubectl testkube dashboard which uses port forwarding for accessing your local results endpoint (see more here ).","title":"The Testkube UI"},{"location":"UI/#explore-the-ui","text":"The Testkube UI displays the current status of Tests and Test Suites executed in your environment. After selecting Tests or Test Suites in the left bar, the list of recent runs is displayed. At the top of the list, a Search field and filters for Labels and Status make finding tests in a large list easier: Select any Test or Test Suite to see the recent executions and their statuses. The execution statistics of the chosen Test or Test Suite are at the top of the screen, along with a graph of success or failure for the executions. The Recent executions tab has the list of executions. A green checkmark denotes a successful execution, a red 'x' denotes a failed execution and circling dots denotes a current run of a Test or Test Suite. The CLI Commands tab shows the commands used to perform the selected test: The Settings tab contains 3 types of information about the Test or Test Suite.","title":"Explore the UI"},{"location":"UI/#general-settings","text":"Clicking the General box under the Settings tab displays the Test name & description and Labels for the Test or Test Suite: It is also the place to delete a Test or Test Suite:","title":"General Settings"},{"location":"UI/#variables-secrets","text":"Visit Using Tests Variables for a description of adding Variables and Secrets.","title":"Variables &amp; Secrets"},{"location":"UI/#definition","text":"Clicking the Definition box under the Settings tab allows the validation and export the configuration for the Test or Test Suite:","title":"Definition"},{"location":"UI/#ui-results-endpoint","text":"To expose the results endpoint to open the UI there are a few options: Expose the results endpoint using an Ingress controller and use it in the UI at https://demo.testkube.io . Install the dashboard together with Testkube. If you are using minikube use http://localhost:8088/v1 as a TestKube API endpoint. This is achieved by installing Testkube using the Helm Charts located at github.com/kubeshop/helm-charts .","title":"UI Results Endpoint"},{"location":"UI/#prerequisites","text":"Add the repo to Helm: helm repo add kubeshop https://kubeshop.github.io/helm-charts && helm repo update An Ingress controller is needed to expose externally. By default Testkube is using ingress-nginx . Any other Ingress controller can be used but will require advanced configuration. A values file for guidance can be found here .","title":"Prerequisites"},{"location":"UI/#configure-ingress-for-results-endpoint","text":"helm install testkube kubeshop/testkube --set testkube-api.ingress.enabled = \"true\" By default, the results are using the path /results , so the results will be accessible at ingress_host/results/ The Ingress configuration used is available in the Testkube Helm Repo .","title":"Configure Ingress for Results Endpoint"},{"location":"UI/#installing-the-testkube-ui","text":"Ingress can be installed for the UI together with api-server Ingress by using a Helm chart: helm install testkube kubeshop/testkube --set testkube-dashboard.enabled = \"true\" --set testkube-dashboard.ingress.enabled = \"true\" --set testkube-api.ingress.enabled = \"true\" The Testkube UI talks to an api-server via the endpoint. Hence, the api-server will need to be exposed as well. To get the address of Ingress use: kubectl get ing","title":"Installing the Testkube UI"},{"location":"UI/#httpstls-configuration","text":"To have secure access to the UI and the results endpoint, a certificate should be provided. The Helm charts can be configured from the Ingress section of the values file: ingress : enabled : \"true\" annotations : kubernetes.io/ingress.class : nginx nginx.ingress.kubernetes.io/force-ssl-redirect : \"false\" nginx.ingress.kubernetes.io/ssl-redirect : \"false\" nginx.ingress.kubernetes.io/enable-cors : \"true\" nginx.ingress.kubernetes.io/cors-allow-methods : \"GET\" nginx.ingress.kubernetes.io/cors-allow-credentials : \"false\" # add an annotation indicating the issuer to use. cert-manager.io/cluster-issuer : letsencrypt-prod # controls whether the ingress is modified \u2018in-place\u2019, # or a new one is created specifically for the HTTP01 challenge. acme.cert-manager.io/http01-edit-in-place : \"true\" path : / hosts : - demo.testkube.io tlsenabled : \"true\" tls : # < placing a host in the TLS config will indicate a certificate should be created - hosts : - demo.testkube.io secretName : testkube-demo-cert-secret Certificates are automatically generated using encrypt and cert-manager, but can be configured for any particular case. A full values file example can be found here . If there is no need for TLS (Transport Layer Security) to be enabled, omit the TLS configuration. We highly discourage working in a non-safe environment which is exposed without the use of a TLS-based connection. Please do so in a private internal environment for testing or development purposes only. To pass specific values to the Ingress annotations, the Helm \"--set\" option can be used: helm install testkube kubeshop/testkube --set testkube-dashboard.enabled = \"true\" --set testkube-dashboard.ingress.enabled = \"true\" --set testkube-api.ingress.enabled = \"true\" --set testkube-api.ingress.annotations.kubernetes \\\\ .io/ingress \\\\ .class = \"anything_needed\" A better approach is to configure and call a values file with the Ingress custom values: helm install testkube kubeshop/testkube --values https://github.com/kubeshop/helm-charts/blob/39f73098630b333ba66db137e7fc016c39d92876/testkube/charts/testkube/values-demo.yaml","title":"HTTPS/TLS Configuration"},{"location":"architecture/","text":"Architecture (C4 Diagrams) Info This diagram was made with the C4 diagram technique ( https://c4model.com/ ). Diagrams System Context Containers Components API TestSuites and Tests Parameters passed through tests suites and tests priority: Test Suite execution variables overrides. Test Suite variables overrides. Test execution (variables passed for single test runs) overrides. Test variables.","title":"Architecture"},{"location":"architecture/#architecture-c4-diagrams","text":"","title":"Architecture (C4 Diagrams)"},{"location":"architecture/#info","text":"This diagram was made with the C4 diagram technique ( https://c4model.com/ ).","title":"Info"},{"location":"architecture/#diagrams","text":"","title":"Diagrams"},{"location":"architecture/#system-context","text":"","title":"System Context"},{"location":"architecture/#containers","text":"","title":"Containers"},{"location":"architecture/#components","text":"","title":"Components"},{"location":"architecture/#api","text":"","title":"API"},{"location":"architecture/#testsuites-and-tests","text":"Parameters passed through tests suites and tests priority: Test Suite execution variables overrides. Test Suite variables overrides. Test execution (variables passed for single test runs) overrides. Test variables.","title":"TestSuites and Tests"},{"location":"artifacts-storage/","text":"Artifacts Storage Testkube allows you to save supported files generated by your tests, which we call Artifacts . Currently, only the Cypress executor job produces test artifacts. The executor will scrape the files and store them in Minio . The executor will create a bucket named by execution ID and collect all files that are stored in the Cypress artifacts location Cypress/ . The available configuration parameters in Helm charts are: Parameter Is optional Default Default testkube-api.storage.endpoint yes testkube-minio-service-testkube:9000 URL of the S3 bucket testkube-api.storage.accessKeyId yes minio Access Key ID testkube-api.storage.accessKey yes minio123 Access Key testkube-api.storage.location yes Region testkube-api.storage.token yes S3 Token testkube-api.storage.SSL yes false Indicates whether SSL communication is to be enabled testkube-api.storage.scrapperEnabled yes true Indicates whether executors should scrape artifacts The API Server accepts the following environment variables: STORAGE_ENDPOINT STORAGE_ACCESSKEYID STORAGE_SECRETACCESSKEY STORAGE_LOCATION STORAGE_TOKEN STORAGE_SSL SCRAPPERENABLED Which can be set while installing with Helm: helm install --create-namespace my-testkube testkube/testkube --set STORAGE_ENDPOINT = custom_value Alternatively, these values can be read from Kubernetes secrets and set: - env : - name : STORAGE_ENDPOINT secret : secretName : test-secret","title":"Artifact Storage"},{"location":"artifacts-storage/#artifacts-storage","text":"Testkube allows you to save supported files generated by your tests, which we call Artifacts . Currently, only the Cypress executor job produces test artifacts. The executor will scrape the files and store them in Minio . The executor will create a bucket named by execution ID and collect all files that are stored in the Cypress artifacts location Cypress/ . The available configuration parameters in Helm charts are: Parameter Is optional Default Default testkube-api.storage.endpoint yes testkube-minio-service-testkube:9000 URL of the S3 bucket testkube-api.storage.accessKeyId yes minio Access Key ID testkube-api.storage.accessKey yes minio123 Access Key testkube-api.storage.location yes Region testkube-api.storage.token yes S3 Token testkube-api.storage.SSL yes false Indicates whether SSL communication is to be enabled testkube-api.storage.scrapperEnabled yes true Indicates whether executors should scrape artifacts The API Server accepts the following environment variables: STORAGE_ENDPOINT STORAGE_ACCESSKEYID STORAGE_SECRETACCESSKEY STORAGE_LOCATION STORAGE_TOKEN STORAGE_SSL SCRAPPERENABLED Which can be set while installing with Helm: helm install --create-namespace my-testkube testkube/testkube --set STORAGE_ENDPOINT = custom_value Alternatively, these values can be read from Kubernetes secrets and set: - env : - name : STORAGE_ENDPOINT secret : secretName : test-secret","title":"Artifacts Storage"},{"location":"contributing/","text":"Contributing to Projects If you are new to the open source community, use this guide to start contributing to projects: https://github.com/firstcontributions/first-contributions . Checkout the development document for more details about how to develop and run testkube on your machine. General Guidance for Contributing to a Testkube Project Anyone is welcome and ecouraged to help in Testkube development; much opportunity for enhancement exists. We would like to limit technical debt from the beginning, so we have defined simple rules when adding code into Testkube repo. For Go Programming Language (Golang) Based Components Always use gofmt. Follow Golang good practices ( proverbs ) in your code. Testing is your friend. We will target 80% CC in our code. Use clean names and don't break basic design patterns and rules. For Infrastructure/Kubernetes Based Components Put in comments for non-obvious decisions. Use current Helm/Kubernetes versions. Building Diagrams To build diagrams, install PlantUML: brew install plantuml # on mac sudo apt-get install -y plantuml # on ubuntu linux pacman -S plantuml # on arch linux Then run: make diagrams This generates png files from puml files. TIP: If using vscode, there is a nice extension for the live preview of PlantUML files.","title":"Contributing"},{"location":"contributing/#contributing-to-projects","text":"If you are new to the open source community, use this guide to start contributing to projects: https://github.com/firstcontributions/first-contributions . Checkout the development document for more details about how to develop and run testkube on your machine.","title":"Contributing to Projects"},{"location":"contributing/#general-guidance-for-contributing-to-a-testkube-project","text":"Anyone is welcome and ecouraged to help in Testkube development; much opportunity for enhancement exists. We would like to limit technical debt from the beginning, so we have defined simple rules when adding code into Testkube repo.","title":"General Guidance for Contributing to a Testkube Project"},{"location":"contributing/#for-go-programming-language-golang-based-components","text":"Always use gofmt. Follow Golang good practices ( proverbs ) in your code. Testing is your friend. We will target 80% CC in our code. Use clean names and don't break basic design patterns and rules.","title":"For Go Programming Language (Golang) Based Components"},{"location":"contributing/#for-infrastructurekubernetes-based-components","text":"Put in comments for non-obvious decisions. Use current Helm/Kubernetes versions.","title":"For Infrastructure/Kubernetes Based Components"},{"location":"contributing/#building-diagrams","text":"To build diagrams, install PlantUML: brew install plantuml # on mac sudo apt-get install -y plantuml # on ubuntu linux pacman -S plantuml # on arch linux Then run: make diagrams This generates png files from puml files. TIP: If using vscode, there is a nice extension for the live preview of PlantUML files.","title":"Building Diagrams"},{"location":"cypress-executors/","text":"Cypress Executors Cypress is a next generation front end testing tool built for the modern web. Please visit the Cypress documentation for more detailed information - https://docs.cypress.io/ . TestKube makes running Cypress tests simple. As Cypress is organised in projects, Testkube allows tests to be defined in a Github repository. To create a new Cypress test, you will need a Git repository with an example Cypress project - https://docs.cypress.io/guides/dashboard/projects . Creating a New Test Let's assume we've created a Cypress project in https://github.com/kubeshop/testkube-executor-cypress/tree/main/examples , which contains a really simple test that checks for the existence of a particular string on a web site. We'll also check if the Cypress env parameter exists to show how to pass additional parameters into the test. particular executor. https://github.com/kubeshop/testkube-executor-cypress/blob/main/examples/cypress/integration/simple-test.js describe ( 'The Home Page' , () => { it ( 'successfully loads' , () => { cy . visit ( 'https://testkube.io' ) expect ( Cypress . env ( 'testvariable' )). to . equal ( 'testvalue' ) cy . contains ( 'Efficient testing of k8s applications' ) }) }) Creating the Testkube Test Script Create the Testkube test script from this example. The parameters passed are repository , branch and the path where the project exists . In the case of a mono repository, the parameters are name and type . kubectl testkube create test --git-uri https://github.com/kubeshop/testkube-executor-cypress.git --git-branch main --git-path examples --name kubeshop-cypress --type cypress/project Check that script is created: kubectl get tests Output: NAME AGE kubeshop-cypress 51s Starting the Test Start the test: kubectl testkube run test kubeshop-cypress Output: Type : cypress/project Name : kubeshop-cypress Execution ID : 615d5265b046f8fbd3d955d0 Execution name: wildly-popular-worm Test queued for execution Use the following command to get test execution details: $ kubectl testkube get execution 615d5265b046f8fbd3d955d0 or watch test execution until complete: $ kubectl testkube watch execution 615d5265b046f8fbd3d955d0 Getting Execution Results Let's watch our test execution: kubectl testkube watch execution 615d43d3b046f8fbd3d955ca Output: Type : cypress/project Name : cypress-example Execution ID : 615d43d3b046f8fbd3d955ca Execution name: early-vast-turtle Watching for changes Status: error, Duration: 1m16s Getting results Name: early-vast-turtle, Status: error, Duration: 1m16s process error: exit status 1 output: ==================================================================================================== ( Run Starting ) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Cypress: 8 .3.0 \u2502 \u2502 Browser: Electron 91 ( headless ) \u2502 \u2502 Specs: 1 found ( simple-test.js ) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Running: simple-test.js ( 1 of 1 ) The Home Page 1 ) successfully loads 0 passing ( 2s ) 1 failing 1 ) The Home Page successfully loads: AssertionError: expected undefined to equal 'testvalue' at Context.eval ( http://localhost:34845/__cypress/tests?p = cypress/integration/simple-test.js:102:41 ) ( Results ) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Tests: 1 \u2502 \u2502 Passing: 0 \u2502 \u2502 Failing: 1 \u2502 \u2502 Pending: 0 \u2502 \u2502 Skipped: 0 \u2502 \u2502 Screenshots: 1 \u2502 \u2502 Video: true \u2502 \u2502 Duration: 2 seconds \u2502 \u2502 Spec Ran: simple-test.js \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 ( Screenshots ) - /tmp/testkube-scripts1127226423/repo/examples/cypress/screenshots/simple-test.js/ ( 1280x720 ) The Home Page -- successfully loads ( failed ) .png ( Video ) - Started processing: Compressing to 32 CRF Compression progress: 35 % - Finished processing: /tmp/testkube-scripts1127226423/repo/examples/cypress/videos ( 19 seconds ) /simple-test.js.mp4 ==================================================================================================== ( Run Finished ) Spec Tests Passing Failing Pending Skipped \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2716 simple-test.js 00 :02 1 - 1 - - \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2716 1 of 1 failed ( 100 % ) 00 :02 1 - 1 - - Test execution completed in 1m17s Adding Parameters The test failed because of AssertionError: expected undefined to equal 'testvalue' . The test variable was not passed into the test script. In this test, the parameter will have the name testvariable and its value will be testvalue . Add the -f flag to follow the execution and watch for changes. Currently, we're only looking for test completion, but in the future, we'll pipe test output in real time. kubectl testkube run test kubeshop-cypress -v testvariable = testvalue -f Output: Type : cypress/project Name : kubeshop-cypress Execution ID : 615d5372b046f8fbd3d955d2 Execution name: nominally-able-glider Test queued for execution Use the following command to get test execution details: $ kubectl testkube get execution 615d5372b046f8fbd3d955d2 or watch test execution until complete: $ kubectl testkube watch execution 615d5372b046f8fbd3d955d2 Watching for changes Status: queued, Duration: 0s Status: pending, Duration: 383 .064ms .... Status: pending, Duration: 1m45.405939s Status: success, Duration: 1m45.405939s Getting results Name: nominally-able-glider, Status: success, Duration: 2562047h47m16.854775807s ==================================================================================================== ( Run Starting ) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Cypress: 8 .5.0 \u2502 \u2502 Browser: Electron 91 ( headless ) \u2502 \u2502 Specs: 1 found ( simple-test.js ) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Running: simple-test.js ( 1 of 1 ) ( Results ) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Tests: 1 \u2502 \u2502 Passing: 1 \u2502 \u2502 Failing: 0 \u2502 \u2502 Pending: 0 \u2502 \u2502 Skipped: 0 \u2502 \u2502 Screenshots: 0 \u2502 \u2502 Video: true \u2502 \u2502 Duration: 19 seconds \u2502 \u2502 Spec Ran: simple-test.js \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 ( Video ) - Started processing: Compressing to 32 CRF Compression progress: 39 % Compression progress: 81 % - Finished processing: /tmp/testkube-scripts531364188/repo/examples/cypress/videos/ ( 30 seconds ) simple-test.js.mp4 Compression progress: 100 % ==================================================================================================== ( Run Finished ) Spec Tests Passing Failing Pending Skipped \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2714 simple-test.js 00 :19 1 1 - - - \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2714 All specs passed! 00 :19 1 1 - - - Use the following command to get test execution details: $ kubectl testkube get execution 615d5372b046f8fbd3d955d2 Test execution completed in 1m45.405939s Passing secret variables to tests You can pass secret variables to test run, just use -s flag for that kubectl testkube run test kubeshop-cypress -s secretvariable = S3cretv4lue -f Testkube will create Kubernetes Secret resource corresponding to that value based on executionId kubectl testkube run test vartest2 -cdirect -f -s sec1 = aaaa -s sec2 = cnjksnkjsdncjksd kubectl get secret -ntestkube 6284bc254ce130c4bd2fdc53-vars -oyaml apiVersion: v1 data: sec1: YWFhYQ == sec2: Y25qa3Nua2pzZG5jamtzZA == kind: Secret metadata: creationTimestamp: \"2022-05-19T06:25:41Z\" labels: executionID: 6285e2e54403fb203d7e3ac0 testName: vartest2 testkube: tests-secrets name: 6285e2e54403fb203d7e3ac0-vars namespace: testkube resourceVersion: \"64289430\" uid: ef22268b-e1a9-4046-a1d1-3fb8c37dfb9e type: Opaque Only reference to this secret will be stored in Testkube internal storage. Summary Our first test completed successfully! As we've seen above, it's really easy to run Cypress tests with Testkube!","title":"Cypress Executors"},{"location":"cypress-executors/#cypress-executors","text":"Cypress is a next generation front end testing tool built for the modern web. Please visit the Cypress documentation for more detailed information - https://docs.cypress.io/ . TestKube makes running Cypress tests simple. As Cypress is organised in projects, Testkube allows tests to be defined in a Github repository. To create a new Cypress test, you will need a Git repository with an example Cypress project - https://docs.cypress.io/guides/dashboard/projects .","title":"Cypress Executors"},{"location":"cypress-executors/#creating-a-new-test","text":"Let's assume we've created a Cypress project in https://github.com/kubeshop/testkube-executor-cypress/tree/main/examples , which contains a really simple test that checks for the existence of a particular string on a web site. We'll also check if the Cypress env parameter exists to show how to pass additional parameters into the test. particular executor. https://github.com/kubeshop/testkube-executor-cypress/blob/main/examples/cypress/integration/simple-test.js describe ( 'The Home Page' , () => { it ( 'successfully loads' , () => { cy . visit ( 'https://testkube.io' ) expect ( Cypress . env ( 'testvariable' )). to . equal ( 'testvalue' ) cy . contains ( 'Efficient testing of k8s applications' ) }) })","title":"Creating a New Test"},{"location":"cypress-executors/#creating-the-testkube-test-script","text":"Create the Testkube test script from this example. The parameters passed are repository , branch and the path where the project exists . In the case of a mono repository, the parameters are name and type . kubectl testkube create test --git-uri https://github.com/kubeshop/testkube-executor-cypress.git --git-branch main --git-path examples --name kubeshop-cypress --type cypress/project Check that script is created: kubectl get tests Output: NAME AGE kubeshop-cypress 51s","title":"Creating the Testkube Test Script"},{"location":"cypress-executors/#starting-the-test","text":"Start the test: kubectl testkube run test kubeshop-cypress Output: Type : cypress/project Name : kubeshop-cypress Execution ID : 615d5265b046f8fbd3d955d0 Execution name: wildly-popular-worm Test queued for execution Use the following command to get test execution details: $ kubectl testkube get execution 615d5265b046f8fbd3d955d0 or watch test execution until complete: $ kubectl testkube watch execution 615d5265b046f8fbd3d955d0","title":"Starting the Test"},{"location":"cypress-executors/#getting-execution-results","text":"Let's watch our test execution: kubectl testkube watch execution 615d43d3b046f8fbd3d955ca Output: Type : cypress/project Name : cypress-example Execution ID : 615d43d3b046f8fbd3d955ca Execution name: early-vast-turtle Watching for changes Status: error, Duration: 1m16s Getting results Name: early-vast-turtle, Status: error, Duration: 1m16s process error: exit status 1 output: ==================================================================================================== ( Run Starting ) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Cypress: 8 .3.0 \u2502 \u2502 Browser: Electron 91 ( headless ) \u2502 \u2502 Specs: 1 found ( simple-test.js ) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Running: simple-test.js ( 1 of 1 ) The Home Page 1 ) successfully loads 0 passing ( 2s ) 1 failing 1 ) The Home Page successfully loads: AssertionError: expected undefined to equal 'testvalue' at Context.eval ( http://localhost:34845/__cypress/tests?p = cypress/integration/simple-test.js:102:41 ) ( Results ) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Tests: 1 \u2502 \u2502 Passing: 0 \u2502 \u2502 Failing: 1 \u2502 \u2502 Pending: 0 \u2502 \u2502 Skipped: 0 \u2502 \u2502 Screenshots: 1 \u2502 \u2502 Video: true \u2502 \u2502 Duration: 2 seconds \u2502 \u2502 Spec Ran: simple-test.js \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 ( Screenshots ) - /tmp/testkube-scripts1127226423/repo/examples/cypress/screenshots/simple-test.js/ ( 1280x720 ) The Home Page -- successfully loads ( failed ) .png ( Video ) - Started processing: Compressing to 32 CRF Compression progress: 35 % - Finished processing: /tmp/testkube-scripts1127226423/repo/examples/cypress/videos ( 19 seconds ) /simple-test.js.mp4 ==================================================================================================== ( Run Finished ) Spec Tests Passing Failing Pending Skipped \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2716 simple-test.js 00 :02 1 - 1 - - \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2716 1 of 1 failed ( 100 % ) 00 :02 1 - 1 - - Test execution completed in 1m17s","title":"Getting Execution Results"},{"location":"cypress-executors/#adding-parameters","text":"The test failed because of AssertionError: expected undefined to equal 'testvalue' . The test variable was not passed into the test script. In this test, the parameter will have the name testvariable and its value will be testvalue . Add the -f flag to follow the execution and watch for changes. Currently, we're only looking for test completion, but in the future, we'll pipe test output in real time. kubectl testkube run test kubeshop-cypress -v testvariable = testvalue -f Output: Type : cypress/project Name : kubeshop-cypress Execution ID : 615d5372b046f8fbd3d955d2 Execution name: nominally-able-glider Test queued for execution Use the following command to get test execution details: $ kubectl testkube get execution 615d5372b046f8fbd3d955d2 or watch test execution until complete: $ kubectl testkube watch execution 615d5372b046f8fbd3d955d2 Watching for changes Status: queued, Duration: 0s Status: pending, Duration: 383 .064ms .... Status: pending, Duration: 1m45.405939s Status: success, Duration: 1m45.405939s Getting results Name: nominally-able-glider, Status: success, Duration: 2562047h47m16.854775807s ==================================================================================================== ( Run Starting ) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Cypress: 8 .5.0 \u2502 \u2502 Browser: Electron 91 ( headless ) \u2502 \u2502 Specs: 1 found ( simple-test.js ) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Running: simple-test.js ( 1 of 1 ) ( Results ) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Tests: 1 \u2502 \u2502 Passing: 1 \u2502 \u2502 Failing: 0 \u2502 \u2502 Pending: 0 \u2502 \u2502 Skipped: 0 \u2502 \u2502 Screenshots: 0 \u2502 \u2502 Video: true \u2502 \u2502 Duration: 19 seconds \u2502 \u2502 Spec Ran: simple-test.js \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 ( Video ) - Started processing: Compressing to 32 CRF Compression progress: 39 % Compression progress: 81 % - Finished processing: /tmp/testkube-scripts531364188/repo/examples/cypress/videos/ ( 30 seconds ) simple-test.js.mp4 Compression progress: 100 % ==================================================================================================== ( Run Finished ) Spec Tests Passing Failing Pending Skipped \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2714 simple-test.js 00 :19 1 1 - - - \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2714 All specs passed! 00 :19 1 1 - - - Use the following command to get test execution details: $ kubectl testkube get execution 615d5372b046f8fbd3d955d2 Test execution completed in 1m45.405939s","title":"Adding Parameters"},{"location":"cypress-executors/#passing-secret-variables-to-tests","text":"You can pass secret variables to test run, just use -s flag for that kubectl testkube run test kubeshop-cypress -s secretvariable = S3cretv4lue -f Testkube will create Kubernetes Secret resource corresponding to that value based on executionId kubectl testkube run test vartest2 -cdirect -f -s sec1 = aaaa -s sec2 = cnjksnkjsdncjksd kubectl get secret -ntestkube 6284bc254ce130c4bd2fdc53-vars -oyaml apiVersion: v1 data: sec1: YWFhYQ == sec2: Y25qa3Nua2pzZG5jamtzZA == kind: Secret metadata: creationTimestamp: \"2022-05-19T06:25:41Z\" labels: executionID: 6285e2e54403fb203d7e3ac0 testName: vartest2 testkube: tests-secrets name: 6285e2e54403fb203d7e3ac0-vars namespace: testkube resourceVersion: \"64289430\" uid: ef22268b-e1a9-4046-a1d1-3fb8c37dfb9e type: Opaque Only reference to this secret will be stored in Testkube internal storage.","title":"Passing secret variables to tests"},{"location":"cypress-executors/#summary","text":"Our first test completed successfully! As we've seen above, it's really easy to run Cypress tests with Testkube!","title":"Summary"},{"location":"dashboard/","text":"Testkube User Interface The Testkube User Interface provides a simple web-based UI for monitoring Testkube test results via a web browser. The URL to access the Testkube UI is https://dashboard.testkube.io , which will prompt for the results endpoint of your Testkube installation: See the UI Results Endpoint section below to find the endpoint to open the dashboard. Once you have the results endpoint, you can append it to the above URL (as an apiEndpoint parameter) for a direct link to the dashboard with your results: https://dashboard.testkube.io/?apiEndpoint=... Alternatively, the UI can be opened on your local machine using command sh kubectl testkube dashboard which uses port forwarding for accessing your local results endpoint (see more here ). UI Results Endpoint To expose the results endpoint to open the UI there are a few options: Expose the results endpoint using an Ingress controller and use it in the UI at https://dashboard.testkube.io . Install the dashboard together with Testkube. If you are using minikube use http://localhost:8088/v1 as a TestKube API endpoint. This is achieved by installing Testkube using the Helm Charts located at github.com/kubeshop/helm-charts . Prerequisites Add the repo to Helm: helm repo add kubeshop https://kubeshop.github.io/helm-charts && helm repo update An Ingress controller is needed to expose externally. By default Testkube is using ingress-nginx . Any other Ingress controller can be used but will require advanced configuration. A values file for guidance can be found here . Configure Ingress for Results Endpoint helm install testkube kubeshop/testkube --set testkube-api.ingress.enabled = \"true\" By default, the results are using the path /results , so the results will be accessible at ingress_host/results/ The Ingress configuration used is available in the Testkube Helm Repo . Installing the Testkube UI Ingress can be installed for the UI together with api-server Ingress with the usage of a Helm chart: helm install testkube kubeshop/testkube --set testkube-dashboard.enabled = \"true\" --set testkube-dashboard.ingress.enabled = \"true\" --set testkube-api.ingress.enabled = \"true\" Testkube dashboard talks to an api-server via the endpoint. Hence, the api-server will need to be exposed as well. To get the address of Ingress use: kubectl get ing HTTPS/TLS Configuration To have secure access to the dashboard and the results endpoint, a certificate should be provided. The Helm charts can be configured from the Ingress section of the values file: ingress : enabled : \"true\" annotations : kubernetes.io/ingress.class : nginx nginx.ingress.kubernetes.io/force-ssl-redirect : \"false\" nginx.ingress.kubernetes.io/ssl-redirect : \"false\" nginx.ingress.kubernetes.io/enable-cors : \"true\" nginx.ingress.kubernetes.io/cors-allow-methods : \"GET\" nginx.ingress.kubernetes.io/cors-allow-credentials : \"false\" # add an annotation indicating the issuer to use. cert-manager.io/cluster-issuer : letsencrypt-prod # controls whether the ingress is modified \u2018in-place\u2019, # or a new one is created specifically for the HTTP01 challenge. acme.cert-manager.io/http01-edit-in-place : \"true\" path : / hosts : - demo.testkube.io tlsenabled : \"true\" tls : # < placing a host in the TLS config will indicate a certificate should be created - hosts : - demo.testkube.io secretName : testkube-demo-cert-secret Certificates are automatically generated using encrypt and cert-manager, but can be configured for any particular case. A full values file example can be found here . If there is no need for TLS (Transport Layer Security) to be enabled, omit the TLS configuration. We highly discourage working in non-safe environment which is exposed without the use of a TLS-based connection. Please do so in a private internal environment for testing or development purposes only. To pass specific values to the Ingress annotations, the Helm \"--set\" option can be used: helm install testkube kubeshop/testkube --set testkube-dashboard.enabled = \"true\" --set testkube-dashboard.ingress.enabled = \"true\" --set testkube-api.ingress.enabled = \"true\" --set testkube-api.ingress.annotations.kubernetes \\\\ .io/ingress \\\\ .class = \"anything_needed\" A better approach is to configure and call a values file with the Ingress custom values: helm install testkube kubeshop/testkube --values https://github.com/kubeshop/helm-charts/blob/39f73098630b333ba66db137e7fc016c39d92876/testkube/charts/testkube/values-demo.yaml","title":"Testkube User Interface"},{"location":"dashboard/#testkube-user-interface","text":"The Testkube User Interface provides a simple web-based UI for monitoring Testkube test results via a web browser. The URL to access the Testkube UI is https://dashboard.testkube.io , which will prompt for the results endpoint of your Testkube installation: See the UI Results Endpoint section below to find the endpoint to open the dashboard. Once you have the results endpoint, you can append it to the above URL (as an apiEndpoint parameter) for a direct link to the dashboard with your results: https://dashboard.testkube.io/?apiEndpoint=... Alternatively, the UI can be opened on your local machine using command sh kubectl testkube dashboard which uses port forwarding for accessing your local results endpoint (see more here ).","title":"Testkube User Interface"},{"location":"dashboard/#ui-results-endpoint","text":"To expose the results endpoint to open the UI there are a few options: Expose the results endpoint using an Ingress controller and use it in the UI at https://dashboard.testkube.io . Install the dashboard together with Testkube. If you are using minikube use http://localhost:8088/v1 as a TestKube API endpoint. This is achieved by installing Testkube using the Helm Charts located at github.com/kubeshop/helm-charts .","title":"UI Results Endpoint"},{"location":"dashboard/#prerequisites","text":"Add the repo to Helm: helm repo add kubeshop https://kubeshop.github.io/helm-charts && helm repo update An Ingress controller is needed to expose externally. By default Testkube is using ingress-nginx . Any other Ingress controller can be used but will require advanced configuration. A values file for guidance can be found here .","title":"Prerequisites"},{"location":"dashboard/#configure-ingress-for-results-endpoint","text":"helm install testkube kubeshop/testkube --set testkube-api.ingress.enabled = \"true\" By default, the results are using the path /results , so the results will be accessible at ingress_host/results/ The Ingress configuration used is available in the Testkube Helm Repo .","title":"Configure Ingress for Results Endpoint"},{"location":"dashboard/#installing-the-testkube-ui","text":"Ingress can be installed for the UI together with api-server Ingress with the usage of a Helm chart: helm install testkube kubeshop/testkube --set testkube-dashboard.enabled = \"true\" --set testkube-dashboard.ingress.enabled = \"true\" --set testkube-api.ingress.enabled = \"true\" Testkube dashboard talks to an api-server via the endpoint. Hence, the api-server will need to be exposed as well. To get the address of Ingress use: kubectl get ing","title":"Installing the Testkube UI"},{"location":"dashboard/#httpstls-configuration","text":"To have secure access to the dashboard and the results endpoint, a certificate should be provided. The Helm charts can be configured from the Ingress section of the values file: ingress : enabled : \"true\" annotations : kubernetes.io/ingress.class : nginx nginx.ingress.kubernetes.io/force-ssl-redirect : \"false\" nginx.ingress.kubernetes.io/ssl-redirect : \"false\" nginx.ingress.kubernetes.io/enable-cors : \"true\" nginx.ingress.kubernetes.io/cors-allow-methods : \"GET\" nginx.ingress.kubernetes.io/cors-allow-credentials : \"false\" # add an annotation indicating the issuer to use. cert-manager.io/cluster-issuer : letsencrypt-prod # controls whether the ingress is modified \u2018in-place\u2019, # or a new one is created specifically for the HTTP01 challenge. acme.cert-manager.io/http01-edit-in-place : \"true\" path : / hosts : - demo.testkube.io tlsenabled : \"true\" tls : # < placing a host in the TLS config will indicate a certificate should be created - hosts : - demo.testkube.io secretName : testkube-demo-cert-secret Certificates are automatically generated using encrypt and cert-manager, but can be configured for any particular case. A full values file example can be found here . If there is no need for TLS (Transport Layer Security) to be enabled, omit the TLS configuration. We highly discourage working in non-safe environment which is exposed without the use of a TLS-based connection. Please do so in a private internal environment for testing or development purposes only. To pass specific values to the Ingress annotations, the Helm \"--set\" option can be used: helm install testkube kubeshop/testkube --set testkube-dashboard.enabled = \"true\" --set testkube-dashboard.ingress.enabled = \"true\" --set testkube-api.ingress.enabled = \"true\" --set testkube-api.ingress.annotations.kubernetes \\\\ .io/ingress \\\\ .class = \"anything_needed\" A better approach is to configure and call a values file with the Ingress custom values: helm install testkube kubeshop/testkube --values https://github.com/kubeshop/helm-charts/blob/39f73098630b333ba66db137e7fc016c39d92876/testkube/charts/testkube/values-demo.yaml","title":"HTTPS/TLS Configuration"},{"location":"development-crds/","text":"Testkube Custom Resources In Testkube, Tests, Test Suites, Executors and Webhooks are defined using Custom Resources . The current definitions can be found in the kubeshop/testkube-operator repository. You can always check the list of all CRDs using kubectl configured to point to your Kubernetes cluster with Testkube installed: $ kubectl get crds NAME CREATED AT certificaterequests.cert-manager.io 2022 -04-01T10:53:54Z certificates.cert-manager.io 2022 -04-01T10:53:54Z challenges.acme.cert-manager.io 2022 -04-01T10:53:54Z clusterissuers.cert-manager.io 2022 -04-01T10:53:54Z executors.executor.testkube.io 2022 -04-13T11:44:22Z issuers.cert-manager.io 2022 -04-01T10:53:54Z orders.acme.cert-manager.io 2022 -04-01T10:53:54Z scripts.tests.testkube.io 2022 -04-13T11:44:22Z tests.tests.testkube.io 2022 -04-13T11:44:22Z testsuites.tests.testkube.io 2022 -04-13T11:44:22Z webhooks.executor.testkube.io 2022 -04-13T11:44:22Z To check details on one of the CRDs, use describe : $ kubectl describe crd tests.tests.testkube.io Name: tests.tests.testkube.io Namespace: Labels: app.kubernetes.io/managed-by = Helm Annotations: controller-gen.kubebuilder.io/version: v0.4.1 meta.helm.sh/release-name: testkube meta.helm.sh/release-namespace: testkube API Version: apiextensions.k8s.io/v1 Kind: CustomResourceDefinition ... Below, you will find short descriptions and example declarations of the custom resources defined by Testkube. Tests Testkube Tests can be defined as a single executable unit of tests. Depending on the test type, this can mean one or multiple test files. To get all the test types available in your cluster, check the executors: $ kubectl testkube get executors -o yaml | grep -A1 types types: - postman/collection -- types: - curl/test -- types: - cypress/project -- types: - k6/script -- types: - postman/collection -- types: - soapui/xml When creating a Testkube Test, there are multiple supported input types: String Git directory Git file File URI Variables can be configured using the variables field as shown below. apiVersion: tests.testkube.io/v3 kind: Test metadata: name: example-test namespace: testkube spec: content: data: \"{...}\" type: string type: postman/collection executionRequest: variables: var1: name: var1 type: basic value: val1 sec1: name: sec1 type: secret valueFrom: secretKeyRef: key: sec1 name: vartest4-testvars Test Suites Testkube Test Suites are collections of Testkube Tests of the same or different types. apiVersion: tests.testkube.io/v2 kind: TestSuite metadata: name: example-testsuite namespace: testkube spec: description: Example Test Suite steps: - execute: name: example-test1 namespace: testkube - delay: duration: 1000 - execute: name: example-test2 namespace: testkube Executors Executors are Testkube-specific test runners. There are a list of predefined Executors coming with Testkube. You can also write your own custom Testkube Executor using this guide . Example: apiVersion: executor.testkube.io/v1 kind: Executor metadata: name: example-executor namespace: testkube spec: executor_type: job image: YOUR_USER/testkube-executor-example:1.0.0 types: - example/test content_types: - string - file-uri - git-file - git-dir features: - artifacts - junit-report Webhooks Testkube Webhooks are HTTP POST calls having the Testkube Execution object and its current state as payload. They are sent when a test is either started or finished. This can be defined under events . apiVersion: executor.testkube.io/v1 kind: Webhook metadata: name: example-webhook namespace: testkube spec: uri: http://localhost:8080/events events: - start-test - end-test","title":"Custom Resources"},{"location":"development-crds/#testkube-custom-resources","text":"In Testkube, Tests, Test Suites, Executors and Webhooks are defined using Custom Resources . The current definitions can be found in the kubeshop/testkube-operator repository. You can always check the list of all CRDs using kubectl configured to point to your Kubernetes cluster with Testkube installed: $ kubectl get crds NAME CREATED AT certificaterequests.cert-manager.io 2022 -04-01T10:53:54Z certificates.cert-manager.io 2022 -04-01T10:53:54Z challenges.acme.cert-manager.io 2022 -04-01T10:53:54Z clusterissuers.cert-manager.io 2022 -04-01T10:53:54Z executors.executor.testkube.io 2022 -04-13T11:44:22Z issuers.cert-manager.io 2022 -04-01T10:53:54Z orders.acme.cert-manager.io 2022 -04-01T10:53:54Z scripts.tests.testkube.io 2022 -04-13T11:44:22Z tests.tests.testkube.io 2022 -04-13T11:44:22Z testsuites.tests.testkube.io 2022 -04-13T11:44:22Z webhooks.executor.testkube.io 2022 -04-13T11:44:22Z To check details on one of the CRDs, use describe : $ kubectl describe crd tests.tests.testkube.io Name: tests.tests.testkube.io Namespace: Labels: app.kubernetes.io/managed-by = Helm Annotations: controller-gen.kubebuilder.io/version: v0.4.1 meta.helm.sh/release-name: testkube meta.helm.sh/release-namespace: testkube API Version: apiextensions.k8s.io/v1 Kind: CustomResourceDefinition ... Below, you will find short descriptions and example declarations of the custom resources defined by Testkube.","title":"Testkube Custom Resources"},{"location":"development-crds/#tests","text":"Testkube Tests can be defined as a single executable unit of tests. Depending on the test type, this can mean one or multiple test files. To get all the test types available in your cluster, check the executors: $ kubectl testkube get executors -o yaml | grep -A1 types types: - postman/collection -- types: - curl/test -- types: - cypress/project -- types: - k6/script -- types: - postman/collection -- types: - soapui/xml When creating a Testkube Test, there are multiple supported input types: String Git directory Git file File URI Variables can be configured using the variables field as shown below. apiVersion: tests.testkube.io/v3 kind: Test metadata: name: example-test namespace: testkube spec: content: data: \"{...}\" type: string type: postman/collection executionRequest: variables: var1: name: var1 type: basic value: val1 sec1: name: sec1 type: secret valueFrom: secretKeyRef: key: sec1 name: vartest4-testvars","title":"Tests"},{"location":"development-crds/#test-suites","text":"Testkube Test Suites are collections of Testkube Tests of the same or different types. apiVersion: tests.testkube.io/v2 kind: TestSuite metadata: name: example-testsuite namespace: testkube spec: description: Example Test Suite steps: - execute: name: example-test1 namespace: testkube - delay: duration: 1000 - execute: name: example-test2 namespace: testkube","title":"Test Suites"},{"location":"development-crds/#executors","text":"Executors are Testkube-specific test runners. There are a list of predefined Executors coming with Testkube. You can also write your own custom Testkube Executor using this guide . Example: apiVersion: executor.testkube.io/v1 kind: Executor metadata: name: example-executor namespace: testkube spec: executor_type: job image: YOUR_USER/testkube-executor-example:1.0.0 types: - example/test content_types: - string - file-uri - git-file - git-dir features: - artifacts - junit-report","title":"Executors"},{"location":"development-crds/#webhooks","text":"Testkube Webhooks are HTTP POST calls having the Testkube Execution object and its current state as payload. They are sent when a test is either started or finished. This can be defined under events . apiVersion: executor.testkube.io/v1 kind: Webhook metadata: name: example-webhook namespace: testkube spec: uri: http://localhost:8080/events events: - start-test - end-test","title":"Webhooks"},{"location":"development/","text":"Development Running with CRDs on Kubernetes Cluster The minimial component which must be deployed on your local Kubernetes cluster is testkube-operator with project CRDs ( https://github.com/kubeshop/testkube-operator ). To install CRDs into your local cluster, checkout the testkube-operator project and run: make install Running on a Local Machine The next critical components are the Testkube API ( https://github.com/kubeshop/testkube ) and an executor. You can use your own tests executor or an existing one from Testkube. Checkout the Testkube project and run a local API server: make run-mongo-dev run-api Next, run the Testkube Postman executor ( https://github.com/kubeshop/testkube-executor-postman ). The postman executor is MongoDB based so it will launch MongoDB with the API server step: make run-executor Making Calls to a Local API Server Instance If you want to debug an API server locally, you can run a local kube-proxy which makes all calls to kube proxy URIs directly to API server instances. make api-proxy And when calling any of kubectl testkube subcommands just pass direct client flag ( -cdirect ) Installing Local Executors Install development executors by running them from the Testkube project ( https://github.com/kubeshop/testkube ): make dev-install-local-executors This will register Custom Resources for the following test types: local-postman/collection local-cypress/project local-curl/test Create a Test Custom Resource with one of the types above to be executed on the given executor: kubectl testkube create test --file my_collection_file.json --name my-test-name --type local-postman/collection To summarize: type is the single relation between Test and Executor . Intercepting an API Server on a Cluster For debugging on Kubernetes, intercept the whole API Server (or Postman executor) service by using Telepresence . Simply intercept the API server with the local instance. To create/run tests pointed to in-cluster executors, start the API Server with telepresence mode: make run-api-telepresence","title":"Local Runs"},{"location":"development/#development","text":"","title":"Development"},{"location":"development/#running-with-crds-on-kubernetes-cluster","text":"The minimial component which must be deployed on your local Kubernetes cluster is testkube-operator with project CRDs ( https://github.com/kubeshop/testkube-operator ). To install CRDs into your local cluster, checkout the testkube-operator project and run: make install","title":"Running with CRDs on Kubernetes Cluster"},{"location":"development/#running-on-a-local-machine","text":"The next critical components are the Testkube API ( https://github.com/kubeshop/testkube ) and an executor. You can use your own tests executor or an existing one from Testkube. Checkout the Testkube project and run a local API server: make run-mongo-dev run-api Next, run the Testkube Postman executor ( https://github.com/kubeshop/testkube-executor-postman ). The postman executor is MongoDB based so it will launch MongoDB with the API server step: make run-executor","title":"Running on a Local Machine"},{"location":"development/#making-calls-to-a-local-api-server-instance","text":"If you want to debug an API server locally, you can run a local kube-proxy which makes all calls to kube proxy URIs directly to API server instances. make api-proxy And when calling any of kubectl testkube subcommands just pass direct client flag ( -cdirect )","title":"Making Calls to a Local API Server Instance"},{"location":"development/#installing-local-executors","text":"Install development executors by running them from the Testkube project ( https://github.com/kubeshop/testkube ): make dev-install-local-executors This will register Custom Resources for the following test types: local-postman/collection local-cypress/project local-curl/test Create a Test Custom Resource with one of the types above to be executed on the given executor: kubectl testkube create test --file my_collection_file.json --name my-test-name --type local-postman/collection To summarize: type is the single relation between Test and Executor .","title":"Installing Local Executors"},{"location":"development/#intercepting-an-api-server-on-a-cluster","text":"For debugging on Kubernetes, intercept the whole API Server (or Postman executor) service by using Telepresence . Simply intercept the API server with the local instance. To create/run tests pointed to in-cluster executors, start the API Server with telepresence mode: make run-api-telepresence","title":"Intercepting an API Server on a Cluster"},{"location":"executor-artillery/","text":"Artillery.io Performance Tests Test Environment Let's assume that our SUT (Service Under Test) is an internal Kubernetes service which has ClusterIP Service created and is exposed on port 8088 . The service name is testkube-api-server and is exposing the /health endpoint that we want to test. To call the SUT inside a cluster: curl http://testkube-api-server:8088/health Output: 200 OK Create a Test Manifest The Artillery tests are defined in declarative manner, as YAML files. The test should warm up our service a little bit first, then we can hit a little harder. Let's save our test into test.yaml file with the content below: config : target : \"http://testkube-api-server:8088\" phases : - duration : 6 arrivalRate : 5 name : Warm up - duration : 120 arrivalRate : 5 rampTo : 50 name : Ramp up load - duration : 60 arrivalRate : 50 name : Sustained load scenarios : - name : \"Check health endpoint\" flow : - get : url : \"/health\" Our test is ready but how do we run it in a Kubernetes cluster? Testkube will help you with that! Let's create a new Testkube test based on the saved Artillery test definition. Create a New Testkube Test kubectl testkube create test --name artillery-api-test --file test.yaml --type artillery/test Output: Test created \ud83e\udd47 Running a Test kubectl testkube run test artillery-api-test Type : postman/collection Name : artillery-api-test Execution ID : 615d6398b046f8fbd3d955d4 Execution name: openly-full-bream Test queued for execution Use the following command to get test execution details: $ kubectl testkube get execution 615d6398b046f8fbd3d955d4 or watch test execution until complete: $ kubectl testkube watch execution 615d6398b046f8fbd3d955d4 You can also watch your test results in real-time with -f flag (like \"follow\"). Test runs can be named. If no name is passed, Testkube will autogenerate a name. Getting Test Results Let's get back our finished test results. The test report and output will be stored in Testkube storage to revisit when necessary. \u279c testkube git: ( jacek/docs/executors-docs-update ) \u2717 kubectl testkube get execution 628c957d2c8d8a7c1b1ead66 ID: 628c957d2c8d8a7c1b1ead66 Name: tightly-adapting-hippo Type: artillery/test Duration: 00 :03:13 Telemetry is on. Learn more: https://artillery.io/docs/resources/core/telemetry.html Phase started: Warm up ( index: 0 , duration: 6s ) 08 :21:22 ( +0000 ) Phase completed: Warm up ( index: 0 , duration: 6s ) 08 :21:28 ( +0000 ) Phase started: Ramp up load ( index: 1 , duration: 120s ) 08 :21:28 ( +0000 ) -------------------------------------- Metrics for period to: 08 :21:30 ( +0000 ) ( width: 6 .167s ) -------------------------------------- http.codes.200: ................................................................ 41 http.request_rate: ............................................................. 9 /sec http.requests: ................................................................. 41 http.response_time: min: ......................................................................... 0 max: ......................................................................... 5 median: ...................................................................... 1 p95: ......................................................................... 3 p99: ......................................................................... 3 http.responses: ................................................................ 41 vusers.completed: .............................................................. 41 vusers.created: ................................................................ 41 vusers.created_by_name.Check health endpoint: .................................. 41 vusers.failed: ................................................................. 0 vusers.session_length: min: ......................................................................... 3 .6 max: ......................................................................... 73 median: ...................................................................... 10 .5 p95: ......................................................................... 66 p99: ......................................................................... 70 .1 ..... a lot of other ....... All VUs finished. Total time: 3 minutes, 9 seconds -------------------------------- Summary report @ 08 :24:30 ( +0000 ) -------------------------------- http.codes.200: ................................................................ 6469 http.request_rate: ............................................................. 36 /sec http.requests: ................................................................. 6469 http.response_time: min: ......................................................................... 0 max: ......................................................................... 17 median: ...................................................................... 1 p95: ......................................................................... 2 p99: ......................................................................... 4 http.responses: ................................................................ 6469 vusers.completed: .............................................................. 6469 vusers.created: ................................................................ 6469 vusers.created_by_name.Check health endpoint: .................................. 6469 vusers.failed: ................................................................. 0 vusers.session_length: min: ......................................................................... 1 .7 max: ......................................................................... 73 median: ...................................................................... 3 p95: ......................................................................... 7 .2 p99: ......................................................................... 12 .6 Log file: /tmp/test-report.json Status Test execution completed with success \ud83e\udd47 Summary With the Artillery executor you can now run your tests in Kubernetes with ease. Testkube simplifies running tests inside a cluster and stores tests and tests results for later use.","title":"Artillery.io"},{"location":"executor-artillery/#artilleryio-performance-tests","text":"","title":"Artillery.io Performance Tests"},{"location":"executor-artillery/#test-environment","text":"Let's assume that our SUT (Service Under Test) is an internal Kubernetes service which has ClusterIP Service created and is exposed on port 8088 . The service name is testkube-api-server and is exposing the /health endpoint that we want to test. To call the SUT inside a cluster: curl http://testkube-api-server:8088/health Output: 200 OK","title":"Test Environment"},{"location":"executor-artillery/#create-a-test-manifest","text":"The Artillery tests are defined in declarative manner, as YAML files. The test should warm up our service a little bit first, then we can hit a little harder. Let's save our test into test.yaml file with the content below: config : target : \"http://testkube-api-server:8088\" phases : - duration : 6 arrivalRate : 5 name : Warm up - duration : 120 arrivalRate : 5 rampTo : 50 name : Ramp up load - duration : 60 arrivalRate : 50 name : Sustained load scenarios : - name : \"Check health endpoint\" flow : - get : url : \"/health\" Our test is ready but how do we run it in a Kubernetes cluster? Testkube will help you with that! Let's create a new Testkube test based on the saved Artillery test definition.","title":"Create a Test Manifest"},{"location":"executor-artillery/#create-a-new-testkube-test","text":"kubectl testkube create test --name artillery-api-test --file test.yaml --type artillery/test Output: Test created \ud83e\udd47","title":"Create a New Testkube Test"},{"location":"executor-artillery/#running-a-test","text":"kubectl testkube run test artillery-api-test Type : postman/collection Name : artillery-api-test Execution ID : 615d6398b046f8fbd3d955d4 Execution name: openly-full-bream Test queued for execution Use the following command to get test execution details: $ kubectl testkube get execution 615d6398b046f8fbd3d955d4 or watch test execution until complete: $ kubectl testkube watch execution 615d6398b046f8fbd3d955d4 You can also watch your test results in real-time with -f flag (like \"follow\"). Test runs can be named. If no name is passed, Testkube will autogenerate a name.","title":"Running a Test"},{"location":"executor-artillery/#getting-test-results","text":"Let's get back our finished test results. The test report and output will be stored in Testkube storage to revisit when necessary. \u279c testkube git: ( jacek/docs/executors-docs-update ) \u2717 kubectl testkube get execution 628c957d2c8d8a7c1b1ead66 ID: 628c957d2c8d8a7c1b1ead66 Name: tightly-adapting-hippo Type: artillery/test Duration: 00 :03:13 Telemetry is on. Learn more: https://artillery.io/docs/resources/core/telemetry.html Phase started: Warm up ( index: 0 , duration: 6s ) 08 :21:22 ( +0000 ) Phase completed: Warm up ( index: 0 , duration: 6s ) 08 :21:28 ( +0000 ) Phase started: Ramp up load ( index: 1 , duration: 120s ) 08 :21:28 ( +0000 ) -------------------------------------- Metrics for period to: 08 :21:30 ( +0000 ) ( width: 6 .167s ) -------------------------------------- http.codes.200: ................................................................ 41 http.request_rate: ............................................................. 9 /sec http.requests: ................................................................. 41 http.response_time: min: ......................................................................... 0 max: ......................................................................... 5 median: ...................................................................... 1 p95: ......................................................................... 3 p99: ......................................................................... 3 http.responses: ................................................................ 41 vusers.completed: .............................................................. 41 vusers.created: ................................................................ 41 vusers.created_by_name.Check health endpoint: .................................. 41 vusers.failed: ................................................................. 0 vusers.session_length: min: ......................................................................... 3 .6 max: ......................................................................... 73 median: ...................................................................... 10 .5 p95: ......................................................................... 66 p99: ......................................................................... 70 .1 ..... a lot of other ....... All VUs finished. Total time: 3 minutes, 9 seconds -------------------------------- Summary report @ 08 :24:30 ( +0000 ) -------------------------------- http.codes.200: ................................................................ 6469 http.request_rate: ............................................................. 36 /sec http.requests: ................................................................. 6469 http.response_time: min: ......................................................................... 0 max: ......................................................................... 17 median: ...................................................................... 1 p95: ......................................................................... 2 p99: ......................................................................... 4 http.responses: ................................................................ 6469 vusers.completed: .............................................................. 6469 vusers.created: ................................................................ 6469 vusers.created_by_name.Check health endpoint: .................................. 6469 vusers.failed: ................................................................. 0 vusers.session_length: min: ......................................................................... 1 .7 max: ......................................................................... 73 median: ...................................................................... 3 p95: ......................................................................... 7 .2 p99: ......................................................................... 12 .6 Log file: /tmp/test-report.json Status Test execution completed with success \ud83e\udd47","title":"Getting Test Results"},{"location":"executor-artillery/#summary","text":"With the Artillery executor you can now run your tests in Kubernetes with ease. Testkube simplifies running tests inside a cluster and stores tests and tests results for later use.","title":"Summary"},{"location":"executor-curl/","text":"cURL Commands Testkube is able to run cURL commands as tests. There are 2 possibilities to validate the outputs of the cURL command: By using the status returned. By checking the body of the response. Below is an example of how to format the tests: { \"command\" : [ \"curl\" , \"https://reqbin.com/echo/get/json\" , \"-H\" , \"'Accept: application/json'\" ], \"expected_status\" : \"200\" , \"expected_body\" : \"{\\\"success\\\":\\\"true\\\"}\" } The test Custom Resource Definition (CRD) should be created with the type curl/test . Running Tests Using cURL Commands Creating and Running a cURL Test Save a test in a format as described above. In this example, it is curl-test.json . Create the test by running kubectl testkube create test --file curl-test.json --name curl-test --type \"curl/test\" . Check if the test was created using the command kubectl testkube get tests . The output will be similar to: NAME | TYPE +-----------------+--------------------+ curl-test | curl/test The test can be run using kubectl testkube run test curl-test which gives the output: Type : curl/test Name : curl-test Execution ID : 613a2d7056499e6e3d5b9c3e Execution name: sadly-optimal-ram Test queued for execution Use the following command to get test execution details: $ kubectl testkube get execution 613a2d7056499e6e3d5b9c3e Or watch the script execution until complete: $ kubectl testkube watch execution 613a2d7056499e6e3d5b9c3e As seen above, results can be checked using kubectl testkube get execution 613a2d7056499e6e3d5b9c3e , where the id of the execution is unique for each execution. Ensure that the correct id is used. The output will look something like: Name: painfully-super-colt,Status: success,Duration: 534ms HTTP/2 200 date: Thu, 09 Sep 2021 15 :51:15 GMT content-type: application/json content-length: 19 last-modified: Thu, 09 Sep 2021 13 :07:39 GMT cache-control: max-age = 31536000 cf-cache-status: HIT age: 6939 accept-ranges: bytes expect-ct: max-age = 604800 , report-uri = \"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\" report-to: { \"endpoints\" : [{ \"url\" : \"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=OZHPfvLjuVhpklzeGvhs8Ic0w%2FJ1%2BKgMcXeichnmMt9lKxF%2Fkco%2FHD2Z2vWfvInH9IPNuAQpjKu1Roqy8efIhVztIhvBP14Wx4wdBsQhzxUe9znZ%2Fmanwsky5G3Q\" }] , \"group\" : \"cf-nel\" , \"max_age\" :604800 } nel: { \"success_fraction\" :0, \"report_to\" : \"cf-nel\" , \"max_age\" :604800 } server: cloudflare cf-ray: 68c193af1f706571-LHR alt-svc: h3 = \":443\" ; ma = 86400 , h3-29 = \":443\" ; ma = 86400 , h3-28 = \":443\" ; ma = 86400 , h3-27 = \":443\" ; ma = 86400 { \"success\" : \"true\" } There is a generated name for the execution, the status, duration and the output of the cURL command.","title":"Curl"},{"location":"executor-curl/#curl-commands","text":"Testkube is able to run cURL commands as tests. There are 2 possibilities to validate the outputs of the cURL command: By using the status returned. By checking the body of the response. Below is an example of how to format the tests: { \"command\" : [ \"curl\" , \"https://reqbin.com/echo/get/json\" , \"-H\" , \"'Accept: application/json'\" ], \"expected_status\" : \"200\" , \"expected_body\" : \"{\\\"success\\\":\\\"true\\\"}\" } The test Custom Resource Definition (CRD) should be created with the type curl/test .","title":"cURL Commands"},{"location":"executor-curl/#running-tests-using-curl-commands","text":"","title":"Running Tests Using cURL Commands"},{"location":"executor-curl/#creating-and-running-a-curl-test","text":"Save a test in a format as described above. In this example, it is curl-test.json . Create the test by running kubectl testkube create test --file curl-test.json --name curl-test --type \"curl/test\" . Check if the test was created using the command kubectl testkube get tests . The output will be similar to: NAME | TYPE +-----------------+--------------------+ curl-test | curl/test The test can be run using kubectl testkube run test curl-test which gives the output: Type : curl/test Name : curl-test Execution ID : 613a2d7056499e6e3d5b9c3e Execution name: sadly-optimal-ram Test queued for execution Use the following command to get test execution details: $ kubectl testkube get execution 613a2d7056499e6e3d5b9c3e Or watch the script execution until complete: $ kubectl testkube watch execution 613a2d7056499e6e3d5b9c3e As seen above, results can be checked using kubectl testkube get execution 613a2d7056499e6e3d5b9c3e , where the id of the execution is unique for each execution. Ensure that the correct id is used. The output will look something like: Name: painfully-super-colt,Status: success,Duration: 534ms HTTP/2 200 date: Thu, 09 Sep 2021 15 :51:15 GMT content-type: application/json content-length: 19 last-modified: Thu, 09 Sep 2021 13 :07:39 GMT cache-control: max-age = 31536000 cf-cache-status: HIT age: 6939 accept-ranges: bytes expect-ct: max-age = 604800 , report-uri = \"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\" report-to: { \"endpoints\" : [{ \"url\" : \"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=OZHPfvLjuVhpklzeGvhs8Ic0w%2FJ1%2BKgMcXeichnmMt9lKxF%2Fkco%2FHD2Z2vWfvInH9IPNuAQpjKu1Roqy8efIhVztIhvBP14Wx4wdBsQhzxUe9znZ%2Fmanwsky5G3Q\" }] , \"group\" : \"cf-nel\" , \"max_age\" :604800 } nel: { \"success_fraction\" :0, \"report_to\" : \"cf-nel\" , \"max_age\" :604800 } server: cloudflare cf-ray: 68c193af1f706571-LHR alt-svc: h3 = \":443\" ; ma = 86400 , h3-29 = \":443\" ; ma = 86400 , h3-28 = \":443\" ; ma = 86400 , h3-27 = \":443\" ; ma = 86400 { \"success\" : \"true\" } There is a generated name for the execution, the status, duration and the output of the cURL command.","title":"Creating and Running a cURL Test"},{"location":"executor-custom/","text":"What is a Testkube Executor? To use a testing framework that is not on the currently supported framework list for Teskube, you can create your custom executor and configure it to run any type of tests that you need. These custom test types can be added to your Testkube installation and/or contributed to our repo. We are very happy to receive executor contributions from our community. An Executor is a wrapper around a testing framework in the form of a Docker container and run as a Kubernetes job. Usually, an executor runs a particular test framework binary inside a container. Additionally, it is registered as an Executor Custom Resource in your Kubernetes cluster with a type handler defined (e.g. postman/collection ). The Testkube API is responsible for running executions and will pass test data to the executor and parse the results from the execution output. To create a new script, a user needs to pass --type . The API uses it to pair the test type with the executor (executors have a handled types array defined in CRD), and the API will choose which executor to run based on the handled types. The API will pass a testube.Execution OpenAPI based document as the first argument to the binary in the executor's Docker container. The API assumes that the Executor will output JSON data to STDOUT and each line is wrapped in testkube.ExecutorOutput (as in structured logging). Contribute to the Testkube Project We love to improve Testkube with additional features suggested by our users! Please visit our Contribution page to see the guidelines for contributing to the Testkube project. Custom Executors Creating a Custom Executor A custom executor can be created on your own or by using our executor template (in go language). Using testkube-executor-template See the implementation example here: <https://github.com/exu/testkube-executor-example> ) . If you are familiar with the go programming language, use our template repository for new executors: Create a new repository from the template - testkube-executor-template . Clone the newly created repo. Rename the go module from testkube-executor-template to the new name and run go mod tidy . Testkube provides the components to help implement the new runner. A Runner is a wrapper around a testing framework binary responsible for running tests and parsing tests results. You are not limited to using Testkube's components for the go language. Use any language - just remember about managing input and output. Let's try to create a new test runner that tests if a given URI call is successful ( status code == 200 ). To create the new runner, we should implement the testkube.Runner interface first: type Runner interface { // Run takes Execution data and returns execution result Run ( execution testkube . Execution ) ( result testkube . ExecutionResult , err error ) } As we can see, Execution is the input - this object is managed by the Testkube API and will be passed to your executor. The executor will have information about the execution id and content that should be run on top of your runner. An example runner is defined in our template. Using this template will only require implementing the Run method (you can rename ExampleRunner to the name that best describes your testing framework). A runner can get data from different sources. Testkube currently supports: String content (e.g. Postman JSON file). URI - content stored on the webserver. Git File - the file stored in the Git repo in the given path. Git Dir - the entire git repo or git subdirectory (Testkube does a spatial checkout to limit traffic in the case of monorepos). All possible test definitions are already created and mounted as Kubernetes Volumes before an executor starts its work. You can get the directory path from the RUNNER_DATADIR environment variable. // TODO: change to a valid name type ExampleRunner struct { } func ( r * ExampleRunner ) Run ( execution testkube . Execution ) ( testkube . ExecutionResult , error ) { // execution.Content could have git repo data // We are also passing content files/directories as mounted volume in a directory. path := os . Getenv ( \"RUNNER_DATADIR\" ) // For example, the Cypress test is stored in the Git repo so Testkube will check it out automatically // and allow you to use it easily. uri := execution . Content . Data resp , err := http . Get ( uri ) if err != nil { return result , err } defer resp . Body . Close () b , err := io . ReadAll ( resp . Body ) if err != nil { return result , err } // If successful, return success result. if resp . StatusCode == 200 { return testkube . ExecutionResult { Status : testkube . ExecutionStatusSuccess , Output : string ( b ), }, nil } // Otherwise, return an error to simplify the example. err = fmt . Errorf ( \"invalid status code %d, (uri:%s)\" , resp . StatusCode , uri ) return result . Err ( err ), nil } A Runner returns ExecutionResult or error (in the case that the runner can't run the test). ExecutionResult could have different statuses (review the OpenAPI spec for details). In our example, we will focus on success and error . Additionally, to parse test framework test parts (e.g. different test steps), create a map of the particular testing framework and Testkube itself. Those details have been skipped here to simplify the example. If running any testing framework binary, it is a best practice to wrap its output. Here is an example of mapping in the Testkube Postman Executor , which is using a Postman to Testkube Mapper . Deploying a Custom Executor The following example will build and deploy your runner into a Kubernetes cluster: docker build -t YOUR_USER/testkube-executor-example:1.0.0 . docker push YOUR_USER/testkube-executor-example:1.0.0 When the Docker build completes, register the custom executor using the Testkube cli: kubectl testkube create executor --image YOUR_USER/testkube-executor-example:1.0.0 --types \"example/test\" --name example-executor An example Executor custom resource deployed by Testkube would look the following in yaml: apiVersion : executor.testkube.io/v1 kind : Executor metadata : name : example-executor namespace : testkube spec : executor_type : job # 'job' is currently the only type for custom executors image : YOUR_USER/testkube-executor-example:1.0.0 # pass your repository and tag types : - example/test # your custom type registered (used when creating and running your testkube tests) content_types : - string # test content as string - file-uri # http based file content - git-file # file stored in Git - git-dir # entire dir/project stored in Git features : - artifacts # executor can have artifacts after test run (e.g. videos, screenshots) - junit-report # executor can have junit xml based results Finally, create and run your custom tests by passing URI as the test content: # create echo \"http://google.pl\" | kubectl testkube create test --name example-google-test --type example/test # and run it in testkube kubectl testkube run test example-google-test This is a very basic example of a custom executor. Please visit our internal projects for more examples and the details on implementation: Postman runner implementation . Cypress runner implementation . Curl runner implementation . Creating a Custom Executor in a Programming Language other than Go You can find the fully commented code example here . For Go-based executors, we have prepared many handy functions, such as printing valid outputs or wrappers around calling external processes. Currently, in other languages, you'll need to manage this on your own. Testkube has simplified test content management. We are supporting several different test content types such as string, uri, git-file and git-dir. The entire complexity of checking out or downloading test content is covered by Testkube. Testkube will store its files and directories in a directory defined by the RUNNER_DATADIR env and will save the test-content file for: String content (e.g., a postman collection is passed as string content read from a JSON file). URI - Testkube will get the content of the file defined by the uri. Git related content - Testkube will checkout the repo content in the current directory. To be able to proceed with this guide, Testkube should be installed. Review the Testkube installation instructions . We have created a simple NodeJS executor. The executor will get the URI and try to call the HTTP GET method on the passed value, and will return: success - when the status code is 200. failed - for any other status code. \"use strict\" ; const https = require ( \"https\" ); const fs = require ( \"fs\" ); const path = require ( \"path\" ); const args = process . argv . slice ( 2 ); if ( args . length == 0 ) { error ( \"Please pass arguments\" ); process . exit ( 1 ); } var uri ; if ( ! process . env . RUNNER_DATADIR ) { error ( \"No valid data directory detected\" ); process . exit ( 1 ); } const testContentPath = path . join ( process . env . RUNNER_DATADIR , \"test-content\" ); uri = fs . readFileSync ( testContentPath , { encoding : \"utf8\" , flag : \"r\" }); https . get ( uri , ( res ) => { if ( res . statusCode == 200 ) { successResult ( \"Got valid status code: 200 OK\" ); } else { errorResult ( \"Got invalid status code\" ); } }) . on ( \"error\" , ( err ) => { error ( \"Error: \" + err . message ); }); function errorResult ( message ) { console . log ( JSON . stringify ({ \"type\" : \"result\" , \"result\" : { \"status\" : \"error\" , \"errorMessage\" : message , }})); } function successResult ( output ) { console . log ( JSON . stringify ({ \"type\" : \"result\" , \"result\" : { \"status\" : \"success\" , \"output\" : output , }})); } // 'error' will return the error info not related to the test itself (issues with the executor) function error ( message ) { console . log ( JSON . stringify ({ \"type\" : \"error\" , \"content\" : message , })); } The code is ready and working. With the defaults assumed, RUNNER_DATADIR will be /data and the file will be saved in the /data/test-content directory. As we can see, we are pushing JSON output to stdin with the console.log function that is based on our OpenAPI spec - ExecutorOutput . The two basic output types handled here are: For executor failures (non-test related), return error . For a test result, return result with the test status (success, error). When the executor code is ready, the next steps are to create: A Docker image (create image and push). A Kubernetes Executor Custom Resource Definition (CRD). The test itself. We will simplify and use the latest tag for the steps below but a best practice is to use versioning. Currently, Testkube runs the command directly and passes the execution information as an argument. Add the runner binary (we have plans to remove this step in a future release): #!/usr/bin/env sh node app.js \" $@ \" Add the runner binary into the Dockerfile: FROM node:17 # Create app directory WORKDIR /usr/src/app # Bundle app source COPY runner /bin/runner RUN chmod +x /bin/runner COPY app.js app.js EXPOSE 8080 CMD [ \"/bin/runner\" ] Build and push the docker container (change user/repo to your Docker Hub username): docker build --platform = linux/amd64 -t USER/testkube-executor-example-nodejs:latest -f Dockerfile . docker push USER/testkube-executor-example-nodejs:latest After the image is in place for Kubernetes to load, create the executor: kubectl testkube create executor --image kubeshop/testkube-executor-example-nodejs:latest --types \"example/test\" --name example-nodejs-executor When everything is in place, we can add our Testkube tests. echo \"https://httpstat.us/200\" | kubectl testkube create test --name example-test --type example/test As we can see, we need to pass the test name and test type example/test (which we defined in our executor CRD). Now it's finally time to run our test! kubectl tests run example-test -f Type : example/test Name : example-test-string Execution ID : 6218ccd2a26fa94ee7a7cfd1 Execution name: moderately-pleasant-labrador Getting pod logs Execution completed Got valid status code: 200 OK . Use the following command to get test execution details: $ kubectl testkube get execution 6218ccd2a26fa94ee7a7cfd1 Got valid status code: 200 OK Test execution completed with success in 6.163s \ud83e\udd47 Use the following command to get test execution details: $ kubectl testkube get execution 6218ccd2a26fa94ee7a7cfd1 Watch the test execution until complete: $ kubectl testkube watch execution 6218ccd2a26fa94ee7a7cfd1 Our test completed successfully! Create another test with a different status code and check to see the result. Resources OpenAPI spec details . Spec in YAML file . Go-based resources for input and output objects: Input: testkube.Execution Output line: testkube.ExecutorOutput","title":"Creating New Test Types"},{"location":"executor-custom/#what-is-a-testkube-executor","text":"To use a testing framework that is not on the currently supported framework list for Teskube, you can create your custom executor and configure it to run any type of tests that you need. These custom test types can be added to your Testkube installation and/or contributed to our repo. We are very happy to receive executor contributions from our community. An Executor is a wrapper around a testing framework in the form of a Docker container and run as a Kubernetes job. Usually, an executor runs a particular test framework binary inside a container. Additionally, it is registered as an Executor Custom Resource in your Kubernetes cluster with a type handler defined (e.g. postman/collection ). The Testkube API is responsible for running executions and will pass test data to the executor and parse the results from the execution output. To create a new script, a user needs to pass --type . The API uses it to pair the test type with the executor (executors have a handled types array defined in CRD), and the API will choose which executor to run based on the handled types. The API will pass a testube.Execution OpenAPI based document as the first argument to the binary in the executor's Docker container. The API assumes that the Executor will output JSON data to STDOUT and each line is wrapped in testkube.ExecutorOutput (as in structured logging).","title":"What is a Testkube Executor?"},{"location":"executor-custom/#contribute-to-the-testkube-project","text":"We love to improve Testkube with additional features suggested by our users! Please visit our Contribution page to see the guidelines for contributing to the Testkube project.","title":"Contribute to the Testkube Project"},{"location":"executor-custom/#custom-executors","text":"","title":"Custom Executors"},{"location":"executor-custom/#creating-a-custom-executor","text":"A custom executor can be created on your own or by using our executor template (in go language).","title":"Creating a Custom Executor"},{"location":"executor-custom/#using-testkube-executor-template","text":"See the implementation example here: <https://github.com/exu/testkube-executor-example> ) . If you are familiar with the go programming language, use our template repository for new executors: Create a new repository from the template - testkube-executor-template . Clone the newly created repo. Rename the go module from testkube-executor-template to the new name and run go mod tidy . Testkube provides the components to help implement the new runner. A Runner is a wrapper around a testing framework binary responsible for running tests and parsing tests results. You are not limited to using Testkube's components for the go language. Use any language - just remember about managing input and output. Let's try to create a new test runner that tests if a given URI call is successful ( status code == 200 ). To create the new runner, we should implement the testkube.Runner interface first: type Runner interface { // Run takes Execution data and returns execution result Run ( execution testkube . Execution ) ( result testkube . ExecutionResult , err error ) } As we can see, Execution is the input - this object is managed by the Testkube API and will be passed to your executor. The executor will have information about the execution id and content that should be run on top of your runner. An example runner is defined in our template. Using this template will only require implementing the Run method (you can rename ExampleRunner to the name that best describes your testing framework). A runner can get data from different sources. Testkube currently supports: String content (e.g. Postman JSON file). URI - content stored on the webserver. Git File - the file stored in the Git repo in the given path. Git Dir - the entire git repo or git subdirectory (Testkube does a spatial checkout to limit traffic in the case of monorepos). All possible test definitions are already created and mounted as Kubernetes Volumes before an executor starts its work. You can get the directory path from the RUNNER_DATADIR environment variable. // TODO: change to a valid name type ExampleRunner struct { } func ( r * ExampleRunner ) Run ( execution testkube . Execution ) ( testkube . ExecutionResult , error ) { // execution.Content could have git repo data // We are also passing content files/directories as mounted volume in a directory. path := os . Getenv ( \"RUNNER_DATADIR\" ) // For example, the Cypress test is stored in the Git repo so Testkube will check it out automatically // and allow you to use it easily. uri := execution . Content . Data resp , err := http . Get ( uri ) if err != nil { return result , err } defer resp . Body . Close () b , err := io . ReadAll ( resp . Body ) if err != nil { return result , err } // If successful, return success result. if resp . StatusCode == 200 { return testkube . ExecutionResult { Status : testkube . ExecutionStatusSuccess , Output : string ( b ), }, nil } // Otherwise, return an error to simplify the example. err = fmt . Errorf ( \"invalid status code %d, (uri:%s)\" , resp . StatusCode , uri ) return result . Err ( err ), nil } A Runner returns ExecutionResult or error (in the case that the runner can't run the test). ExecutionResult could have different statuses (review the OpenAPI spec for details). In our example, we will focus on success and error . Additionally, to parse test framework test parts (e.g. different test steps), create a map of the particular testing framework and Testkube itself. Those details have been skipped here to simplify the example. If running any testing framework binary, it is a best practice to wrap its output. Here is an example of mapping in the Testkube Postman Executor , which is using a Postman to Testkube Mapper .","title":"Using testkube-executor-template"},{"location":"executor-custom/#deploying-a-custom-executor","text":"The following example will build and deploy your runner into a Kubernetes cluster: docker build -t YOUR_USER/testkube-executor-example:1.0.0 . docker push YOUR_USER/testkube-executor-example:1.0.0 When the Docker build completes, register the custom executor using the Testkube cli: kubectl testkube create executor --image YOUR_USER/testkube-executor-example:1.0.0 --types \"example/test\" --name example-executor An example Executor custom resource deployed by Testkube would look the following in yaml: apiVersion : executor.testkube.io/v1 kind : Executor metadata : name : example-executor namespace : testkube spec : executor_type : job # 'job' is currently the only type for custom executors image : YOUR_USER/testkube-executor-example:1.0.0 # pass your repository and tag types : - example/test # your custom type registered (used when creating and running your testkube tests) content_types : - string # test content as string - file-uri # http based file content - git-file # file stored in Git - git-dir # entire dir/project stored in Git features : - artifacts # executor can have artifacts after test run (e.g. videos, screenshots) - junit-report # executor can have junit xml based results Finally, create and run your custom tests by passing URI as the test content: # create echo \"http://google.pl\" | kubectl testkube create test --name example-google-test --type example/test # and run it in testkube kubectl testkube run test example-google-test This is a very basic example of a custom executor. Please visit our internal projects for more examples and the details on implementation: Postman runner implementation . Cypress runner implementation . Curl runner implementation .","title":"Deploying a Custom Executor"},{"location":"executor-custom/#creating-a-custom-executor-in-a-programming-language-other-than-go","text":"You can find the fully commented code example here . For Go-based executors, we have prepared many handy functions, such as printing valid outputs or wrappers around calling external processes. Currently, in other languages, you'll need to manage this on your own. Testkube has simplified test content management. We are supporting several different test content types such as string, uri, git-file and git-dir. The entire complexity of checking out or downloading test content is covered by Testkube. Testkube will store its files and directories in a directory defined by the RUNNER_DATADIR env and will save the test-content file for: String content (e.g., a postman collection is passed as string content read from a JSON file). URI - Testkube will get the content of the file defined by the uri. Git related content - Testkube will checkout the repo content in the current directory. To be able to proceed with this guide, Testkube should be installed. Review the Testkube installation instructions . We have created a simple NodeJS executor. The executor will get the URI and try to call the HTTP GET method on the passed value, and will return: success - when the status code is 200. failed - for any other status code. \"use strict\" ; const https = require ( \"https\" ); const fs = require ( \"fs\" ); const path = require ( \"path\" ); const args = process . argv . slice ( 2 ); if ( args . length == 0 ) { error ( \"Please pass arguments\" ); process . exit ( 1 ); } var uri ; if ( ! process . env . RUNNER_DATADIR ) { error ( \"No valid data directory detected\" ); process . exit ( 1 ); } const testContentPath = path . join ( process . env . RUNNER_DATADIR , \"test-content\" ); uri = fs . readFileSync ( testContentPath , { encoding : \"utf8\" , flag : \"r\" }); https . get ( uri , ( res ) => { if ( res . statusCode == 200 ) { successResult ( \"Got valid status code: 200 OK\" ); } else { errorResult ( \"Got invalid status code\" ); } }) . on ( \"error\" , ( err ) => { error ( \"Error: \" + err . message ); }); function errorResult ( message ) { console . log ( JSON . stringify ({ \"type\" : \"result\" , \"result\" : { \"status\" : \"error\" , \"errorMessage\" : message , }})); } function successResult ( output ) { console . log ( JSON . stringify ({ \"type\" : \"result\" , \"result\" : { \"status\" : \"success\" , \"output\" : output , }})); } // 'error' will return the error info not related to the test itself (issues with the executor) function error ( message ) { console . log ( JSON . stringify ({ \"type\" : \"error\" , \"content\" : message , })); } The code is ready and working. With the defaults assumed, RUNNER_DATADIR will be /data and the file will be saved in the /data/test-content directory. As we can see, we are pushing JSON output to stdin with the console.log function that is based on our OpenAPI spec - ExecutorOutput . The two basic output types handled here are: For executor failures (non-test related), return error . For a test result, return result with the test status (success, error). When the executor code is ready, the next steps are to create: A Docker image (create image and push). A Kubernetes Executor Custom Resource Definition (CRD). The test itself. We will simplify and use the latest tag for the steps below but a best practice is to use versioning. Currently, Testkube runs the command directly and passes the execution information as an argument. Add the runner binary (we have plans to remove this step in a future release): #!/usr/bin/env sh node app.js \" $@ \" Add the runner binary into the Dockerfile: FROM node:17 # Create app directory WORKDIR /usr/src/app # Bundle app source COPY runner /bin/runner RUN chmod +x /bin/runner COPY app.js app.js EXPOSE 8080 CMD [ \"/bin/runner\" ] Build and push the docker container (change user/repo to your Docker Hub username): docker build --platform = linux/amd64 -t USER/testkube-executor-example-nodejs:latest -f Dockerfile . docker push USER/testkube-executor-example-nodejs:latest After the image is in place for Kubernetes to load, create the executor: kubectl testkube create executor --image kubeshop/testkube-executor-example-nodejs:latest --types \"example/test\" --name example-nodejs-executor When everything is in place, we can add our Testkube tests. echo \"https://httpstat.us/200\" | kubectl testkube create test --name example-test --type example/test As we can see, we need to pass the test name and test type example/test (which we defined in our executor CRD). Now it's finally time to run our test! kubectl tests run example-test -f Type : example/test Name : example-test-string Execution ID : 6218ccd2a26fa94ee7a7cfd1 Execution name: moderately-pleasant-labrador Getting pod logs Execution completed Got valid status code: 200 OK . Use the following command to get test execution details: $ kubectl testkube get execution 6218ccd2a26fa94ee7a7cfd1 Got valid status code: 200 OK Test execution completed with success in 6.163s \ud83e\udd47 Use the following command to get test execution details: $ kubectl testkube get execution 6218ccd2a26fa94ee7a7cfd1 Watch the test execution until complete: $ kubectl testkube watch execution 6218ccd2a26fa94ee7a7cfd1 Our test completed successfully! Create another test with a different status code and check to see the result.","title":"Creating a Custom Executor in a Programming Language other than Go"},{"location":"executor-custom/#resources","text":"OpenAPI spec details . Spec in YAML file . Go-based resources for input and output objects: Input: testkube.Execution Output line: testkube.ExecutorOutput","title":"Resources"},{"location":"executor-cypress/","text":"Cypress Tests Check out our blog post to follow tutorial steps for end-to-end testing of your Kubernetes applications with Cypress. Testkube makes running Cypress tests simple. As Cypress is organised in projects, Testkube allows tests to be defined in a Github repository. To create a new Cypress test, you will need a Git repository with an example Cypress project. Please follow the Cypress documentation for details - https://docs.cypress.io/guides/dashboard/projects . Creating a New Test Let's assume we've created a Cypress project in https://github.com/kubeshop/testkube-executor-cypress/tree/main/examples , which contains a really simple test that checks for the existence of a particular string on a web site. We'll also check if the env parameter exists to show how to pass additional parameters into the test. https://github.com/kubeshop/testkube-executor-cypress/blob/main/examples/cypress/integration/simple-test.js describe ( 'The Home Page' , () => { it ( 'successfully loads' , () => { cy . visit ( 'https://testkube.io' ) expect ( Cypress . env ( 'testparam' )). to . equal ( 'testvalue' ) cy . contains ( 'Efficient testing of k8s applications' ) }) }) Creating the Testkube Test Script Create the Testkube test script from this example. The parameters passed are repository , branch and the path where the project exists . In the case of a mono repository, the parameters are name and type . kubectl testkube create test --git-uri https://github.com/kubeshop/testkube-executor-cypress.git --git-branch main --git-path examples --name kubeshop-cypress --type cypress/project | If your test files are located in root path of the repository, you can omit the --git-path flag. Check that script is created: kubectl get tests Output: NAME AGE kubeshop-cypress 51s Starting the Test Start the test: kubectl testkube run test kubeshop-cypress Output: Type : cypress/project Name : kubeshop-cypress Execution ID : 615d5265b046f8fbd3d955d0 Execution name: wildly-popular-worm Test queued for execution Use the following command to get test execution details: $ kubectl testkube get execution 615d5265b046f8fbd3d955d0 or watch test execution until complete: $ kubectl testkube watch execution 615d5265b046f8fbd3d955d0 Getting Execution Results Let's watch our test execution: kubectl testkube watch execution 615d43d3b046f8fbd3d955ca Output: Type : cypress/project Name : cypress-example Execution ID : 615d43d3b046f8fbd3d955ca Execution name: early-vast-turtle Watching for changes Status: error, Duration: 1m16s Getting results Name: early-vast-turtle, Status: error, Duration: 1m16s process error: exit status 1 output: ==================================================================================================== ( Run Starting ) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Cypress: 8 .3.0 \u2502 \u2502 Browser: Electron 91 ( headless ) \u2502 \u2502 Specs: 1 found ( simple-test.js ) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Running: simple-test.js ( 1 of 1 ) The Home Page 1 ) successfully loads 0 passing ( 2s ) 1 failing 1 ) The Home Page successfully loads: AssertionError: expected undefined to equal 'testvalue' at Context.eval ( http://localhost:34845/__cypress/tests?p = cypress/integration/simple-test.js:102:41 ) ( Results ) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Tests: 1 \u2502 \u2502 Passing: 0 \u2502 \u2502 Failing: 1 \u2502 \u2502 Pending: 0 \u2502 \u2502 Skipped: 0 \u2502 \u2502 Screenshots: 1 \u2502 \u2502 Video: true \u2502 \u2502 Duration: 2 seconds \u2502 \u2502 Spec Ran: simple-test.js \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 ( Screenshots ) - /tmp/testkube-scripts1127226423/repo/examples/cypress/screenshots/simple-test.js/ ( 1280x720 ) The Home Page -- successfully loads ( failed ) .png ( Video ) - Started processing: Compressing to 32 CRF Compression progress: 35 % - Finished processing: /tmp/testkube-scripts1127226423/repo/examples/cypress/videos ( 19 seconds ) /simple-test.js.mp4 ==================================================================================================== ( Run Finished ) Spec Tests Passing Failing Pending Skipped \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2716 simple-test.js 00 :02 1 - 1 - - \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2716 1 of 1 failed ( 100 % ) 00 :02 1 - 1 - - Test execution completed in 1m17s Adding Parameters The test failed because of AssertionError: expected undefined to equal 'testvalue' . The test parameter was not passed into the test script. In this test, the parameter will have the name testparam and its value will be testvalue . Add the -f flag to follow the execution and watch for changes. Currently, we're only looking for test completion, but, in the future, we'll pipe test output in real time. kubectl testkube run test kubeshop-cypress -v testparam = testvalue -f Tip: If you want to pass secret variables pass -s somesecretvar=secretvalue (or --secret-variable ) Testkube will convert value of this variable into Kubernetes Secret rescource. Output: Type : cypress/project Name : kubeshop-cypress Execution ID : 615d5372b046f8fbd3d955d2 Execution name: nominally-able-glider Test queued for execution Use the following command to get test execution details: $ kubectl testkube get execution 615d5372b046f8fbd3d955d2 or watch test execution until complete: $ kubectl testkube watch execution 615d5372b046f8fbd3d955d2 Watching for changes Status: queued, Duration: 0s Status: pending, Duration: 383 .064ms .... Status: pending, Duration: 1m45.405939s Status: success, Duration: 1m45.405939s Getting results Name: nominally-able-glider, Status: success, Duration: 2562047h47m16.854775807s ==================================================================================================== ( Run Starting ) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Cypress: 8 .5.0 \u2502 \u2502 Browser: Electron 91 ( headless ) \u2502 \u2502 Specs: 1 found ( simple-test.js ) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Running: simple-test.js ( 1 of 1 ) ( Results ) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Tests: 1 \u2502 \u2502 Passing: 1 \u2502 \u2502 Failing: 0 \u2502 \u2502 Pending: 0 \u2502 \u2502 Skipped: 0 \u2502 \u2502 Screenshots: 0 \u2502 \u2502 Video: true \u2502 \u2502 Duration: 19 seconds \u2502 \u2502 Spec Ran: simple-test.js \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 ( Video ) - Started processing: Compressing to 32 CRF Compression progress: 39 % Compression progress: 81 % - Finished processing: /tmp/testkube-scripts531364188/repo/examples/cypress/videos/ ( 30 seconds ) simple-test.js.mp4 Compression progress: 100 % ==================================================================================================== ( Run Finished ) Spec Tests Passing Failing Pending Skipped \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2714 simple-test.js 00 :19 1 1 - - - \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2714 All specs passed! 00 :19 1 1 - - - Use the following command to get test execution details: $ kubectl testkube get execution 615d5372b046f8fbd3d955d2 Test execution completed in 1m45.405939s Summary Our first test completed successfully! As we've seen above, it's really easy to run Cypress tests with Testkube!","title":"Cypress"},{"location":"executor-cypress/#cypress-tests","text":"Check out our blog post to follow tutorial steps for end-to-end testing of your Kubernetes applications with Cypress. Testkube makes running Cypress tests simple. As Cypress is organised in projects, Testkube allows tests to be defined in a Github repository. To create a new Cypress test, you will need a Git repository with an example Cypress project. Please follow the Cypress documentation for details - https://docs.cypress.io/guides/dashboard/projects .","title":"Cypress Tests"},{"location":"executor-cypress/#creating-a-new-test","text":"Let's assume we've created a Cypress project in https://github.com/kubeshop/testkube-executor-cypress/tree/main/examples , which contains a really simple test that checks for the existence of a particular string on a web site. We'll also check if the env parameter exists to show how to pass additional parameters into the test. https://github.com/kubeshop/testkube-executor-cypress/blob/main/examples/cypress/integration/simple-test.js describe ( 'The Home Page' , () => { it ( 'successfully loads' , () => { cy . visit ( 'https://testkube.io' ) expect ( Cypress . env ( 'testparam' )). to . equal ( 'testvalue' ) cy . contains ( 'Efficient testing of k8s applications' ) }) })","title":"Creating a New Test"},{"location":"executor-cypress/#creating-the-testkube-test-script","text":"Create the Testkube test script from this example. The parameters passed are repository , branch and the path where the project exists . In the case of a mono repository, the parameters are name and type . kubectl testkube create test --git-uri https://github.com/kubeshop/testkube-executor-cypress.git --git-branch main --git-path examples --name kubeshop-cypress --type cypress/project | If your test files are located in root path of the repository, you can omit the --git-path flag. Check that script is created: kubectl get tests Output: NAME AGE kubeshop-cypress 51s","title":"Creating the Testkube Test Script"},{"location":"executor-cypress/#starting-the-test","text":"Start the test: kubectl testkube run test kubeshop-cypress Output: Type : cypress/project Name : kubeshop-cypress Execution ID : 615d5265b046f8fbd3d955d0 Execution name: wildly-popular-worm Test queued for execution Use the following command to get test execution details: $ kubectl testkube get execution 615d5265b046f8fbd3d955d0 or watch test execution until complete: $ kubectl testkube watch execution 615d5265b046f8fbd3d955d0","title":"Starting the Test"},{"location":"executor-cypress/#getting-execution-results","text":"Let's watch our test execution: kubectl testkube watch execution 615d43d3b046f8fbd3d955ca Output: Type : cypress/project Name : cypress-example Execution ID : 615d43d3b046f8fbd3d955ca Execution name: early-vast-turtle Watching for changes Status: error, Duration: 1m16s Getting results Name: early-vast-turtle, Status: error, Duration: 1m16s process error: exit status 1 output: ==================================================================================================== ( Run Starting ) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Cypress: 8 .3.0 \u2502 \u2502 Browser: Electron 91 ( headless ) \u2502 \u2502 Specs: 1 found ( simple-test.js ) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Running: simple-test.js ( 1 of 1 ) The Home Page 1 ) successfully loads 0 passing ( 2s ) 1 failing 1 ) The Home Page successfully loads: AssertionError: expected undefined to equal 'testvalue' at Context.eval ( http://localhost:34845/__cypress/tests?p = cypress/integration/simple-test.js:102:41 ) ( Results ) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Tests: 1 \u2502 \u2502 Passing: 0 \u2502 \u2502 Failing: 1 \u2502 \u2502 Pending: 0 \u2502 \u2502 Skipped: 0 \u2502 \u2502 Screenshots: 1 \u2502 \u2502 Video: true \u2502 \u2502 Duration: 2 seconds \u2502 \u2502 Spec Ran: simple-test.js \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 ( Screenshots ) - /tmp/testkube-scripts1127226423/repo/examples/cypress/screenshots/simple-test.js/ ( 1280x720 ) The Home Page -- successfully loads ( failed ) .png ( Video ) - Started processing: Compressing to 32 CRF Compression progress: 35 % - Finished processing: /tmp/testkube-scripts1127226423/repo/examples/cypress/videos ( 19 seconds ) /simple-test.js.mp4 ==================================================================================================== ( Run Finished ) Spec Tests Passing Failing Pending Skipped \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2716 simple-test.js 00 :02 1 - 1 - - \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2716 1 of 1 failed ( 100 % ) 00 :02 1 - 1 - - Test execution completed in 1m17s","title":"Getting Execution Results"},{"location":"executor-cypress/#adding-parameters","text":"The test failed because of AssertionError: expected undefined to equal 'testvalue' . The test parameter was not passed into the test script. In this test, the parameter will have the name testparam and its value will be testvalue . Add the -f flag to follow the execution and watch for changes. Currently, we're only looking for test completion, but, in the future, we'll pipe test output in real time. kubectl testkube run test kubeshop-cypress -v testparam = testvalue -f Tip: If you want to pass secret variables pass -s somesecretvar=secretvalue (or --secret-variable ) Testkube will convert value of this variable into Kubernetes Secret rescource. Output: Type : cypress/project Name : kubeshop-cypress Execution ID : 615d5372b046f8fbd3d955d2 Execution name: nominally-able-glider Test queued for execution Use the following command to get test execution details: $ kubectl testkube get execution 615d5372b046f8fbd3d955d2 or watch test execution until complete: $ kubectl testkube watch execution 615d5372b046f8fbd3d955d2 Watching for changes Status: queued, Duration: 0s Status: pending, Duration: 383 .064ms .... Status: pending, Duration: 1m45.405939s Status: success, Duration: 1m45.405939s Getting results Name: nominally-able-glider, Status: success, Duration: 2562047h47m16.854775807s ==================================================================================================== ( Run Starting ) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Cypress: 8 .5.0 \u2502 \u2502 Browser: Electron 91 ( headless ) \u2502 \u2502 Specs: 1 found ( simple-test.js ) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Running: simple-test.js ( 1 of 1 ) ( Results ) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Tests: 1 \u2502 \u2502 Passing: 1 \u2502 \u2502 Failing: 0 \u2502 \u2502 Pending: 0 \u2502 \u2502 Skipped: 0 \u2502 \u2502 Screenshots: 0 \u2502 \u2502 Video: true \u2502 \u2502 Duration: 19 seconds \u2502 \u2502 Spec Ran: simple-test.js \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 ( Video ) - Started processing: Compressing to 32 CRF Compression progress: 39 % Compression progress: 81 % - Finished processing: /tmp/testkube-scripts531364188/repo/examples/cypress/videos/ ( 30 seconds ) simple-test.js.mp4 Compression progress: 100 % ==================================================================================================== ( Run Finished ) Spec Tests Passing Failing Pending Skipped \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2714 simple-test.js 00 :19 1 1 - - - \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2714 All specs passed! 00 :19 1 1 - - - Use the following command to get test execution details: $ kubectl testkube get execution 615d5372b046f8fbd3d955d2 Test execution completed in 1m45.405939s","title":"Adding Parameters"},{"location":"executor-cypress/#summary","text":"Our first test completed successfully! As we've seen above, it's really easy to run Cypress tests with Testkube!","title":"Summary"},{"location":"executor-ginkgo/","text":"Ginkgo-based Tests Testkube allows us to run Ginkgo-based tests. (https://onsi.github.io/ginkgo/) | Ginkgo is a mature testing framework for Go designed to help you write expressive specs. Ginkgo builds on top of Go's testing foundation and is complemented by the Gomega matcher library. Together, Ginkgo and Gomega let you express the intent behind your specs clearly. Test Environment Let's try some simple Ginkgo. Testkube's Ginkgo Executor is using the ginkgo binary and allows configuring it's behavior using arguments. Because Ginkgo projects are quite complicated in terms of directory structure, we'll need to load them from a Git directory. You can find example projects in the repository here: https://github.com/kubeshop/testkube-executor-ginkgo/tree/main/examples. Let's create a simple test which will check if an env variable is set to true: The default Ginkgo executor: apiVersion : executor.testkube.io/v1 kind : Executor metadata : name : ginkgo-executor namespace : testkube spec : features : - artifacts - junit-report image : kubeshop/testkube-ginkgo-executor:0.0.4 types : - ginkgo/test Create a New Ginkgo-based Test Write a Ginkgo test We'll try to check if there are any executors registered on the Testkube demo cluster. To do that we need to check the /v1/executors endpoint. Results should have at least one Executor registered. package testkube_api_test import ( \"encoding/json\" \"io\" \"net/http\" \"github.com/kubeshop/testkube/pkg/api/v1/testkube\" . \"github.com/onsi/ginkgo/v2\" . \"github.com/onsi/gomega\" ) var _ = Describe ( \"API Test\" , func () { It ( \"There should be executors registered\" , func () { resp , err := http . Get ( \"https://demo.testkube.io/results/v1/executors\" ) Expect ( err ). To ( BeNil ()) executors , err := GetTestkubeExecutors ( resp . Body ) Expect ( err ). To ( BeNil ()) Expect ( len ( executors )). To ( BeNumerically ( \">\" , 1 )) }) }) func GetTestkubeExecutors ( body io . ReadCloser ) ([] testkube . ExecutorDetails , error ) { bytes , err := io . ReadAll ( body ) if err != nil { return nil , err } results := [] testkube . ExecutorDetails {} err = json . Unmarshal ( bytes , & results ) return results , err } The test is run in the standard Ginkgo bootstrapped project. go mod init testkube-ginkgo-example ginkgo bootstrap Everything was pushed to the Git repository. You can also look at the code in our examples: [https://github.com/kubeshop/testkube-executor-ginkgo/tree/main/examples/testkube-api] Add Test to Testkube To add a Ginkgo test to Testkube you need to call the create test command. We'll assume that our test is in a Git repository. kubectl testkube create test --git-uri https://github.com/kubeshop/testkube-executor-ginkgo.git --git-path examples/testkube-api --type ginkgo/test --name ginkgo-example-test --git-branch main Running a Test Let's pass the env variable to our test run: tk run test ginkgo-example-test -f Type: ginkgo/test Name: ginkgo-example-test Execution ID: 62eceb8df4732077cee099cf Execution name: ginkgo-example-test-3 Execution number: 3 Status: running Start time: 2022 -08-05 10 :06:05.467437617 +0000 UTC ... other logs Running in parallel across 7 processes \u2022 Ran 1 of 1 Specs in 0 .091 seconds SUCCESS! -- 1 Passed | 0 Failed | 0 Pending | 0 Skipped Ginkgo ran 1 suite in 7 .447676906s Test Suite Passed Test execution completed with success in 15 .586s \ud83e\udd47 Watch test execution until complete: $ kubectl testkube watch execution 62eceb8df4732077cee099cf Use the following command to get test execution details: $ kubectl testkube get execution 62eceb8df4732077cee099cf Getting Test Results We can always get back to the test results: kubectl testkube get execution 62eceb8df4732077cee099cf Output: # ....... a lot of Ginkgo logs ID: 62eceb67f4732077cee099cd Name ginkgo-example-test-2 Number: 2 Test name: ginkgo-example-test Type: ginkgo/test Status: passed Start time: 2022 -08-05 10 :05:27.659 +0000 UTC End time: 2022 -08-05 10 :05:43.14 +0000 UTC Duration: 00 :00:15 go: downloading github.com/kubeshop/testkube v1.4.5 go: downloading github.com/onsi/gomega v1.20.0 go: downloading github.com/onsi/ginkgo/v2 v2.1.4 go: downloading github.com/google/go-cmp v0.5.8 go: downloading golang.org/x/net v0.0.0-20220722155237-a158d28d115b go: downloading gopkg.in/yaml.v3 v3.0.1 go: downloading golang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f go: downloading golang.org/x/text v0.3.7 go: downloading go.mongodb.org/mongo-driver v1.10.1 go: downloading github.com/dustinkirkland/golang-petname v0.0.0-20191129215211-8e5a1ed0cff0 Running Suite: TestkubeApi Suite - /tmp/git-sparse-checkout2422275089/repo/examples/testkube-api ================================================================================================ Random Seed: 1659693931 - will randomize all specs Will run 1 of 1 specs Running in parallel across 7 processes \u2022 Ran 1 of 1 Specs in 0 .088 seconds SUCCESS! -- 1 Passed | 0 Failed | 0 Pending | 0 Skipped Ginkgo ran 1 suite in 7 .7928584s Test Suite Passed Status Test execution completed with success \ud83e\udd47 Summary Testkube simplifies running Go tests based on Ginkgo and allows them to run in your Kubernetes cluster with ease.","title":"Ginkgo"},{"location":"executor-ginkgo/#ginkgo-based-tests","text":"Testkube allows us to run Ginkgo-based tests. (https://onsi.github.io/ginkgo/) | Ginkgo is a mature testing framework for Go designed to help you write expressive specs. Ginkgo builds on top of Go's testing foundation and is complemented by the Gomega matcher library. Together, Ginkgo and Gomega let you express the intent behind your specs clearly.","title":"Ginkgo-based Tests"},{"location":"executor-ginkgo/#test-environment","text":"Let's try some simple Ginkgo. Testkube's Ginkgo Executor is using the ginkgo binary and allows configuring it's behavior using arguments. Because Ginkgo projects are quite complicated in terms of directory structure, we'll need to load them from a Git directory. You can find example projects in the repository here: https://github.com/kubeshop/testkube-executor-ginkgo/tree/main/examples. Let's create a simple test which will check if an env variable is set to true: The default Ginkgo executor: apiVersion : executor.testkube.io/v1 kind : Executor metadata : name : ginkgo-executor namespace : testkube spec : features : - artifacts - junit-report image : kubeshop/testkube-ginkgo-executor:0.0.4 types : - ginkgo/test","title":"Test Environment"},{"location":"executor-ginkgo/#create-a-new-ginkgo-based-test","text":"","title":"Create a New Ginkgo-based Test"},{"location":"executor-ginkgo/#write-a-ginkgo-test","text":"We'll try to check if there are any executors registered on the Testkube demo cluster. To do that we need to check the /v1/executors endpoint. Results should have at least one Executor registered. package testkube_api_test import ( \"encoding/json\" \"io\" \"net/http\" \"github.com/kubeshop/testkube/pkg/api/v1/testkube\" . \"github.com/onsi/ginkgo/v2\" . \"github.com/onsi/gomega\" ) var _ = Describe ( \"API Test\" , func () { It ( \"There should be executors registered\" , func () { resp , err := http . Get ( \"https://demo.testkube.io/results/v1/executors\" ) Expect ( err ). To ( BeNil ()) executors , err := GetTestkubeExecutors ( resp . Body ) Expect ( err ). To ( BeNil ()) Expect ( len ( executors )). To ( BeNumerically ( \">\" , 1 )) }) }) func GetTestkubeExecutors ( body io . ReadCloser ) ([] testkube . ExecutorDetails , error ) { bytes , err := io . ReadAll ( body ) if err != nil { return nil , err } results := [] testkube . ExecutorDetails {} err = json . Unmarshal ( bytes , & results ) return results , err } The test is run in the standard Ginkgo bootstrapped project. go mod init testkube-ginkgo-example ginkgo bootstrap Everything was pushed to the Git repository. You can also look at the code in our examples: [https://github.com/kubeshop/testkube-executor-ginkgo/tree/main/examples/testkube-api]","title":"Write a Ginkgo test"},{"location":"executor-ginkgo/#add-test-to-testkube","text":"To add a Ginkgo test to Testkube you need to call the create test command. We'll assume that our test is in a Git repository. kubectl testkube create test --git-uri https://github.com/kubeshop/testkube-executor-ginkgo.git --git-path examples/testkube-api --type ginkgo/test --name ginkgo-example-test --git-branch main","title":"Add Test to Testkube"},{"location":"executor-ginkgo/#running-a-test","text":"Let's pass the env variable to our test run: tk run test ginkgo-example-test -f Type: ginkgo/test Name: ginkgo-example-test Execution ID: 62eceb8df4732077cee099cf Execution name: ginkgo-example-test-3 Execution number: 3 Status: running Start time: 2022 -08-05 10 :06:05.467437617 +0000 UTC ... other logs Running in parallel across 7 processes \u2022 Ran 1 of 1 Specs in 0 .091 seconds SUCCESS! -- 1 Passed | 0 Failed | 0 Pending | 0 Skipped Ginkgo ran 1 suite in 7 .447676906s Test Suite Passed Test execution completed with success in 15 .586s \ud83e\udd47 Watch test execution until complete: $ kubectl testkube watch execution 62eceb8df4732077cee099cf Use the following command to get test execution details: $ kubectl testkube get execution 62eceb8df4732077cee099cf","title":"Running a Test"},{"location":"executor-ginkgo/#getting-test-results","text":"We can always get back to the test results: kubectl testkube get execution 62eceb8df4732077cee099cf Output: # ....... a lot of Ginkgo logs ID: 62eceb67f4732077cee099cd Name ginkgo-example-test-2 Number: 2 Test name: ginkgo-example-test Type: ginkgo/test Status: passed Start time: 2022 -08-05 10 :05:27.659 +0000 UTC End time: 2022 -08-05 10 :05:43.14 +0000 UTC Duration: 00 :00:15 go: downloading github.com/kubeshop/testkube v1.4.5 go: downloading github.com/onsi/gomega v1.20.0 go: downloading github.com/onsi/ginkgo/v2 v2.1.4 go: downloading github.com/google/go-cmp v0.5.8 go: downloading golang.org/x/net v0.0.0-20220722155237-a158d28d115b go: downloading gopkg.in/yaml.v3 v3.0.1 go: downloading golang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f go: downloading golang.org/x/text v0.3.7 go: downloading go.mongodb.org/mongo-driver v1.10.1 go: downloading github.com/dustinkirkland/golang-petname v0.0.0-20191129215211-8e5a1ed0cff0 Running Suite: TestkubeApi Suite - /tmp/git-sparse-checkout2422275089/repo/examples/testkube-api ================================================================================================ Random Seed: 1659693931 - will randomize all specs Will run 1 of 1 specs Running in parallel across 7 processes \u2022 Ran 1 of 1 Specs in 0 .088 seconds SUCCESS! -- 1 Passed | 0 Failed | 0 Pending | 0 Skipped Ginkgo ran 1 suite in 7 .7928584s Test Suite Passed Status Test execution completed with success \ud83e\udd47","title":"Getting Test Results"},{"location":"executor-ginkgo/#summary","text":"Testkube simplifies running Go tests based on Ginkgo and allows them to run in your Kubernetes cluster with ease.","title":"Summary"},{"location":"executor-gradle/","text":"Gradle Based Tests Testkube allows running Gradle based tasks that could be also tests. For example, we can easily run JUnit tests in Testkube. Test Environment We will put a simple JUnit test in our cluster and run it. The Testkube Gradle Executor handles gradle and gradlew binaries. Since Gradle projects are quite complicated in terms of directory structure, we'll need to load them from the Git directory. You can find example projects in the repository here: https://github.com/kubeshop/testkube-executor-gradle/tree/main/examples. Let's create a simple test which will check if an env variable is set to true: package hello.gradle ; import org.junit.jupiter.api.Test ; import static org.junit.jupiter.api.Assertions.* ; class LibraryTest { @Test void someLibraryMethodReturnsTrue () { String env = System . getenv ( \"TESTKUBE_GRADLE\" ); assertTrue ( Boolean . parseBoolean ( env ), \"TESTKUBE_GRADLE env should be true\" ); } } The default Gradle executor looks like: apiVersion : executor.testkube.io/v1 kind : Executor metadata : name : gradle-jdk18-executor namespace : testkube spec : image : kubeshop/testkube-gradle-executor:0.1.4-jdk18 types : - gradle/project - gradle/test - gradle/integrationTest As we can see, there are several types. The Gradle executor handles the second part after / as a task name, so gradle/test will run gradle test and so on. As opposed to project which is generic and forces you to pass additional arguments during test execution. For example: kubectl testkube run gradle-example-project --args = 'runMyCustomTask' Create a New Gradle-based Test kubectl testkube create test --git-uri https://github.com/kubeshop/testkube-executor-gradle.git --git-path examples/hello-gradle --type gradle/test --name gradle-example-test --git-branch main Running a Test Let's pass the env variable to our test run: kubectl testkube run test gradle-example-test -f -v TESTKUBE_GRADLE = true # ...... after some time The test execution completed successfully in 16 .555s \ud83e\udd47. Watch the test execution until complete: $ kubectl testkube watch execution 62d148db0260f256c1a1e993 Use the following command to get test execution details: $ kubectl testkube get execution 62d148db0260f256c1a1e993 Getting Test Results Now we can watch/get test execution details: kubectl testkube get execution 62d148db0260f256c1a1e993 Output: # ....... a lot of Gradle logs > Task :compileTestJava > Task :processTestResources NO-SOURCE > Task :testClasses > Task :test BUILD SUCCESSFUL in 10s 2 actionable tasks: 2 executed Status Test execution completed with success \ud83e\udd47 Using Different JDKs In the Java world, you would like to have control over the Runtime environment. Testkube can easily handle that for you! We're building several Java images to handle constraints which Gradle can put in its build file. To use a different executor, you can use one of our pre-built ones (for Java 8,11,17,18) or build your own Docker image based on the Gradle executor. Let's assume we need JDK18 for our test runs. In Testkube, create a new Gradle executor: content of gradle-jdk18-executor.yaml apiVersion : executor.testkube.io/v1 kind : Executor metadata : name : gradle-jdk18-executor namespace : testkube spec : image : kubeshop/testkube-gradle-executor:0.1.4-jdk18 types : - gradle:jdk18/project - gradle:jdk18/test - gradle:jdk18/integrationTest And add it to your cluster: kubectl apply -f gradle-jdk18-executor.yaml Now, create the new test with the type that our new executor can handle e.g.: gradle:jdk18/test : # create test: kubectl testkube create test --git-uri https://github.com/kubeshop/testkube-executor-gradle.git --git-path examples/hello-gradle-jdk18 --type gradle:jdk18/test --name gradle-jdk18-example-test --git-branch main # and run it: kubectl testkube run test gradle-jdk18-example-test -f -v TESTKUBE_GRADLE = true Summary Testkube simplifies running Java/Kotlin based tests ( build.gradle.kts is also handled) and allows merging Java based tests into your global testing ecosystem easily.","title":"Gradle"},{"location":"executor-gradle/#gradle-based-tests","text":"Testkube allows running Gradle based tasks that could be also tests. For example, we can easily run JUnit tests in Testkube.","title":"Gradle Based Tests"},{"location":"executor-gradle/#test-environment","text":"We will put a simple JUnit test in our cluster and run it. The Testkube Gradle Executor handles gradle and gradlew binaries. Since Gradle projects are quite complicated in terms of directory structure, we'll need to load them from the Git directory. You can find example projects in the repository here: https://github.com/kubeshop/testkube-executor-gradle/tree/main/examples. Let's create a simple test which will check if an env variable is set to true: package hello.gradle ; import org.junit.jupiter.api.Test ; import static org.junit.jupiter.api.Assertions.* ; class LibraryTest { @Test void someLibraryMethodReturnsTrue () { String env = System . getenv ( \"TESTKUBE_GRADLE\" ); assertTrue ( Boolean . parseBoolean ( env ), \"TESTKUBE_GRADLE env should be true\" ); } } The default Gradle executor looks like: apiVersion : executor.testkube.io/v1 kind : Executor metadata : name : gradle-jdk18-executor namespace : testkube spec : image : kubeshop/testkube-gradle-executor:0.1.4-jdk18 types : - gradle/project - gradle/test - gradle/integrationTest As we can see, there are several types. The Gradle executor handles the second part after / as a task name, so gradle/test will run gradle test and so on. As opposed to project which is generic and forces you to pass additional arguments during test execution. For example: kubectl testkube run gradle-example-project --args = 'runMyCustomTask'","title":"Test Environment"},{"location":"executor-gradle/#create-a-new-gradle-based-test","text":"kubectl testkube create test --git-uri https://github.com/kubeshop/testkube-executor-gradle.git --git-path examples/hello-gradle --type gradle/test --name gradle-example-test --git-branch main","title":"Create a New Gradle-based Test"},{"location":"executor-gradle/#running-a-test","text":"Let's pass the env variable to our test run: kubectl testkube run test gradle-example-test -f -v TESTKUBE_GRADLE = true # ...... after some time The test execution completed successfully in 16 .555s \ud83e\udd47. Watch the test execution until complete: $ kubectl testkube watch execution 62d148db0260f256c1a1e993 Use the following command to get test execution details: $ kubectl testkube get execution 62d148db0260f256c1a1e993","title":"Running a Test"},{"location":"executor-gradle/#getting-test-results","text":"Now we can watch/get test execution details: kubectl testkube get execution 62d148db0260f256c1a1e993 Output: # ....... a lot of Gradle logs > Task :compileTestJava > Task :processTestResources NO-SOURCE > Task :testClasses > Task :test BUILD SUCCESSFUL in 10s 2 actionable tasks: 2 executed Status Test execution completed with success \ud83e\udd47","title":"Getting Test Results"},{"location":"executor-gradle/#using-different-jdks","text":"In the Java world, you would like to have control over the Runtime environment. Testkube can easily handle that for you! We're building several Java images to handle constraints which Gradle can put in its build file. To use a different executor, you can use one of our pre-built ones (for Java 8,11,17,18) or build your own Docker image based on the Gradle executor. Let's assume we need JDK18 for our test runs. In Testkube, create a new Gradle executor: content of gradle-jdk18-executor.yaml apiVersion : executor.testkube.io/v1 kind : Executor metadata : name : gradle-jdk18-executor namespace : testkube spec : image : kubeshop/testkube-gradle-executor:0.1.4-jdk18 types : - gradle:jdk18/project - gradle:jdk18/test - gradle:jdk18/integrationTest And add it to your cluster: kubectl apply -f gradle-jdk18-executor.yaml Now, create the new test with the type that our new executor can handle e.g.: gradle:jdk18/test : # create test: kubectl testkube create test --git-uri https://github.com/kubeshop/testkube-executor-gradle.git --git-path examples/hello-gradle-jdk18 --type gradle:jdk18/test --name gradle-jdk18-example-test --git-branch main # and run it: kubectl testkube run test gradle-jdk18-example-test -f -v TESTKUBE_GRADLE = true","title":"Using Different JDKs"},{"location":"executor-gradle/#summary","text":"Testkube simplifies running Java/Kotlin based tests ( build.gradle.kts is also handled) and allows merging Java based tests into your global testing ecosystem easily.","title":"Summary"},{"location":"executor-k6/","text":"K6 Performance Tests Check out our blog post to follow tutorial steps to harness the power of k6 load testing in Kubernetes with Testkube's CLI and API. K6 Grafana k6 is an open-source load testing tool that makes performance testing easy and productive for engineering teams. K6 is free, developer-centric and extensible. Using k6, you can test the reliability and performance of your systems and catch performance regressions and problems earlier. K6 will help you to build resilient and performant applications that scale. K6 is developed by Grafana Labs and the community. Running a K6 Test K6 is integral part of Testkube. The Testkube k6 executor is installed by default during the Testkube installation. To run a k6 test in Testkube you need to create a Test. Using Files as Input Let's save our k6 test in file e.g. test.js . import http from 'k6/http' ; import { sleep } from 'k6' ; export default function () { http . get ( 'https://kubeshop.github.io/testkube/' ); sleep ( 1 ); } Testkube and the k6 executor accept a test file as an input. kubectl testkube create test --file test.js --name k6-test You don't need to pass a type here, Testkube will autodetect it. To run the test, pass previously created test name: kubectl testkube run test -f k6-test You can also create a Test based on Git repository: # create k6-test-script.js from this Git repository kubectl testkube create test --git-uri https://github.com/kubeshop/testkube-executor-k6.git --git-branch main --git-path examples --type \"k6/script\" --name k6-test-script-git Testkube will clone the repository and create a Testkube Test Custom Resource in your cluster. Using Additional K6 Arguments in Your Tests You can also pass additional arguments to k6 binary thanks to --args flag: $ kubectl testkube run test -f k6-test --args '--vus 100 --no-connection-reuse' K6 Test Results A k6 test will be successful in Testkube when all checks and thresholds are successful. In the case of an error, the test will have failed status, even if there is no failure in the summary report in the test logs. For details check this k6 issue .","title":"K6"},{"location":"executor-k6/#k6-performance-tests","text":"Check out our blog post to follow tutorial steps to harness the power of k6 load testing in Kubernetes with Testkube's CLI and API. K6 Grafana k6 is an open-source load testing tool that makes performance testing easy and productive for engineering teams. K6 is free, developer-centric and extensible. Using k6, you can test the reliability and performance of your systems and catch performance regressions and problems earlier. K6 will help you to build resilient and performant applications that scale. K6 is developed by Grafana Labs and the community.","title":"K6 Performance Tests"},{"location":"executor-k6/#running-a-k6-test","text":"K6 is integral part of Testkube. The Testkube k6 executor is installed by default during the Testkube installation. To run a k6 test in Testkube you need to create a Test.","title":"Running a K6 Test"},{"location":"executor-k6/#using-files-as-input","text":"Let's save our k6 test in file e.g. test.js . import http from 'k6/http' ; import { sleep } from 'k6' ; export default function () { http . get ( 'https://kubeshop.github.io/testkube/' ); sleep ( 1 ); } Testkube and the k6 executor accept a test file as an input. kubectl testkube create test --file test.js --name k6-test You don't need to pass a type here, Testkube will autodetect it. To run the test, pass previously created test name: kubectl testkube run test -f k6-test You can also create a Test based on Git repository: # create k6-test-script.js from this Git repository kubectl testkube create test --git-uri https://github.com/kubeshop/testkube-executor-k6.git --git-branch main --git-path examples --type \"k6/script\" --name k6-test-script-git Testkube will clone the repository and create a Testkube Test Custom Resource in your cluster.","title":"Using Files as Input"},{"location":"executor-k6/#using-additional-k6-arguments-in-your-tests","text":"You can also pass additional arguments to k6 binary thanks to --args flag: $ kubectl testkube run test -f k6-test --args '--vus 100 --no-connection-reuse'","title":"Using Additional K6 Arguments in Your Tests"},{"location":"executor-k6/#k6-test-results","text":"A k6 test will be successful in Testkube when all checks and thresholds are successful. In the case of an error, the test will have failed status, even if there is no failure in the summary report in the test logs. For details check this k6 issue .","title":"K6 Test Results"},{"location":"executor-kubepug/","text":"Checking Manifests Using the KubePug Testkube Executor KubePug is a kubectl plugin checking for deprecated Kubernetes clusters or deprecated versions of Kubernetes manifests. It can connect to both your cluster directly and it can run on input files. For security, Testkube only supports scanning input files via the KubePug executor. Running the KubePug Testkube executor does not require any special installation; Testkube comes with the ability to run Kubepug immediately after installation. Testing Manifests By default, kubepug downloads the latest swagger.json from the Kubernetes GitHub repository. When running it using Testkube, the same behavior is applied, unless a version is specified in the arguments. Example input file: apiVersion : v1 conditions : - message : '{\"health\":\"true\"}' status : \"True\" type : Healthy kind : ComponentStatus metadata : creationTimestamp : null name : etcd-1 To test this using Testkube, first create a test, then run it: $ kubectl testkube create test --file file_name.yaml --type kubepug/yaml --name kubepug-example-test-1 Test created testkube / kubepug-example-test-1 \ud83e\udd47 $ kubectl testkube run test kubepug-example-test-1 Type : kubepug/yaml Name : kubepug-example-test-1 Execution ID : 62b59ae1657713ea1b003a25 Execution name: completely-helped-fowl Test execution started Watch test execution until complete: $ kubectl testkube watch execution 62b59ae1657713ea1b003a25 Use following command to get test execution details: $ kubectl testkube get execution 62b59ae1657713ea1b003a25 $ kubectl testkube get execution 62b59ae1657713ea1b003a25 ID: 62b59ae1657713ea1b003a25 Name: completely-helped-fowl Type: kubepug/yaml Duration: 00 :00:05 Status test execution failed: \u2a2f { \"DeprecatedAPIs\" : [{ \"Description\" : \"ComponentStatus (and ComponentStatusList) holds the cluster validation info. Deprecated: This API is deprecated in v1.19+\" , \"Group\" : \"\" , \"Kind\" : \"ComponentStatus\" , \"Version\" : \"v1\" , \"Name\" : \"\" , \"Deprecated\" :true, \"Items\" : [{ \"Scope\" : \"OBJECT\" , \"ObjectName\" : \"etcd-1\" , \"Namespace\" : \"\" , \"location\" : \"/tmp/test-content4075001618\" }]}] , \"DeletedAPIs\" :null } These tests also support input strings, file URIs, Git files and Git directories. Testing the Output of kubectl get Another way to test Kubernetes objects is to create the Testkube Test with the output of kubectl get . The output has to be in the correct format in order for KubePug to be able to scan it using -o yaml argument. $ kubectl get PodSecurityPolicy gce.gke-metrics-agent -o yaml | kubectl testkube create test --type kubepug/yaml --name kubepug-example-test2 Warning: policy/v1beta1 PodSecurityPolicy is deprecated in v1.21+, unavailable in v1.25+ Test created testkube / kubepug-example-test2 \ud83e\udd47 $ kubectl testkube run test kubepug-example-test2 Type : kubepug/yaml Name : kubepug-example-test2 Execution ID : 62c8110338a672dc415ce98e Execution name: mostly-rapid-lark Test execution started Watch test execution until complete: $ kubectl testkube watch execution 62c8110338a672dc415ce98e Use following command to get test execution details: $ kubectl testkube get execution 62c8110338a672dc415ce98e Testing Against a Previous Kubernetes Version It is possible to run the same Testkube KubePug test using different Kubernetes versions to compare to using the --k8s-version=${VERSION} argument as shown below: $ kubectl testkube run test kubepug-example-test-1 --args '--k8s-version=v1.18.0' Type : kubepug/yaml Name : kubepug-example-test-1 Execution ID : 62b59d52657713ea1b003a2d Execution name: notably-healthy-cricket Test execution started Watch test execution until complete: $ kubectl testkube watch execution 62b59d52657713ea1b003a2d Use following command to get test execution details: $ kubectl testkube get execution 62b59d52657713ea1b003a2d $ kubectl testkube get execution 62b59d52657713ea1b003a2d ID: 62b59d52657713ea1b003a2d Name: sincerely-real-marten Type: kubepug/yaml Duration: 00 :00:05 Args: --k8s-version = v1.18.0 { \"DeprecatedAPIs\" :null, \"DeletedAPIs\" :null } Status Test execution completed with success \ud83e\udd47 It is also possible to pass other arguments to the executor. For the options please consult the KubePug documentation .","title":"KubePug"},{"location":"executor-kubepug/#checking-manifests-using-the-kubepug-testkube-executor","text":"KubePug is a kubectl plugin checking for deprecated Kubernetes clusters or deprecated versions of Kubernetes manifests. It can connect to both your cluster directly and it can run on input files. For security, Testkube only supports scanning input files via the KubePug executor. Running the KubePug Testkube executor does not require any special installation; Testkube comes with the ability to run Kubepug immediately after installation.","title":"Checking Manifests Using the KubePug Testkube Executor"},{"location":"executor-kubepug/#testing-manifests","text":"By default, kubepug downloads the latest swagger.json from the Kubernetes GitHub repository. When running it using Testkube, the same behavior is applied, unless a version is specified in the arguments. Example input file: apiVersion : v1 conditions : - message : '{\"health\":\"true\"}' status : \"True\" type : Healthy kind : ComponentStatus metadata : creationTimestamp : null name : etcd-1 To test this using Testkube, first create a test, then run it: $ kubectl testkube create test --file file_name.yaml --type kubepug/yaml --name kubepug-example-test-1 Test created testkube / kubepug-example-test-1 \ud83e\udd47 $ kubectl testkube run test kubepug-example-test-1 Type : kubepug/yaml Name : kubepug-example-test-1 Execution ID : 62b59ae1657713ea1b003a25 Execution name: completely-helped-fowl Test execution started Watch test execution until complete: $ kubectl testkube watch execution 62b59ae1657713ea1b003a25 Use following command to get test execution details: $ kubectl testkube get execution 62b59ae1657713ea1b003a25 $ kubectl testkube get execution 62b59ae1657713ea1b003a25 ID: 62b59ae1657713ea1b003a25 Name: completely-helped-fowl Type: kubepug/yaml Duration: 00 :00:05 Status test execution failed: \u2a2f { \"DeprecatedAPIs\" : [{ \"Description\" : \"ComponentStatus (and ComponentStatusList) holds the cluster validation info. Deprecated: This API is deprecated in v1.19+\" , \"Group\" : \"\" , \"Kind\" : \"ComponentStatus\" , \"Version\" : \"v1\" , \"Name\" : \"\" , \"Deprecated\" :true, \"Items\" : [{ \"Scope\" : \"OBJECT\" , \"ObjectName\" : \"etcd-1\" , \"Namespace\" : \"\" , \"location\" : \"/tmp/test-content4075001618\" }]}] , \"DeletedAPIs\" :null } These tests also support input strings, file URIs, Git files and Git directories.","title":"Testing Manifests"},{"location":"executor-kubepug/#testing-the-output-of-kubectl-get","text":"Another way to test Kubernetes objects is to create the Testkube Test with the output of kubectl get . The output has to be in the correct format in order for KubePug to be able to scan it using -o yaml argument. $ kubectl get PodSecurityPolicy gce.gke-metrics-agent -o yaml | kubectl testkube create test --type kubepug/yaml --name kubepug-example-test2 Warning: policy/v1beta1 PodSecurityPolicy is deprecated in v1.21+, unavailable in v1.25+ Test created testkube / kubepug-example-test2 \ud83e\udd47 $ kubectl testkube run test kubepug-example-test2 Type : kubepug/yaml Name : kubepug-example-test2 Execution ID : 62c8110338a672dc415ce98e Execution name: mostly-rapid-lark Test execution started Watch test execution until complete: $ kubectl testkube watch execution 62c8110338a672dc415ce98e Use following command to get test execution details: $ kubectl testkube get execution 62c8110338a672dc415ce98e","title":"Testing the Output of kubectl get"},{"location":"executor-kubepug/#testing-against-a-previous-kubernetes-version","text":"It is possible to run the same Testkube KubePug test using different Kubernetes versions to compare to using the --k8s-version=${VERSION} argument as shown below: $ kubectl testkube run test kubepug-example-test-1 --args '--k8s-version=v1.18.0' Type : kubepug/yaml Name : kubepug-example-test-1 Execution ID : 62b59d52657713ea1b003a2d Execution name: notably-healthy-cricket Test execution started Watch test execution until complete: $ kubectl testkube watch execution 62b59d52657713ea1b003a2d Use following command to get test execution details: $ kubectl testkube get execution 62b59d52657713ea1b003a2d $ kubectl testkube get execution 62b59d52657713ea1b003a2d ID: 62b59d52657713ea1b003a2d Name: sincerely-real-marten Type: kubepug/yaml Duration: 00 :00:05 Args: --k8s-version = v1.18.0 { \"DeprecatedAPIs\" :null, \"DeletedAPIs\" :null } Status Test execution completed with success \ud83e\udd47 It is also possible to pass other arguments to the executor. For the options please consult the KubePug documentation .","title":"Testing Against a Previous Kubernetes Version"},{"location":"executor-maven/","text":"Maven-based Tests Testkube allows us to run Maven-based tasks which could be also tests. For example we can easily run JUnit tests in Testkube now. Test Environment We'll try to put simple JUnit test to our cluster and run it. Testkube Maven Executor handles mvn and mvnw binaries. Because Maven projects are quite complicated in terms of directory structure. We'll need to load them from a Git directory. You can find example projects in the repository here: https://github.com/kubeshop/testkube-executor-maven/tree/main/examples. Let's create a simple test which will check if an env variable is set to true: package hello.maven ; import org.junit.jupiter.api.Test ; import static org.junit.jupiter.api.Assertions.* ; class LibraryTest { @Test void someLibraryMethodReturnsTrue () { String env = System . getenv ( \"TESTKUBE_MAVEN\" ); assertTrue ( Boolean . parseBoolean ( env ), \"TESTKUBE_MAVEN env should be true\" ); } } The default Maven executor: apiVersion : executor.testkube.io/v1 kind : Executor metadata : name : maven-executor namespace : testkube spec : image : kubeshop/testkube-maven-executor:0.1.4 types : - maven/project - maven/test - maven/integration-test As we can see, there are several types. The Maven executor handles the second part after / as a task name, so maven/test will run mvn test and so on. One exception from this rule is project which is a generic one and forces you to pass additional arguments during test execution. For example: kubectl testkube run maven-example-project --args = 'runMyCustomTask' Create a New Maven-based Test kubectl testkube create test --git-uri https://github.com/kubeshop/testkube-executor-maven.git --git-path examples/hello-maven --type maven/test --name maven-example-test --git-branch main Running a Test Let's pass the env variable to our test run: kubectl testkube run test maven-example-test -f -v TESTKUBE_MAVEN = true # ...... after some time Test execution completed with success in 16 .555s \ud83e\udd47 Watch the test execution until complete: $ kubectl testkube watch execution 62d148db0260f256c1a1e993 Use the following command to get test execution details: $ kubectl testkube get execution 62d148db0260f256c1a1e993 Getting Test Results Now we can watch/get test execution details: kubectl testkube get execution 62d148db0260f256c1a1e993 Output: # ....... a lot of Maven logs Downloaded from central: https://repo.maven.apache.org/maven2/org/junit/platform/junit-platform-launcher/1.7.2/junit-platform-launcher-1.7.2.pom ( 3 .0 kB at 121 kB/s ) [ INFO ] [ INFO ] ------------------------------------------------------- [ INFO ] T E S T S [ INFO ] ------------------------------------------------------- [ INFO ] Running hello.maven.LibraryTest [ INFO ] Tests run: 1 , Failures: 0 , Errors: 0 , Skipped: 0 , Time elapsed: 0 .052 s - in hello.maven.LibraryTest [ INFO ] [ INFO ] Results: [ INFO ] [ INFO ] Tests run: 1 , Failures: 0 , Errors: 0 , Skipped: 0 [ INFO ] [ INFO ] ------------------------------------------------------------------------ [ INFO ] BUILD SUCCESS [ INFO ] ------------------------------------------------------------------------ [ INFO ] Total time: 9 .851 s [ INFO ] Finished at: 2022 -07-18T09:06:15Z [ INFO ] ------------------------------------------------------------------------ Status Test execution completed with success \ud83e\udd47 Using different JDKs In the Java world, usually you want to have control over your Runtime environment. Testkube can easily handle that for you! We're building several Java images to handle constraints which Maven can put in it's build file. To use a different executor you can use one of our pre-built ones (for Java 8,11,17,18) or build your own Docker image based on a Maven executor. Let's assume we need JDK18 for our test runs. To handle that issue, create a new Maven executor: content of maven-jdk18-executor.yaml apiVersion : executor.testkube.io/v1 kind : Executor metadata : name : maven-jdk18-executor namespace : testkube spec : image : kubeshop/testkube-maven-executor:0.1.0-jdk18 # <-- we're building jdk types : - maven:jdk18/project # <-- just create different test type with naming convention \"framework:version/type\" - maven:jdk18/test - maven:jdk18/integration-test Tip: Look for recent executor versions here https://hub.docker.com/repository/registry-1.docker.io/kubeshop/testkube-maven-executor/tags?page=1&ordering=last_updated. And add it to your cluster: kubectl apply -f maven-jdk18-executor.yaml Now, create a new test with a type which our new executor can handle e.g.: maven:jdk18/test # create test kubectl testkube create test --git-uri https://github.com/kubeshop/testkube-executor-maven.git --git-path examples/hello-maven-jdk18 --type maven:jdk18/test --name maven-jdk18-example-test --git-branch main # and run it kubectl testkube run test maven-jdk18-example-test -f -v TESTKUBE_MAVEN = true Summary Testkube simplifies running Java tests based on Maven and simplifies the merging of Java based tests into your global testing ecosystem.","title":"Maven"},{"location":"executor-maven/#maven-based-tests","text":"Testkube allows us to run Maven-based tasks which could be also tests. For example we can easily run JUnit tests in Testkube now.","title":"Maven-based Tests"},{"location":"executor-maven/#test-environment","text":"We'll try to put simple JUnit test to our cluster and run it. Testkube Maven Executor handles mvn and mvnw binaries. Because Maven projects are quite complicated in terms of directory structure. We'll need to load them from a Git directory. You can find example projects in the repository here: https://github.com/kubeshop/testkube-executor-maven/tree/main/examples. Let's create a simple test which will check if an env variable is set to true: package hello.maven ; import org.junit.jupiter.api.Test ; import static org.junit.jupiter.api.Assertions.* ; class LibraryTest { @Test void someLibraryMethodReturnsTrue () { String env = System . getenv ( \"TESTKUBE_MAVEN\" ); assertTrue ( Boolean . parseBoolean ( env ), \"TESTKUBE_MAVEN env should be true\" ); } } The default Maven executor: apiVersion : executor.testkube.io/v1 kind : Executor metadata : name : maven-executor namespace : testkube spec : image : kubeshop/testkube-maven-executor:0.1.4 types : - maven/project - maven/test - maven/integration-test As we can see, there are several types. The Maven executor handles the second part after / as a task name, so maven/test will run mvn test and so on. One exception from this rule is project which is a generic one and forces you to pass additional arguments during test execution. For example: kubectl testkube run maven-example-project --args = 'runMyCustomTask'","title":"Test Environment"},{"location":"executor-maven/#create-a-new-maven-based-test","text":"kubectl testkube create test --git-uri https://github.com/kubeshop/testkube-executor-maven.git --git-path examples/hello-maven --type maven/test --name maven-example-test --git-branch main","title":"Create a New Maven-based Test"},{"location":"executor-maven/#running-a-test","text":"Let's pass the env variable to our test run: kubectl testkube run test maven-example-test -f -v TESTKUBE_MAVEN = true # ...... after some time Test execution completed with success in 16 .555s \ud83e\udd47 Watch the test execution until complete: $ kubectl testkube watch execution 62d148db0260f256c1a1e993 Use the following command to get test execution details: $ kubectl testkube get execution 62d148db0260f256c1a1e993","title":"Running a Test"},{"location":"executor-maven/#getting-test-results","text":"Now we can watch/get test execution details: kubectl testkube get execution 62d148db0260f256c1a1e993 Output: # ....... a lot of Maven logs Downloaded from central: https://repo.maven.apache.org/maven2/org/junit/platform/junit-platform-launcher/1.7.2/junit-platform-launcher-1.7.2.pom ( 3 .0 kB at 121 kB/s ) [ INFO ] [ INFO ] ------------------------------------------------------- [ INFO ] T E S T S [ INFO ] ------------------------------------------------------- [ INFO ] Running hello.maven.LibraryTest [ INFO ] Tests run: 1 , Failures: 0 , Errors: 0 , Skipped: 0 , Time elapsed: 0 .052 s - in hello.maven.LibraryTest [ INFO ] [ INFO ] Results: [ INFO ] [ INFO ] Tests run: 1 , Failures: 0 , Errors: 0 , Skipped: 0 [ INFO ] [ INFO ] ------------------------------------------------------------------------ [ INFO ] BUILD SUCCESS [ INFO ] ------------------------------------------------------------------------ [ INFO ] Total time: 9 .851 s [ INFO ] Finished at: 2022 -07-18T09:06:15Z [ INFO ] ------------------------------------------------------------------------ Status Test execution completed with success \ud83e\udd47","title":"Getting Test Results"},{"location":"executor-maven/#using-different-jdks","text":"In the Java world, usually you want to have control over your Runtime environment. Testkube can easily handle that for you! We're building several Java images to handle constraints which Maven can put in it's build file. To use a different executor you can use one of our pre-built ones (for Java 8,11,17,18) or build your own Docker image based on a Maven executor. Let's assume we need JDK18 for our test runs. To handle that issue, create a new Maven executor: content of maven-jdk18-executor.yaml apiVersion : executor.testkube.io/v1 kind : Executor metadata : name : maven-jdk18-executor namespace : testkube spec : image : kubeshop/testkube-maven-executor:0.1.0-jdk18 # <-- we're building jdk types : - maven:jdk18/project # <-- just create different test type with naming convention \"framework:version/type\" - maven:jdk18/test - maven:jdk18/integration-test Tip: Look for recent executor versions here https://hub.docker.com/repository/registry-1.docker.io/kubeshop/testkube-maven-executor/tags?page=1&ordering=last_updated. And add it to your cluster: kubectl apply -f maven-jdk18-executor.yaml Now, create a new test with a type which our new executor can handle e.g.: maven:jdk18/test # create test kubectl testkube create test --git-uri https://github.com/kubeshop/testkube-executor-maven.git --git-path examples/hello-maven-jdk18 --type maven:jdk18/test --name maven-jdk18-example-test --git-branch main # and run it kubectl testkube run test maven-jdk18-example-test -f -v TESTKUBE_MAVEN = true","title":"Using different JDKs"},{"location":"executor-maven/#summary","text":"Testkube simplifies running Java tests based on Maven and simplifies the merging of Java based tests into your global testing ecosystem.","title":"Summary"},{"location":"executor-postman/","text":"Postman Collections Testkube is able to run Postman collections inside your Kubernetes cluster so it can be used to test internal or external services. Test Environment Let's assume that our SUT (Service Under Test) is an internal Kubernetes service which has ClusterIP Service created and is exposed on port 8088 . The service name is testkube-api-server and is exposing the /health endpoint that we want to test. To call the SUT inside a cluster: curl http://testkube-api-server:8088/health Output: 200 OK Create a New Postman Test Create a postman collection and export it as JSON: Right click and export the given Collection to a file, In this example, it is saved into ~/Downloads/API-Health.postman_collection.json Now we can create a new Testkube based on the saved Postman Collection. Create a New Testkube Test Script kubectl testkube create test --name api-incluster-test --file ~/Downloads/API-Health.postman_collection.json --type postman/collection Output: Test created \ud83e\udd47 Test created! Running a Test kubectl testkube run test api-incluster-test Type : postman/collection Name : api-incluster-test Execution ID : 615d6398b046f8fbd3d955d4 Execution name: openly-full-bream Test queued for execution Use the following command to get test execution details: $ kubectl testkube get execution 615d6398b046f8fbd3d955d4 or watch test execution until complete: $ kubectl testkube watch execution 615d6398b046f8fbd3d955d4 Test runs can be named. If no name is passed, Testkube will autogenerate a name. Getting Test Results Now we can watch/get test execution details: kubectl testkube watch execution 615d6398b046f8fbd3d955d4 Output: Type : postman/collection Name : api-incluster-test Execution ID : 615d6398b046f8fbd3d955d4 Execution name: openly-full-bream Watching for changes Status: success, Duration: 598ms Getting results Name: openly-full-bream, Status: success, Duration: 598ms newman API-Health \u2192 Health GET http://testkube-api-server:8088/health [ 200 OK, 124B, 297ms ] \u2713 Status code is 200 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 executed \u2502 failed \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 iterations \u2502 1 \u2502 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 requests \u2502 1 \u2502 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 test-scripts \u2502 2 \u2502 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 prerequest-scripts \u2502 1 \u2502 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 assertions \u2502 1 \u2502 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 total run duration: 523ms \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 total data received: 8B ( approx ) \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 average response time: 297ms [ min: 297ms, max: 297ms, s.d.: 0\u00b5s ] \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Test execution completed in 598ms Summary Testkube simplifies running tests inside a cluster and stores tests and tests results for later use.","title":"Postman"},{"location":"executor-postman/#postman-collections","text":"Testkube is able to run Postman collections inside your Kubernetes cluster so it can be used to test internal or external services.","title":"Postman Collections"},{"location":"executor-postman/#test-environment","text":"Let's assume that our SUT (Service Under Test) is an internal Kubernetes service which has ClusterIP Service created and is exposed on port 8088 . The service name is testkube-api-server and is exposing the /health endpoint that we want to test. To call the SUT inside a cluster: curl http://testkube-api-server:8088/health Output: 200 OK","title":"Test Environment"},{"location":"executor-postman/#create-a-new-postman-test","text":"Create a postman collection and export it as JSON: Right click and export the given Collection to a file, In this example, it is saved into ~/Downloads/API-Health.postman_collection.json Now we can create a new Testkube based on the saved Postman Collection.","title":"Create a New Postman Test"},{"location":"executor-postman/#create-a-new-testkube-test-script","text":"kubectl testkube create test --name api-incluster-test --file ~/Downloads/API-Health.postman_collection.json --type postman/collection Output: Test created \ud83e\udd47 Test created!","title":"Create a New Testkube Test Script"},{"location":"executor-postman/#running-a-test","text":"kubectl testkube run test api-incluster-test Type : postman/collection Name : api-incluster-test Execution ID : 615d6398b046f8fbd3d955d4 Execution name: openly-full-bream Test queued for execution Use the following command to get test execution details: $ kubectl testkube get execution 615d6398b046f8fbd3d955d4 or watch test execution until complete: $ kubectl testkube watch execution 615d6398b046f8fbd3d955d4 Test runs can be named. If no name is passed, Testkube will autogenerate a name.","title":"Running a Test"},{"location":"executor-postman/#getting-test-results","text":"Now we can watch/get test execution details: kubectl testkube watch execution 615d6398b046f8fbd3d955d4 Output: Type : postman/collection Name : api-incluster-test Execution ID : 615d6398b046f8fbd3d955d4 Execution name: openly-full-bream Watching for changes Status: success, Duration: 598ms Getting results Name: openly-full-bream, Status: success, Duration: 598ms newman API-Health \u2192 Health GET http://testkube-api-server:8088/health [ 200 OK, 124B, 297ms ] \u2713 Status code is 200 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 executed \u2502 failed \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 iterations \u2502 1 \u2502 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 requests \u2502 1 \u2502 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 test-scripts \u2502 2 \u2502 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 prerequest-scripts \u2502 1 \u2502 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 assertions \u2502 1 \u2502 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 total run duration: 523ms \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 total data received: 8B ( approx ) \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 average response time: 297ms [ min: 297ms, max: 297ms, s.d.: 0\u00b5s ] \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Test execution completed in 598ms","title":"Getting Test Results"},{"location":"executor-postman/#summary","text":"Testkube simplifies running tests inside a cluster and stores tests and tests results for later use.","title":"Summary"},{"location":"executor-soapui/","text":"SoapUI Tests Check out our blog post to follow tutorial steps to Learn how to run functional tests in Kubernetes with SoapUI and Testkube. SoapUI is an open-source tool used for end-to-end testing of REST, SOAP and GraphQL APIs, as well as JMS, JDBC and other web services. Testkube supports the SoapUI executor implementation. Running a SoapUI Test In order to run a SoapUI test using Testkube, begin by creating a Testkube Test. An example of an exported SoapUI test looks the following: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <con:soapui-project xmlns:con= \"http://eviware.com/soapui/config\" id= \"68931eeb-521d-4870-972f-9d0f99c75cc2\" activeEnvironment= \"Default\" name= \"Testkube project\" resourceRoot= \"${projectDir}\" soapui-version= \"5.7.0\" abortOnError= \"false\" runType= \"SEQUENTIAL\" > <con:settings> <con:setting id= \"com.smartbear.swagger.ExportSwaggerAction$FormBase Path\" /> <con:setting id= \"com.smartbear.swagger.ExportSwaggerAction$FormTarget File\" /> <con:setting id= \"com.smartbear.swagger.ExportSwaggerAction$FormFormat\" > json </con:setting> <con:setting id= \"com.smartbear.swagger.ExportSwaggerAction$FormAPI Version\" > Swagger 2.0 </con:setting> <con:setting id= \"com.smartbear.swagger.ExportSwaggerAction$FormSwagger Version\" > Swagger 2.0 </con:setting> </con:settings> <con:interface xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:type= \"con:RestService\" id= \"4bcedf3f-ac64-4f45-9615-7d58b15b9ca1\" wadlVersion= \"http://wadl.dev.java.net/2009/02\" name= \"https://kubeshop.io\" type= \"rest\" > <con:settings /> <con:definitionCache type= \"TEXT\" rootPart= \"\" /> <con:endpoints> <con:endpoint> https://kubeshop.io </con:endpoint> </con:endpoints> <con:resource name= \"\" path= \"\" id= \"538412a5-540d-4772-aca8-2b19e456af77\" > <con:settings /> <con:parameters /> <con:method name= \"1\" id= \"fa5cf353-bafd-4aa1-9fa6-301d0d5c6e95\" method= \"GET\" > <con:settings /> <con:parameters /> <con:representation type= \"RESPONSE\" > <con:mediaType> text/html </con:mediaType> <con:status> 200 </con:status> <con:params /> <con:element> html </con:element> </con:representation> <con:representation type= \"RESPONSE\" > <con:mediaType> application/json </con:mediaType> <con:status> 200 </con:status> <con:params /> <con:element xmlns:pet= \"https://kubeshop.io/\" > pet:Response </con:element> </con:representation> <con:representation type= \"RESPONSE\" > <con:mediaType> text/html; charset=utf-8 </con:mediaType> <con:status> 200 </con:status> <con:params /> <con:element> html </con:element> </con:representation> <con:request name= \"Request 1\" id= \"e5ee1b97-e7a5-4fd0-9ecd-6671558f25bc\" mediaType= \"application/json\" > <con:settings> <con:setting id= \"com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers\" > &lt; xml-fragment/ &gt; </con:setting> </con:settings> <con:endpoint> https://kubeshop.io </con:endpoint> <con:request /> <con:originalUri> https://kubeshop.io/ </con:originalUri> <con:credentials> <con:authType> No Authorization </con:authType> </con:credentials> <con:jmsConfig JMSDeliveryMode= \"PERSISTENT\" /> <con:jmsPropertyConfig /> <con:parameters /> </con:request> </con:method> </con:resource> </con:interface> <con:testSuite id= \"d01755ab-653a-42e9-82ef-97ffea557480\" name= \"Testkube TestSuite\" > <con:settings /> <con:runType> SEQUENTIAL </con:runType> <con:testCase id= \"8803628b-cc8d-4aaa-bbba-e1bc878f202b\" failOnError= \"true\" failTestCaseOnErrors= \"true\" keepSession= \"false\" maxResults= \"0\" name= \"Kubeshop TestCase\" searchProperties= \"true\" > <con:settings /> <con:testStep type= \"restrequest\" name= \"1 - Request 1\" id= \"00e86b82-8ef2-483f-837b-7669bebe3c87\" > <con:settings /> <con:config xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" service= \"https://kubeshop.io\" resourcePath= \"\" methodName= \"1\" xsi:type= \"con:RestRequestStep\" > <con:restRequest name= \"1 - Request 1\" id= \"e5ee1b97-e7a5-4fd0-9ecd-6671558f25bc\" mediaType= \"application/json\" > <con:settings> <con:setting id= \"com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers\" > &lt; xml-fragment/ &gt; </con:setting> </con:settings> <con:endpoint> https://kubeshop.io </con:endpoint> <con:request /> <con:originalUri> https://kubeshop.io </con:originalUri> <con:assertion type= \"Valid HTTP Status Codes\" id= \"c88e07cf-dd80-4b11-b21d-7cad8474202b\" name= \"Valid HTTP Status Codes\" > <con:configuration> <codes> 200 </codes> </con:configuration> </con:assertion> <con:assertion type= \"Simple Contains\" id= \"7072dc46-6b93-43b4-b6bd-0464db7b249e\" name= \"Contains\" > <con:configuration> <token> testkube </token> <ignoreCase> true </ignoreCase> <useRegEx> false </useRegEx> </con:configuration> </con:assertion> <con:credentials> <con:authType> No Authorization </con:authType> </con:credentials> <con:jmsConfig JMSDeliveryMode= \"PERSISTENT\" /> <con:jmsPropertyConfig /> <con:parameters /> </con:restRequest> </con:config> </con:testStep> <con:properties /> </con:testCase> <con:testCase id= \"4c0fc01b-16db-41e9-9844-d4c2a88d27f2\" failOnError= \"true\" failTestCaseOnErrors= \"true\" keepSession= \"false\" maxResults= \"0\" name= \"Testkube TestCase\" searchProperties= \"true\" > <con:settings /> <con:testStep type= \"restrequest\" name= \"REST Request\" id= \"e1be7e01-5d4d-424e-b2f9-7daf84aaafa9\" > <con:settings /> <con:config xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" service= \"https://kubeshop.io\" methodName= \"1\" resourcePath= \"\" xsi:type= \"con:RestRequestStep\" > <con:restRequest name= \"REST Request\" id= \"191f16b4-cb04-4ffa-b8f9-da0e788c8262\" mediaType= \"application/json\" > <con:settings> <con:setting id= \"com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers\" > &lt; xml-fragment/ &gt; </con:setting> </con:settings> <con:encoding> UTF-8 </con:encoding> <con:endpoint> https://kubeshop.github.io/testkube/ </con:endpoint> <con:request /> <con:originalUri> https://kubeshop.io </con:originalUri> <con:assertion type= \"Simple Contains\" id= \"d9497693-01e2-4e3e-8ce5-5a292f9b6e41\" name= \"Contains\" > <con:configuration> <token> kubectl </token> <ignoreCase> false </ignoreCase> <useRegEx> false </useRegEx> </con:configuration> </con:assertion> <con:credentials> <con:authType> No Authorization </con:authType> </con:credentials> <con:jmsConfig JMSDeliveryMode= \"PERSISTENT\" /> <con:jmsPropertyConfig /> <con:parameters /> </con:restRequest> </con:config> </con:testStep> <con:properties /> </con:testCase> <con:properties /> </con:testSuite> <con:properties /> <con:wssContainer /> <con:oAuth2ProfileContainer /> <con:oAuth1ProfileContainer /> <con:sensitiveInformation /> </con:soapui-project> Using Files as Input Testkube and the SoapUI executor accept a project file as input. $ kubectl testkube create test --file example-project.xml --type soapui/xml --name example-test Test created / example-test \ud83e\udd47 Using Strings as Input $ cat example-project.xml | kubectl testkube create test --type soapui/xml --name example-test-string Test created / example-test-string \ud83e\udd47 Running the Tests To run the created test, use: $ kubectl testkube run test example-test Type : soapui/xml Name : example-test Execution ID : 624eedd443ed8485ae9289e2 Execution name: illegally-credible-mouse Test execution started Watch test execution until complete: $ kubectl testkube watch execution 624eedd443ed8485ae9289e2 Use following command to get test execution details: $ kubectl testkube get execution 624eedd443ed8485ae9289e2 Using Parameters and Arguments in Your Tests SoapUI lets you configure your test runs using different parameters. To see all available command line arguments, check the official SoapUI docs . To use parameters when working with Testkube, use the kubectl testkube run command with the --args parameter. An example would be: $ kubectl testkube run test -f example-test --args '-I -c \"Testkube TestCase\"' Type : soapui/xml Name : successful-test Execution ID : 625404e5a4cc6d2861193c60 Execution name: currently-amused-pug Getting pod logs Execution completed ================================ = = SOAPUI_HOME = /usr/local/SmartBear/SoapUI-5.7.0 = ================================ SoapUI 5 .7.0 TestCase Runner 08 :14:18,671 INFO [ DefaultSoapUICore ] Creating new settings at [ /root/soapui-settings.xml ] 08 :14:27,457 INFO [ PluginManager ] 0 plugins loaded in 11 ms 08 :14:27,459 INFO [ DefaultSoapUICore ] All plugins loaded 08 :14:37,509 INFO [ WsdlProject ] Loaded project from [ file:/tmp/test-content2412821894 ] 08 :14:37,579 INFO [ SoapUITestCaseRunner ] Running SoapUI tests in project [ Testkube project ] 08 :14:37,580 INFO [ SoapUITestCaseRunner ] Running TestCase [ Testkube TestCase ] 08 :14:37,653 INFO [ SoapUITestCaseRunner ] Running SoapUI testcase [ Testkube TestCase ] 08 :14:37,700 INFO [ SoapUITestCaseRunner ] running step [ REST Request ] 08 :14:41,816 INFO [ SoapUITestCaseRunner ] Assertion [ Contains ] has status VALID 08 :14:41,878 INFO [ SoapUITestCaseRunner ] Finished running SoapUI testcase [ Testkube TestCase ] , time taken: 866ms, status: FINISHED 08 :14:41,909 INFO [ SoapUITestCaseRunner ] TestCase [ Testkube TestCase ] finished with status [ FINISHED ] in 866ms . Use the following command to get test execution details: $ kubectl testkube get execution 625404e5a4cc6d2861193c60 Reports, Plugins and Extensions In order to use reports, add the plugins and extensions as described in the SoapUI docs . This is currently not supported by Testkube. If you are interested in using this feature, please create an issue in the Testkube repository .","title":"SoapUI"},{"location":"executor-soapui/#soapui-tests","text":"Check out our blog post to follow tutorial steps to Learn how to run functional tests in Kubernetes with SoapUI and Testkube. SoapUI is an open-source tool used for end-to-end testing of REST, SOAP and GraphQL APIs, as well as JMS, JDBC and other web services. Testkube supports the SoapUI executor implementation.","title":"SoapUI Tests"},{"location":"executor-soapui/#running-a-soapui-test","text":"In order to run a SoapUI test using Testkube, begin by creating a Testkube Test. An example of an exported SoapUI test looks the following: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <con:soapui-project xmlns:con= \"http://eviware.com/soapui/config\" id= \"68931eeb-521d-4870-972f-9d0f99c75cc2\" activeEnvironment= \"Default\" name= \"Testkube project\" resourceRoot= \"${projectDir}\" soapui-version= \"5.7.0\" abortOnError= \"false\" runType= \"SEQUENTIAL\" > <con:settings> <con:setting id= \"com.smartbear.swagger.ExportSwaggerAction$FormBase Path\" /> <con:setting id= \"com.smartbear.swagger.ExportSwaggerAction$FormTarget File\" /> <con:setting id= \"com.smartbear.swagger.ExportSwaggerAction$FormFormat\" > json </con:setting> <con:setting id= \"com.smartbear.swagger.ExportSwaggerAction$FormAPI Version\" > Swagger 2.0 </con:setting> <con:setting id= \"com.smartbear.swagger.ExportSwaggerAction$FormSwagger Version\" > Swagger 2.0 </con:setting> </con:settings> <con:interface xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:type= \"con:RestService\" id= \"4bcedf3f-ac64-4f45-9615-7d58b15b9ca1\" wadlVersion= \"http://wadl.dev.java.net/2009/02\" name= \"https://kubeshop.io\" type= \"rest\" > <con:settings /> <con:definitionCache type= \"TEXT\" rootPart= \"\" /> <con:endpoints> <con:endpoint> https://kubeshop.io </con:endpoint> </con:endpoints> <con:resource name= \"\" path= \"\" id= \"538412a5-540d-4772-aca8-2b19e456af77\" > <con:settings /> <con:parameters /> <con:method name= \"1\" id= \"fa5cf353-bafd-4aa1-9fa6-301d0d5c6e95\" method= \"GET\" > <con:settings /> <con:parameters /> <con:representation type= \"RESPONSE\" > <con:mediaType> text/html </con:mediaType> <con:status> 200 </con:status> <con:params /> <con:element> html </con:element> </con:representation> <con:representation type= \"RESPONSE\" > <con:mediaType> application/json </con:mediaType> <con:status> 200 </con:status> <con:params /> <con:element xmlns:pet= \"https://kubeshop.io/\" > pet:Response </con:element> </con:representation> <con:representation type= \"RESPONSE\" > <con:mediaType> text/html; charset=utf-8 </con:mediaType> <con:status> 200 </con:status> <con:params /> <con:element> html </con:element> </con:representation> <con:request name= \"Request 1\" id= \"e5ee1b97-e7a5-4fd0-9ecd-6671558f25bc\" mediaType= \"application/json\" > <con:settings> <con:setting id= \"com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers\" > &lt; xml-fragment/ &gt; </con:setting> </con:settings> <con:endpoint> https://kubeshop.io </con:endpoint> <con:request /> <con:originalUri> https://kubeshop.io/ </con:originalUri> <con:credentials> <con:authType> No Authorization </con:authType> </con:credentials> <con:jmsConfig JMSDeliveryMode= \"PERSISTENT\" /> <con:jmsPropertyConfig /> <con:parameters /> </con:request> </con:method> </con:resource> </con:interface> <con:testSuite id= \"d01755ab-653a-42e9-82ef-97ffea557480\" name= \"Testkube TestSuite\" > <con:settings /> <con:runType> SEQUENTIAL </con:runType> <con:testCase id= \"8803628b-cc8d-4aaa-bbba-e1bc878f202b\" failOnError= \"true\" failTestCaseOnErrors= \"true\" keepSession= \"false\" maxResults= \"0\" name= \"Kubeshop TestCase\" searchProperties= \"true\" > <con:settings /> <con:testStep type= \"restrequest\" name= \"1 - Request 1\" id= \"00e86b82-8ef2-483f-837b-7669bebe3c87\" > <con:settings /> <con:config xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" service= \"https://kubeshop.io\" resourcePath= \"\" methodName= \"1\" xsi:type= \"con:RestRequestStep\" > <con:restRequest name= \"1 - Request 1\" id= \"e5ee1b97-e7a5-4fd0-9ecd-6671558f25bc\" mediaType= \"application/json\" > <con:settings> <con:setting id= \"com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers\" > &lt; xml-fragment/ &gt; </con:setting> </con:settings> <con:endpoint> https://kubeshop.io </con:endpoint> <con:request /> <con:originalUri> https://kubeshop.io </con:originalUri> <con:assertion type= \"Valid HTTP Status Codes\" id= \"c88e07cf-dd80-4b11-b21d-7cad8474202b\" name= \"Valid HTTP Status Codes\" > <con:configuration> <codes> 200 </codes> </con:configuration> </con:assertion> <con:assertion type= \"Simple Contains\" id= \"7072dc46-6b93-43b4-b6bd-0464db7b249e\" name= \"Contains\" > <con:configuration> <token> testkube </token> <ignoreCase> true </ignoreCase> <useRegEx> false </useRegEx> </con:configuration> </con:assertion> <con:credentials> <con:authType> No Authorization </con:authType> </con:credentials> <con:jmsConfig JMSDeliveryMode= \"PERSISTENT\" /> <con:jmsPropertyConfig /> <con:parameters /> </con:restRequest> </con:config> </con:testStep> <con:properties /> </con:testCase> <con:testCase id= \"4c0fc01b-16db-41e9-9844-d4c2a88d27f2\" failOnError= \"true\" failTestCaseOnErrors= \"true\" keepSession= \"false\" maxResults= \"0\" name= \"Testkube TestCase\" searchProperties= \"true\" > <con:settings /> <con:testStep type= \"restrequest\" name= \"REST Request\" id= \"e1be7e01-5d4d-424e-b2f9-7daf84aaafa9\" > <con:settings /> <con:config xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" service= \"https://kubeshop.io\" methodName= \"1\" resourcePath= \"\" xsi:type= \"con:RestRequestStep\" > <con:restRequest name= \"REST Request\" id= \"191f16b4-cb04-4ffa-b8f9-da0e788c8262\" mediaType= \"application/json\" > <con:settings> <con:setting id= \"com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers\" > &lt; xml-fragment/ &gt; </con:setting> </con:settings> <con:encoding> UTF-8 </con:encoding> <con:endpoint> https://kubeshop.github.io/testkube/ </con:endpoint> <con:request /> <con:originalUri> https://kubeshop.io </con:originalUri> <con:assertion type= \"Simple Contains\" id= \"d9497693-01e2-4e3e-8ce5-5a292f9b6e41\" name= \"Contains\" > <con:configuration> <token> kubectl </token> <ignoreCase> false </ignoreCase> <useRegEx> false </useRegEx> </con:configuration> </con:assertion> <con:credentials> <con:authType> No Authorization </con:authType> </con:credentials> <con:jmsConfig JMSDeliveryMode= \"PERSISTENT\" /> <con:jmsPropertyConfig /> <con:parameters /> </con:restRequest> </con:config> </con:testStep> <con:properties /> </con:testCase> <con:properties /> </con:testSuite> <con:properties /> <con:wssContainer /> <con:oAuth2ProfileContainer /> <con:oAuth1ProfileContainer /> <con:sensitiveInformation /> </con:soapui-project>","title":"Running a SoapUI Test"},{"location":"executor-soapui/#using-files-as-input","text":"Testkube and the SoapUI executor accept a project file as input. $ kubectl testkube create test --file example-project.xml --type soapui/xml --name example-test Test created / example-test \ud83e\udd47","title":"Using Files as Input"},{"location":"executor-soapui/#using-strings-as-input","text":"$ cat example-project.xml | kubectl testkube create test --type soapui/xml --name example-test-string Test created / example-test-string \ud83e\udd47","title":"Using Strings as Input"},{"location":"executor-soapui/#running-the-tests","text":"To run the created test, use: $ kubectl testkube run test example-test Type : soapui/xml Name : example-test Execution ID : 624eedd443ed8485ae9289e2 Execution name: illegally-credible-mouse Test execution started Watch test execution until complete: $ kubectl testkube watch execution 624eedd443ed8485ae9289e2 Use following command to get test execution details: $ kubectl testkube get execution 624eedd443ed8485ae9289e2","title":"Running the Tests"},{"location":"executor-soapui/#using-parameters-and-arguments-in-your-tests","text":"SoapUI lets you configure your test runs using different parameters. To see all available command line arguments, check the official SoapUI docs . To use parameters when working with Testkube, use the kubectl testkube run command with the --args parameter. An example would be: $ kubectl testkube run test -f example-test --args '-I -c \"Testkube TestCase\"' Type : soapui/xml Name : successful-test Execution ID : 625404e5a4cc6d2861193c60 Execution name: currently-amused-pug Getting pod logs Execution completed ================================ = = SOAPUI_HOME = /usr/local/SmartBear/SoapUI-5.7.0 = ================================ SoapUI 5 .7.0 TestCase Runner 08 :14:18,671 INFO [ DefaultSoapUICore ] Creating new settings at [ /root/soapui-settings.xml ] 08 :14:27,457 INFO [ PluginManager ] 0 plugins loaded in 11 ms 08 :14:27,459 INFO [ DefaultSoapUICore ] All plugins loaded 08 :14:37,509 INFO [ WsdlProject ] Loaded project from [ file:/tmp/test-content2412821894 ] 08 :14:37,579 INFO [ SoapUITestCaseRunner ] Running SoapUI tests in project [ Testkube project ] 08 :14:37,580 INFO [ SoapUITestCaseRunner ] Running TestCase [ Testkube TestCase ] 08 :14:37,653 INFO [ SoapUITestCaseRunner ] Running SoapUI testcase [ Testkube TestCase ] 08 :14:37,700 INFO [ SoapUITestCaseRunner ] running step [ REST Request ] 08 :14:41,816 INFO [ SoapUITestCaseRunner ] Assertion [ Contains ] has status VALID 08 :14:41,878 INFO [ SoapUITestCaseRunner ] Finished running SoapUI testcase [ Testkube TestCase ] , time taken: 866ms, status: FINISHED 08 :14:41,909 INFO [ SoapUITestCaseRunner ] TestCase [ Testkube TestCase ] finished with status [ FINISHED ] in 866ms . Use the following command to get test execution details: $ kubectl testkube get execution 625404e5a4cc6d2861193c60","title":"Using Parameters and Arguments in Your Tests"},{"location":"executor-soapui/#reports-plugins-and-extensions","text":"In order to use reports, add the plugins and extensions as described in the SoapUI docs . This is currently not supported by Testkube. If you are interested in using this feature, please create an issue in the Testkube repository .","title":"Reports, Plugins and Extensions"},{"location":"generate-test-crds/","text":"File Naming Convention for Test CRD Generation We support the following file naming convention for Postman files to support multiple environment files: Test Filename Convention .postman_collection.json - where Test name should be reused for the environment files. For example, mytest.postman_collection.json. Test Environment File Naming Convention . .postman_environment.json - where Test name is reused from the test files and Test env is pointing to a particular testing environment. For example, mytest.prod.postman_environment.json. Test Secret Environment File Naming Convention . .postman_secret_environment.json - where Test name is reused from test files and Test env is pointing to particular testing environment. For example, mytest.prod.postman_secret_environment.json. It is expected that each variable value in a secret environment file is provided in the form of secret-name=secret-key . In this case, it will be added to a list of Test secret variables. For example, { \"id\" : \"f8a038bf-3766-4424-94ee-381a69f55b9a\" , \"name\" : \"Testing secret env\" , \"values\" : [ { \"key\" : \"secvar1\" , \"value\" : \"var-secrets=homepage\" , \"enabled\" : true } , { \"key\" : \"secvar2\" , \"value\" : \"var-secrets=apikey\" , \"enabled\" : false } ] , \"_postman_variable_scope\" : \"environment\" , \"_postman_exported_at\" : \"2022-09-04T04:47:42.590Z\" , \"_postman_exported_using\" : \"Postman/9.14.14\" } will add this section to Test CRD (only secvar1, because secvar2 is disabled): executionRequest: variables: - name: secvar1 type: secret secretRef: name: var-secrets key: homepage","title":"Test CRD generation"},{"location":"generate-test-crds/#file-naming-convention-for-test-crd-generation","text":"We support the following file naming convention for Postman files to support multiple environment files:","title":"File Naming Convention for Test CRD Generation"},{"location":"generate-test-crds/#test-filename-convention","text":".postman_collection.json - where Test name should be reused for the environment files. For example, mytest.postman_collection.json.","title":"Test Filename Convention"},{"location":"generate-test-crds/#test-environment-file-naming-convention","text":". .postman_environment.json - where Test name is reused from the test files and Test env is pointing to a particular testing environment. For example, mytest.prod.postman_environment.json.","title":"Test Environment File Naming Convention"},{"location":"generate-test-crds/#test-secret-environment-file-naming-convention","text":". .postman_secret_environment.json - where Test name is reused from test files and Test env is pointing to particular testing environment. For example, mytest.prod.postman_secret_environment.json. It is expected that each variable value in a secret environment file is provided in the form of secret-name=secret-key . In this case, it will be added to a list of Test secret variables. For example, { \"id\" : \"f8a038bf-3766-4424-94ee-381a69f55b9a\" , \"name\" : \"Testing secret env\" , \"values\" : [ { \"key\" : \"secvar1\" , \"value\" : \"var-secrets=homepage\" , \"enabled\" : true } , { \"key\" : \"secvar2\" , \"value\" : \"var-secrets=apikey\" , \"enabled\" : false } ] , \"_postman_variable_scope\" : \"environment\" , \"_postman_exported_at\" : \"2022-09-04T04:47:42.590Z\" , \"_postman_exported_using\" : \"Postman/9.14.14\" } will add this section to Test CRD (only secvar1, because secvar2 is disabled): executionRequest: variables: - name: secvar1 type: secret secretRef: name: var-secrets key: homepage","title":"Test Secret Environment File Naming Convention"},{"location":"getting-started/","text":"Getting Started Please follow the install steps for the first installation of Testkube. Getting Help kubectl testkube --help # or any other command kubectl testkube get --help Defining Tests After installing, you will need to add Tests to your cluster, which are created as a Custom Resource in Kubernetes (access to Kubernetes cluster is required). This document provides examples for using Postman collections and Cypress executors. Please visit the Test Types section of the documentation to read about additional types of implementations. If you don't want to create Custom Resources \"by hand\", we have a little helper for this: Creating Postman Collections Based Tests First, let's export a Postman collection from Postman UI (the file content should look similar to the one below): cat <<EOF > my_postman_collection.json { \"info\": { \"_postman_id\": \"8af42c21-3e31-49c1-8b27-d6e60623a180\", \"name\": \"Kubeshop\", \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\" }, \"item\": [ { \"name\": \"Home\", \"event\": [ { \"listen\": \"test\", \"script\": { \"exec\": [ \"pm.test(\\\"Body matches string\\\", function () {\", \" pm.expect(pm.response.text()).to.include(\\\"K8s Accelerator\\\");\", \"});\" ], \"type\": \"text/javascript\" } } ], \"request\": { \"method\": \"GET\", \"header\": [], \"url\": { \"raw\": \"https://kubeshop.io/\", \"protocol\": \"https\", \"host\": [ \"kubeshop\", \"io\" ], \"path\": [ \"\" ] } }, \"response\": [] }, { \"name\": \"Team\", \"event\": [ { \"listen\": \"test\", \"script\": { \"exec\": [ \"pm.test(\\\"Status code is 200\\\", function () {\", \" pm.response.to.have.status(200);\", \"});\" ], \"type\": \"text/javascript\" } } ], \"request\": { \"method\": \"GET\", \"header\": [], \"url\": { \"raw\": \"https://kubeshop.io/our-team\", \"protocol\": \"https\", \"host\": [ \"kubeshop\", \"io\" ], \"path\": [ \"our-team\" ] } }, \"response\": [] } ] } EOF kubectl testkube create test --file my_postman_collection.json --type postman/collection --name my-test-name Note : This is just an example of how it works. For further details you can visit the Postman documentation . Creating Cypress Tests Cypress is in the form of projects. To run them we need to pass the whole directory structure with the npm based dependencies. You can create a new test with Testkube: kubectl testkube create test --git-uri https://github.com/kubeshop/testkube-executor-cypress.git --git-branch main --git-path examples --name my-test-name --type cypress/project Where: git-uri is the git uri where testkube will get the Cypress project. git-branch is which branch should be checked out (by default - the main branch will be used). git-path is which path of the repository should be checked out (testkube is doing a partial git checkout so it will be fast even for very big monorepos). name - is the unique Script Custom Resource name. type - cypress/project - for Cypress based project test structure. Starting a New Test Execution When our test is defined as a Custom Resource we can now run it: kubectl testkube run test my-test-name # ... some test run output ... Use the following command to get test execution details: kubectl testkube get execution 611b6da38cd74034e7c9d408 Or watch for completion with kubectl testkube watch execution 611b6da38cd74034e7c9d408 Getting Execution Details After the test execution is complete, access the test details by running the tests execution command: kubectl testkube get execution 6103a45b7e18c4ea04883866 #....some execution details.... Getting Available Scripts To run a test execution, you'll need to know the test name: kubectl testkube get tests Output: +----------------------+--------------------+ | NAME | TYPE | +----------------------+--------------------+ | create-001-test | postman/collection | | envs1 | postman/collection | | test-kubeshop | postman/collection | | test-kubeshop-failed | postman/collection | | test-postman-script | postman/collection | +----------------------+--------------------+ Getting Available Executions kubectl testkube get executions TEST_NAME Output: +------------+--------------------+--------------------------+---------------------------+----------+ | TEST | TYPE | EXECUTION ID | EXECUTION NAME | STATUS | +------------+--------------------+--------------------------+---------------------------+----------+ | parms-test | postman/collection | 611a5a1a910ca385751eb2c6 | pt1 | success | | parms-test | postman/collection | 611a5a40910ca385751eb2c8 | pt2 | error | | parms-test | postman/collection | 611a5b6d910ca385751eb2ca | forcibly-frank-panda | error | | parms-test | postman/collection | 611a5b83910ca385751eb2cc | slightly-merry-jennet | error | | parms-test | postman/collection | 611b6d6c8cd74034e7c9d406 | frequently-expert-terrier | error | | parms-test | postman/collection | 611b6da38cd74034e7c9d408 | violently-fresh-elephant | error | +------------+--------------------+--------------------------+---------------------------+----------+ Changing the Output Format For lists and details, you can use different output formats via the --output flag. The following formats are currently supported: RAW - Raw output from the given executor (e.g., for Postman collection, it's terminal text with colors and tables). JSON - Test run data are encoded in JSON. GO - For go-template formatting (like in Docker and Kubernetes), you'll need to add the --go-template flag with a custom format. The default is {{ . | printf(\"%+v\") }} . This will help you check available fields. There plans to support other output formats like junit etc. If there is something specific that you need, please reach out to us. Deleting a Test The command to delete a test is kubectl testkube delete tests TEST_NAME . The --all flag can be used to delete all.","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"Please follow the install steps for the first installation of Testkube.","title":"Getting Started"},{"location":"getting-started/#getting-help","text":"kubectl testkube --help # or any other command kubectl testkube get --help","title":"Getting Help"},{"location":"getting-started/#defining-tests","text":"After installing, you will need to add Tests to your cluster, which are created as a Custom Resource in Kubernetes (access to Kubernetes cluster is required). This document provides examples for using Postman collections and Cypress executors. Please visit the Test Types section of the documentation to read about additional types of implementations. If you don't want to create Custom Resources \"by hand\", we have a little helper for this:","title":"Defining Tests"},{"location":"getting-started/#creating-postman-collections-based-tests","text":"First, let's export a Postman collection from Postman UI (the file content should look similar to the one below): cat <<EOF > my_postman_collection.json { \"info\": { \"_postman_id\": \"8af42c21-3e31-49c1-8b27-d6e60623a180\", \"name\": \"Kubeshop\", \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\" }, \"item\": [ { \"name\": \"Home\", \"event\": [ { \"listen\": \"test\", \"script\": { \"exec\": [ \"pm.test(\\\"Body matches string\\\", function () {\", \" pm.expect(pm.response.text()).to.include(\\\"K8s Accelerator\\\");\", \"});\" ], \"type\": \"text/javascript\" } } ], \"request\": { \"method\": \"GET\", \"header\": [], \"url\": { \"raw\": \"https://kubeshop.io/\", \"protocol\": \"https\", \"host\": [ \"kubeshop\", \"io\" ], \"path\": [ \"\" ] } }, \"response\": [] }, { \"name\": \"Team\", \"event\": [ { \"listen\": \"test\", \"script\": { \"exec\": [ \"pm.test(\\\"Status code is 200\\\", function () {\", \" pm.response.to.have.status(200);\", \"});\" ], \"type\": \"text/javascript\" } } ], \"request\": { \"method\": \"GET\", \"header\": [], \"url\": { \"raw\": \"https://kubeshop.io/our-team\", \"protocol\": \"https\", \"host\": [ \"kubeshop\", \"io\" ], \"path\": [ \"our-team\" ] } }, \"response\": [] } ] } EOF kubectl testkube create test --file my_postman_collection.json --type postman/collection --name my-test-name Note : This is just an example of how it works. For further details you can visit the Postman documentation .","title":"Creating Postman Collections Based Tests"},{"location":"getting-started/#creating-cypress-tests","text":"Cypress is in the form of projects. To run them we need to pass the whole directory structure with the npm based dependencies. You can create a new test with Testkube: kubectl testkube create test --git-uri https://github.com/kubeshop/testkube-executor-cypress.git --git-branch main --git-path examples --name my-test-name --type cypress/project Where: git-uri is the git uri where testkube will get the Cypress project. git-branch is which branch should be checked out (by default - the main branch will be used). git-path is which path of the repository should be checked out (testkube is doing a partial git checkout so it will be fast even for very big monorepos). name - is the unique Script Custom Resource name. type - cypress/project - for Cypress based project test structure.","title":"Creating Cypress Tests"},{"location":"getting-started/#starting-a-new-test-execution","text":"When our test is defined as a Custom Resource we can now run it: kubectl testkube run test my-test-name # ... some test run output ... Use the following command to get test execution details: kubectl testkube get execution 611b6da38cd74034e7c9d408 Or watch for completion with kubectl testkube watch execution 611b6da38cd74034e7c9d408","title":"Starting a New Test Execution"},{"location":"getting-started/#getting-execution-details","text":"After the test execution is complete, access the test details by running the tests execution command: kubectl testkube get execution 6103a45b7e18c4ea04883866 #....some execution details....","title":"Getting Execution Details"},{"location":"getting-started/#getting-available-scripts","text":"To run a test execution, you'll need to know the test name: kubectl testkube get tests Output: +----------------------+--------------------+ | NAME | TYPE | +----------------------+--------------------+ | create-001-test | postman/collection | | envs1 | postman/collection | | test-kubeshop | postman/collection | | test-kubeshop-failed | postman/collection | | test-postman-script | postman/collection | +----------------------+--------------------+","title":"Getting Available Scripts"},{"location":"getting-started/#getting-available-executions","text":"kubectl testkube get executions TEST_NAME Output: +------------+--------------------+--------------------------+---------------------------+----------+ | TEST | TYPE | EXECUTION ID | EXECUTION NAME | STATUS | +------------+--------------------+--------------------------+---------------------------+----------+ | parms-test | postman/collection | 611a5a1a910ca385751eb2c6 | pt1 | success | | parms-test | postman/collection | 611a5a40910ca385751eb2c8 | pt2 | error | | parms-test | postman/collection | 611a5b6d910ca385751eb2ca | forcibly-frank-panda | error | | parms-test | postman/collection | 611a5b83910ca385751eb2cc | slightly-merry-jennet | error | | parms-test | postman/collection | 611b6d6c8cd74034e7c9d406 | frequently-expert-terrier | error | | parms-test | postman/collection | 611b6da38cd74034e7c9d408 | violently-fresh-elephant | error | +------------+--------------------+--------------------------+---------------------------+----------+","title":"Getting Available Executions"},{"location":"getting-started/#changing-the-output-format","text":"For lists and details, you can use different output formats via the --output flag. The following formats are currently supported: RAW - Raw output from the given executor (e.g., for Postman collection, it's terminal text with colors and tables). JSON - Test run data are encoded in JSON. GO - For go-template formatting (like in Docker and Kubernetes), you'll need to add the --go-template flag with a custom format. The default is {{ . | printf(\"%+v\") }} . This will help you check available fields. There plans to support other output formats like junit etc. If there is something specific that you need, please reach out to us.","title":"Changing the Output Format"},{"location":"getting-started/#deleting-a-test","text":"The command to delete a test is kubectl testkube delete tests TEST_NAME . The --all flag can be used to delete all.","title":"Deleting a Test"},{"location":"installing/","text":"Installation Steps To get Testkube up and running you need to: Install the Testkube CLI. Use HELM or the Testkube CLI to to install Testkube Server components in your cluster. (optional) Configure Testkube's Dashboard UI Ingress for your ingress-controller, if needed. Watch the full installation video from our product experts: Testkube Installation Video . Installing the Testkube CLI Package dependencies: - Kubectl - Helm Installing the Testkube CLI with Chocolatey and Homebrew will automatically install these dependencies if they are not present. For Linux-based systems please install them manually in advance. From Scripts To install on Linux or MacOS, run bash < < ( curl -sSLf https://kubeshop.github.io/testkube/install.sh ) Through Package Managers Homebrew (MacOS) You can install Testkube from Homebrew : brew install testkube Or directly from our tap. The Homebrew mantainers take a few days or a week to approve each one of our releases so you can use our tap to make sure you always have the most recent release. brew tap kubeshop/homebrew-testkube brew install kubeshop/testkube/testkube Chocolatey (Windows) Using Chocolatey : choco source add --name = testkube_repo --source = http://chocolatey.testkube.io/chocolatey choco install testkube APT (Debian/Ubuntu) Download our public GPG key, and add it to the trusted keys: wget -qO - https://repo.testkube.io/key.pub | sudo apt-key add - Add our repository to your apt sources: echo \"deb https://repo.testkube.io/linux linux main\" | sudo tee -a /etc/apt/sources.list Make sure to get the updates: sudo apt-get update Install Testkube: sudo apt-get install -y testkube Manual Download If you don't want to use scripts or package managers you can always do a manual install: Download the binary for the version and platform of your choice here Unpack it. For example, in Linux use (tar -zxvf testkube_1.5.1_Linux_arm64.tar.gz) Move it to a location in the PATH. For example, mv testkube_0.6.5_Linux_arm64/kubectl-testkube /usr/local/bin/kubectl-testkube . For Windows, you will need to unpack the binary and add it to the %PATH% as well. If you use a package manager that we don't support, please let us know here #161 . Testkube Server Components To deploy Testkube to your K8s cluster you will need the following packages installed: - Kubectl docs - Helm docs Using Testkube's CLI to Deploy the Server Components The Testkube CLI provides a command to easly deploy the Testkube server components to your cluster. Run: testkube init note: you must have your KUBECONFIG pointing to the desired location of the installation. The above command will install the following components in your Kubernetes cluster: Testkube API testkube namespace CRDs for Tests, TestSuites, Executors MongoDB Minio - default (can be disabled with --no-minio flag if you want to use S3 buckets) Dashboard - default (can be disabled with --no-dasboard flag) Confirm that Testkube is running: kubectl get all -n testkube Output: NAME READY STATUS RESTARTS AGE pod/cert-manager-847544bbd-fw2h8 1 /1 Running 0 4m51s pod/cert-manager-cainjector-5c747645bf-qgftx 1 /1 Running 0 4m51s pod/cert-manager-webhook-77b946cb6d-dl6gb 1 /1 Running 0 4m51s pod/testkube-dashboard-748cbcbb66-q8zzp 1 /1 Running 0 4m51s pod/testkube-api-server-546777c9f7-7g4kg 1 /1 Running 0 4m51s pod/testkube-mongodb-5d95f44fdd-cxqz6 1 /1 Running 0 4m51s pod/testkube-minio-testkube-64cd475b94-562hz 1 /1 Running 0 4m51s NAME TYPE CLUSTER-IP EXTERNAL-IP PORT ( S ) AGE service/cert-manager ClusterIP 10 .106.81.214 <none> 9402 /TCP 2d20h service/cert-manager-webhook ClusterIP 10 .104.228.254 <none> 443 /TCP 2d20h service/testkube-minio-service-testkube NodePort 10 .43.121.107 <none> 9000 :31222/TCP,9090:32002/TCP,9443:32586/TCP 4m51s service/testkube-api-server NodePort 10 .43.66.13 <none> 8088 :32203/TCP 4m51s service/testkube-mongodb ClusterIP 10 .43.126.230 <none> 27017 /TCP 4m51s service/testkube-dashboard NodePort 10 .43.136.34 <none> 80 :31991/TCP 4m51s NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/cert-manager 1 /1 1 1 4m51s deployment.apps/cert-manager-cainjector 1 /1 1 1 4m51s deployment.apps/cert-manager-webhook 1 /1 1 1 4m51s deployment.apps/testkube-dashboard 1 /1 1 1 4m51s deployment.apps/testkube-api-server 1 /1 1 1 4m51s deployment.apps/testkube-mongodb 1 /1 1 1 4m51s deployment.apps/testkube-minio-testkube 1 /1 1 1 4m51s NAME DESIRED CURRENT READY AGE replicaset.apps/cert-manager-847544bbd 1 1 1 4m51s replicaset.apps/cert-manager-cainjector-5c747645bf 1 1 1 4m51s replicaset.apps/cert-manager-webhook-77b946cb6d 1 1 1 4m51s replicaset.apps/testkube-dashboard-748cbcbb66 1 1 1 4m51s replicaset.apps/testkube-api-server-546777c9f7 1 1 1 4m51s replicaset.apps/testkube-mongodb-5d95f44fdd 1 1 1 4m51s replicaset.apps/testkube-minio-testkube-64cd475b94 1 1 1 4m51s By default Testkube is installed in the testkube namespace. Using HELM to Deploy the Server Components Add the Kubeshop Helm repository as follows: helm repo add testkube https://kubeshop.github.io/helm-charts If this repo already exists, run helm repo update to retrieve the latest versions of the packages. You can then run helm search repo testkube to see the charts. To install the testkube chart: helm install --create-namespace my-testkube testkube/testkube Please note that, by default, the namespace for the intstallation will be testkube . If the testkube namespace does not exist, it will be created for you. If you wish to install into a different namespace, please use following command: helm install --namespace namespace_name my-testkube testkube/testkube To uninstall the testkube chart if it was installed into default namespace: helm delete my-testkube testkube/testkube And from a namespace other than testkube : helm delete --namespace namespace_name my-testkube testkube/testkube Helm Properties The following Helm defaults are used in the testkube chart: Parameter Is optional Default mongodb.auth.enabled yes false mongodb.service.port yes \"27017\" mongodb.service.portName yes \"mongodb\" mongodb.service.nodePort yes true mongodb.service.clusterIP yes \"\" mongodb.nameOverride yes \"mongodb\" mongodb.fullnameOverride yes \"testkube-mongodb\" testkube-api.image.repository yes \"kubeshop/testkube-api-server\" testkube-api.image.pullPolicy yes \"Always\" testkube-api.image.tag yes \"latest\" testkube-api.service.type yes \"ClusterIP\" testkube-api.service.port yes 8088 testkube-api.mongoDSN yes \"mongodb://testkube-mongodb:27017\" testkube-api.telemetryEnabled yes true testkube-api.storage.endpoint yes testkube-minio-service-testkube:9000 testkube-api.storage.accessKeyId yes minio testkube-api.storage.accessKey yes minio123 testkube-api.storage.scrapperEnabled yes true testkube-api.slackToken yes \"\" testkube-api.slackChannelId yes \"\" For more configuration parameters of MongoDB chart please visit: https://github.com/bitnami/charts/tree/master/bitnami/mongodb#parameters Remove Testkube Server Components Using Helm: helm delete testkube Using Testkube's CLI: testkube purge","title":"Installation"},{"location":"installing/#installation-steps","text":"To get Testkube up and running you need to: Install the Testkube CLI. Use HELM or the Testkube CLI to to install Testkube Server components in your cluster. (optional) Configure Testkube's Dashboard UI Ingress for your ingress-controller, if needed. Watch the full installation video from our product experts: Testkube Installation Video .","title":"Installation Steps"},{"location":"installing/#installing-the-testkube-cli","text":"Package dependencies: - Kubectl - Helm Installing the Testkube CLI with Chocolatey and Homebrew will automatically install these dependencies if they are not present. For Linux-based systems please install them manually in advance.","title":"Installing the Testkube CLI"},{"location":"installing/#from-scripts","text":"To install on Linux or MacOS, run bash < < ( curl -sSLf https://kubeshop.github.io/testkube/install.sh )","title":"From Scripts"},{"location":"installing/#through-package-managers","text":"","title":"Through Package Managers"},{"location":"installing/#homebrew-macos","text":"You can install Testkube from Homebrew : brew install testkube Or directly from our tap. The Homebrew mantainers take a few days or a week to approve each one of our releases so you can use our tap to make sure you always have the most recent release. brew tap kubeshop/homebrew-testkube brew install kubeshop/testkube/testkube","title":"Homebrew (MacOS)"},{"location":"installing/#chocolatey-windows","text":"Using Chocolatey : choco source add --name = testkube_repo --source = http://chocolatey.testkube.io/chocolatey choco install testkube","title":"Chocolatey (Windows)"},{"location":"installing/#apt-debianubuntu","text":"Download our public GPG key, and add it to the trusted keys: wget -qO - https://repo.testkube.io/key.pub | sudo apt-key add - Add our repository to your apt sources: echo \"deb https://repo.testkube.io/linux linux main\" | sudo tee -a /etc/apt/sources.list Make sure to get the updates: sudo apt-get update Install Testkube: sudo apt-get install -y testkube","title":"APT (Debian/Ubuntu)"},{"location":"installing/#manual-download","text":"If you don't want to use scripts or package managers you can always do a manual install: Download the binary for the version and platform of your choice here Unpack it. For example, in Linux use (tar -zxvf testkube_1.5.1_Linux_arm64.tar.gz) Move it to a location in the PATH. For example, mv testkube_0.6.5_Linux_arm64/kubectl-testkube /usr/local/bin/kubectl-testkube . For Windows, you will need to unpack the binary and add it to the %PATH% as well. If you use a package manager that we don't support, please let us know here #161 .","title":"Manual Download"},{"location":"installing/#testkube-server-components","text":"To deploy Testkube to your K8s cluster you will need the following packages installed: - Kubectl docs - Helm docs","title":"Testkube Server Components"},{"location":"installing/#using-testkubes-cli-to-deploy-the-server-components","text":"The Testkube CLI provides a command to easly deploy the Testkube server components to your cluster. Run: testkube init note: you must have your KUBECONFIG pointing to the desired location of the installation. The above command will install the following components in your Kubernetes cluster: Testkube API testkube namespace CRDs for Tests, TestSuites, Executors MongoDB Minio - default (can be disabled with --no-minio flag if you want to use S3 buckets) Dashboard - default (can be disabled with --no-dasboard flag) Confirm that Testkube is running: kubectl get all -n testkube Output: NAME READY STATUS RESTARTS AGE pod/cert-manager-847544bbd-fw2h8 1 /1 Running 0 4m51s pod/cert-manager-cainjector-5c747645bf-qgftx 1 /1 Running 0 4m51s pod/cert-manager-webhook-77b946cb6d-dl6gb 1 /1 Running 0 4m51s pod/testkube-dashboard-748cbcbb66-q8zzp 1 /1 Running 0 4m51s pod/testkube-api-server-546777c9f7-7g4kg 1 /1 Running 0 4m51s pod/testkube-mongodb-5d95f44fdd-cxqz6 1 /1 Running 0 4m51s pod/testkube-minio-testkube-64cd475b94-562hz 1 /1 Running 0 4m51s NAME TYPE CLUSTER-IP EXTERNAL-IP PORT ( S ) AGE service/cert-manager ClusterIP 10 .106.81.214 <none> 9402 /TCP 2d20h service/cert-manager-webhook ClusterIP 10 .104.228.254 <none> 443 /TCP 2d20h service/testkube-minio-service-testkube NodePort 10 .43.121.107 <none> 9000 :31222/TCP,9090:32002/TCP,9443:32586/TCP 4m51s service/testkube-api-server NodePort 10 .43.66.13 <none> 8088 :32203/TCP 4m51s service/testkube-mongodb ClusterIP 10 .43.126.230 <none> 27017 /TCP 4m51s service/testkube-dashboard NodePort 10 .43.136.34 <none> 80 :31991/TCP 4m51s NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/cert-manager 1 /1 1 1 4m51s deployment.apps/cert-manager-cainjector 1 /1 1 1 4m51s deployment.apps/cert-manager-webhook 1 /1 1 1 4m51s deployment.apps/testkube-dashboard 1 /1 1 1 4m51s deployment.apps/testkube-api-server 1 /1 1 1 4m51s deployment.apps/testkube-mongodb 1 /1 1 1 4m51s deployment.apps/testkube-minio-testkube 1 /1 1 1 4m51s NAME DESIRED CURRENT READY AGE replicaset.apps/cert-manager-847544bbd 1 1 1 4m51s replicaset.apps/cert-manager-cainjector-5c747645bf 1 1 1 4m51s replicaset.apps/cert-manager-webhook-77b946cb6d 1 1 1 4m51s replicaset.apps/testkube-dashboard-748cbcbb66 1 1 1 4m51s replicaset.apps/testkube-api-server-546777c9f7 1 1 1 4m51s replicaset.apps/testkube-mongodb-5d95f44fdd 1 1 1 4m51s replicaset.apps/testkube-minio-testkube-64cd475b94 1 1 1 4m51s By default Testkube is installed in the testkube namespace.","title":"Using Testkube's CLI to Deploy the Server Components"},{"location":"installing/#using-helm-to-deploy-the-server-components","text":"Add the Kubeshop Helm repository as follows: helm repo add testkube https://kubeshop.github.io/helm-charts If this repo already exists, run helm repo update to retrieve the latest versions of the packages. You can then run helm search repo testkube to see the charts. To install the testkube chart: helm install --create-namespace my-testkube testkube/testkube Please note that, by default, the namespace for the intstallation will be testkube . If the testkube namespace does not exist, it will be created for you. If you wish to install into a different namespace, please use following command: helm install --namespace namespace_name my-testkube testkube/testkube To uninstall the testkube chart if it was installed into default namespace: helm delete my-testkube testkube/testkube And from a namespace other than testkube : helm delete --namespace namespace_name my-testkube testkube/testkube","title":"Using HELM to Deploy the Server Components"},{"location":"installing/#helm-properties","text":"The following Helm defaults are used in the testkube chart: Parameter Is optional Default mongodb.auth.enabled yes false mongodb.service.port yes \"27017\" mongodb.service.portName yes \"mongodb\" mongodb.service.nodePort yes true mongodb.service.clusterIP yes \"\" mongodb.nameOverride yes \"mongodb\" mongodb.fullnameOverride yes \"testkube-mongodb\" testkube-api.image.repository yes \"kubeshop/testkube-api-server\" testkube-api.image.pullPolicy yes \"Always\" testkube-api.image.tag yes \"latest\" testkube-api.service.type yes \"ClusterIP\" testkube-api.service.port yes 8088 testkube-api.mongoDSN yes \"mongodb://testkube-mongodb:27017\" testkube-api.telemetryEnabled yes true testkube-api.storage.endpoint yes testkube-minio-service-testkube:9000 testkube-api.storage.accessKeyId yes minio testkube-api.storage.accessKey yes minio123 testkube-api.storage.scrapperEnabled yes true testkube-api.slackToken yes \"\" testkube-api.slackChannelId yes \"\" For more configuration parameters of MongoDB chart please visit: https://github.com/bitnami/charts/tree/master/bitnami/mongodb#parameters","title":"Helm Properties"},{"location":"installing/#remove-testkube-server-components","text":"","title":"Remove Testkube Server Components"},{"location":"installing/#using-helm","text":"helm delete testkube","title":"Using Helm:"},{"location":"installing/#using-testkubes-cli","text":"testkube purge","title":"Using Testkube's CLI:"},{"location":"metrics/","text":"Metrics The Testkube API Server exposes a /metrics endpoint that can be consumed by Prometheus, Grafana, etc. Currently, the following metrics are exposed: testkube_test_executions_count - The total number of test executions. testkube_testsuite_executions_count - The total number of test suite executions. testkube_test_creations_count - The total number of tests created by type events. testkube_testsuite_creations_count - The total number of test suites created events. testkube_test_updates_count - The total number of tests updated by type events. testkube_testsuite_updates_count - The total number of test suites updated events. testkube_test_aborts_count - The total number of tests aborted by type events. Installation If a Prometheus operator is not installed, please follow the steps here: https://grafana.com/docs/grafana-cloud/quickstart/prometheus_operator/ . Then, add a ServiceMonitor custom resource to your cluster which will scrape metrics from our Testkube API server: apiVersion : monitoring.coreos.com/v1 kind : ServiceMonitor metadata : name : testkube-api-server labels : app : prometheus spec : endpoints : - interval : 10s port : http selector : matchLabels : app.kubernetes.io/name : api-server If you're installing Testkube manually with our Helm chart, you can pass the prometheus.enabled value to the install command. Grafana Dashboard To use the Grafana dashboard, import this JSON definition: https://github.com/kubeshop/testkube/blob/main/assets/grafana-dasboard.json","title":"Metrics"},{"location":"metrics/#metrics","text":"The Testkube API Server exposes a /metrics endpoint that can be consumed by Prometheus, Grafana, etc. Currently, the following metrics are exposed: testkube_test_executions_count - The total number of test executions. testkube_testsuite_executions_count - The total number of test suite executions. testkube_test_creations_count - The total number of tests created by type events. testkube_testsuite_creations_count - The total number of test suites created events. testkube_test_updates_count - The total number of tests updated by type events. testkube_testsuite_updates_count - The total number of test suites updated events. testkube_test_aborts_count - The total number of tests aborted by type events.","title":"Metrics"},{"location":"metrics/#installation","text":"If a Prometheus operator is not installed, please follow the steps here: https://grafana.com/docs/grafana-cloud/quickstart/prometheus_operator/ . Then, add a ServiceMonitor custom resource to your cluster which will scrape metrics from our Testkube API server: apiVersion : monitoring.coreos.com/v1 kind : ServiceMonitor metadata : name : testkube-api-server labels : app : prometheus spec : endpoints : - interval : 10s port : http selector : matchLabels : app.kubernetes.io/name : api-server If you're installing Testkube manually with our Helm chart, you can pass the prometheus.enabled value to the install command.","title":"Installation"},{"location":"metrics/#grafana-dashboard","text":"To use the Grafana dashboard, import this JSON definition: https://github.com/kubeshop/testkube/blob/main/assets/grafana-dasboard.json","title":"Grafana Dashboard"},{"location":"oauth-cli/","text":"Testkube CLI Authentication Testkube doesn't provide a separate user/role management system to protect access to its CLI. Users can configure OAuth-based authentication modules using Testkube Helm chart parameters and the CLI config command. Testkube can automatically configure the Kubernetes Nginx Ingress Controller and create required ingresses. Provide Parameters for API Ingress Pass values to Testkube Helm chart during installation or upgrade (they are empty by default). Pay attention to the usage of the scheme (http or https) in URIs. --set testkube-api.cliIngress.enabled = true \\ --set testkube-api.cliIngress.oauth.provider = \"github\" --set testkube-api.cliIngress.oauth.clientID = \"XXXXXXXXXX\" \\ --set testkube-api.cliIngress.oauth.clientSecret = \"XXXXXXXXXX\" \\ --set testkube-api.cliIngress.oauth.scopes = \"\" Create Github OAuth Application Register a new Github OAuth application for your personal or organization account. Pay attention to the usage of the scheme (http or https) in URIs. The homepage URL should be the UI home page http://127.0.0.1:13254. The authorization callback URL should be a prebuilt page at the UI website http://127.0.0.1:13254/oauth/callback. Remember the generated Client ID and Client Secret. Provide Parameters for CLI Run the command below to configure oauth parameters (we support github OAuth provider): kubectl testkube config oauth httsp://demo.testkube.io/api --client-id XXXXXXXXXX --client-secret XXXXXXXXXX Output: You will be redirected to your browser for authentication or you can open the url below manually https://github.com/login/oauth/authorize?access_type = offline & client_id = XXXXXXXXXX & redirect_uri = http%3A%2F%2F127.0.0.1%3A13254%2Foauth%2Fcallback & response_type = code & state = iRQkcwXV Authentication will be cancelled in 60 seconds Authorization for the Github application will be requested and access will need to be confirmed. If authorization is successful, you will see the success page. Output: Shutting down server... Server gracefully stopped \ud83e\udd47 New api uri set to https://demo.testkube.io/api \ud83e\udd47 New oauth token gho_XXXXXXXXXX \ud83e\udd47 Run CLI Commands with OAuth Now all of your requests with direct client will submit an OAuth token, for example: kubectl testkube get executors -c direct Output: NAME | URI | LABELS +--------------------+-----+--------+ artillery-executor | | curl-executor | | cypress-executor | | k6-executor | | postman-executor | | soapui-executor | | Environment Variables You can use 2 environment variables to override CLI config values: TESTKUBE_API_URI - for API uri. TESTKUBE_OAUTH_ACCESS_TOKEN - for OAuth access token.","title":"OAuth for CLI"},{"location":"oauth-cli/#testkube-cli-authentication","text":"Testkube doesn't provide a separate user/role management system to protect access to its CLI. Users can configure OAuth-based authentication modules using Testkube Helm chart parameters and the CLI config command. Testkube can automatically configure the Kubernetes Nginx Ingress Controller and create required ingresses.","title":"Testkube CLI Authentication"},{"location":"oauth-cli/#provide-parameters-for-api-ingress","text":"Pass values to Testkube Helm chart during installation or upgrade (they are empty by default). Pay attention to the usage of the scheme (http or https) in URIs. --set testkube-api.cliIngress.enabled = true \\ --set testkube-api.cliIngress.oauth.provider = \"github\" --set testkube-api.cliIngress.oauth.clientID = \"XXXXXXXXXX\" \\ --set testkube-api.cliIngress.oauth.clientSecret = \"XXXXXXXXXX\" \\ --set testkube-api.cliIngress.oauth.scopes = \"\"","title":"Provide Parameters for API Ingress"},{"location":"oauth-cli/#create-github-oauth-application","text":"Register a new Github OAuth application for your personal or organization account. Pay attention to the usage of the scheme (http or https) in URIs. The homepage URL should be the UI home page http://127.0.0.1:13254. The authorization callback URL should be a prebuilt page at the UI website http://127.0.0.1:13254/oauth/callback. Remember the generated Client ID and Client Secret.","title":"Create Github OAuth Application"},{"location":"oauth-cli/#provide-parameters-for-cli","text":"Run the command below to configure oauth parameters (we support github OAuth provider): kubectl testkube config oauth httsp://demo.testkube.io/api --client-id XXXXXXXXXX --client-secret XXXXXXXXXX Output: You will be redirected to your browser for authentication or you can open the url below manually https://github.com/login/oauth/authorize?access_type = offline & client_id = XXXXXXXXXX & redirect_uri = http%3A%2F%2F127.0.0.1%3A13254%2Foauth%2Fcallback & response_type = code & state = iRQkcwXV Authentication will be cancelled in 60 seconds Authorization for the Github application will be requested and access will need to be confirmed. If authorization is successful, you will see the success page. Output: Shutting down server... Server gracefully stopped \ud83e\udd47 New api uri set to https://demo.testkube.io/api \ud83e\udd47 New oauth token gho_XXXXXXXXXX \ud83e\udd47","title":"Provide Parameters for CLI"},{"location":"oauth-cli/#run-cli-commands-with-oauth","text":"Now all of your requests with direct client will submit an OAuth token, for example: kubectl testkube get executors -c direct Output: NAME | URI | LABELS +--------------------+-----+--------+ artillery-executor | | curl-executor | | cypress-executor | | k6-executor | | postman-executor | | soapui-executor | |","title":"Run CLI Commands with OAuth"},{"location":"oauth-cli/#environment-variables","text":"You can use 2 environment variables to override CLI config values: TESTKUBE_API_URI - for API uri. TESTKUBE_OAUTH_ACCESS_TOKEN - for OAuth access token.","title":"Environment Variables"},{"location":"oauth-ui/","text":"Testkube UI Authentication Testkube doesn't provide a separate user/role management system to protect access to its UI. Users can configure and OAuth based authenication module using Testkube Helm chart parameters. Testkube can automatically create an OAuth2-Proxy service and deployment integrated with GitHub, as well as properly configure Kubernetes Nginx Ingress Controller and create required ingresses. Provide Parameters for UI and API Ingresses API Ingress Pass values to Testkube Helm chart during installation or upgrade (they are empty by default). Pay attention to the usage of the scheme (http or https) in URIs. --set testkube-api.uiIngress.enabled = true \\ --set testkube-api.uiIngress.annotations. \"nginx\\.ingress\\.kubernetes\\.io/auth-url\" = \"http://\\$host/oauth2/auth\" \\ --set testkube-api.uiIngress.annotations. \"nginx\\.ingress\\.kubernetes\\.io/auth-signin\" = \"http://\\$host/oauth2/start?rd=\\$escaped_request_uri\" \\ --set testkube-api.uiIngress.annotations. \"nginx\\.ingress\\.kubernetes\\.io/access-control-allow-origin\" = \"*\" UI Ingress Pass values to Testkube Helm chart during installation or upgrade (they are empty by default). Pay attention to the usage of the scheme (http or https) in URIs. --set testkube-dashboard.ingress.enabled = true \\ --set testkube-dashboard.ingress.annotations.nginx. \"ingress\\.kubernetes\\.io/auth-url\" = \"http://\\$host/oauth2/auth\" --set testkube-dashboard.ingress.annotations.nginx. \"ingress\\.kubernetes\\.io/auth-signin\" = \"http://\\$host/oauth2/start?rd=\\$escaped_request_uri\" Create Cookie Secret Use OpenSSL to generate a shared secret or it can be any 16 or 32 byte value 64base encoded. $ openssl rand -hex 16 48f0a2b815ddc0a437825ccb27548d25 Create Github OAuth Application Register a new Github OAuth application for your personal or organizational account. Pay attention to the usage of the scheme (http or https) in URIs. The homepage URL should be the UI home page http://testdash.testkube.io. The authorization callback URL should be a prebuilt page at the UI website http://testdash.testkube.io/oauth2/callback. Remember the generated Client ID and Client Secret. OAuth Service, Deployment and Ingresses Parameters Pass values to the Testkube Helm chart during installation or upgrade (they are empty by default). Pay attention to the usage of the scheme (http or https) in URIs. --set testkube-dashboard.oauth2.enabled = true \\ --set testkube-dashboard.oauth2.env.clientId = \"Client ID from Github OAuth application\" \\ --set testkube-dashboard.oauth2.env.clientSecret = \"Client Secret from Github OAuth application\" \\ --set testkube-dashboard.oauth2.env.githubOrg = \"Github organization - if you need to provide access only to members of your organization\" \\ --set testkube-dashboard.oauth2.env.cookieSecret = \"cookie secret generated above\" \\ --set testkube-dashboard.oauth2.env.cookieSecure = \"false - for http connection, true - for https connections\" \\ --set testkube-dashboard.oauth2.env.redirectUrl = \"http://demo.testkube.io/oauth2/callback\"","title":"OAuth for UI"},{"location":"oauth-ui/#testkube-ui-authentication","text":"Testkube doesn't provide a separate user/role management system to protect access to its UI. Users can configure and OAuth based authenication module using Testkube Helm chart parameters. Testkube can automatically create an OAuth2-Proxy service and deployment integrated with GitHub, as well as properly configure Kubernetes Nginx Ingress Controller and create required ingresses.","title":"Testkube UI Authentication"},{"location":"oauth-ui/#provide-parameters-for-ui-and-api-ingresses","text":"","title":"Provide Parameters for UI and API Ingresses"},{"location":"oauth-ui/#api-ingress","text":"Pass values to Testkube Helm chart during installation or upgrade (they are empty by default). Pay attention to the usage of the scheme (http or https) in URIs. --set testkube-api.uiIngress.enabled = true \\ --set testkube-api.uiIngress.annotations. \"nginx\\.ingress\\.kubernetes\\.io/auth-url\" = \"http://\\$host/oauth2/auth\" \\ --set testkube-api.uiIngress.annotations. \"nginx\\.ingress\\.kubernetes\\.io/auth-signin\" = \"http://\\$host/oauth2/start?rd=\\$escaped_request_uri\" \\ --set testkube-api.uiIngress.annotations. \"nginx\\.ingress\\.kubernetes\\.io/access-control-allow-origin\" = \"*\"","title":"API Ingress"},{"location":"oauth-ui/#ui-ingress","text":"Pass values to Testkube Helm chart during installation or upgrade (they are empty by default). Pay attention to the usage of the scheme (http or https) in URIs. --set testkube-dashboard.ingress.enabled = true \\ --set testkube-dashboard.ingress.annotations.nginx. \"ingress\\.kubernetes\\.io/auth-url\" = \"http://\\$host/oauth2/auth\" --set testkube-dashboard.ingress.annotations.nginx. \"ingress\\.kubernetes\\.io/auth-signin\" = \"http://\\$host/oauth2/start?rd=\\$escaped_request_uri\"","title":"UI Ingress"},{"location":"oauth-ui/#create-cookie-secret","text":"Use OpenSSL to generate a shared secret or it can be any 16 or 32 byte value 64base encoded. $ openssl rand -hex 16 48f0a2b815ddc0a437825ccb27548d25","title":"Create Cookie Secret"},{"location":"oauth-ui/#create-github-oauth-application","text":"Register a new Github OAuth application for your personal or organizational account. Pay attention to the usage of the scheme (http or https) in URIs. The homepage URL should be the UI home page http://testdash.testkube.io. The authorization callback URL should be a prebuilt page at the UI website http://testdash.testkube.io/oauth2/callback. Remember the generated Client ID and Client Secret.","title":"Create Github OAuth Application"},{"location":"oauth-ui/#oauth-service-deployment-and-ingresses-parameters","text":"Pass values to the Testkube Helm chart during installation or upgrade (they are empty by default). Pay attention to the usage of the scheme (http or https) in URIs. --set testkube-dashboard.oauth2.enabled = true \\ --set testkube-dashboard.oauth2.env.clientId = \"Client ID from Github OAuth application\" \\ --set testkube-dashboard.oauth2.env.clientSecret = \"Client Secret from Github OAuth application\" \\ --set testkube-dashboard.oauth2.env.githubOrg = \"Github organization - if you need to provide access only to members of your organization\" \\ --set testkube-dashboard.oauth2.env.cookieSecret = \"cookie secret generated above\" \\ --set testkube-dashboard.oauth2.env.cookieSecure = \"false - for http connection, true - for https connections\" \\ --set testkube-dashboard.oauth2.env.redirectUrl = \"http://demo.testkube.io/oauth2/callback\"","title":"OAuth Service, Deployment and Ingresses Parameters"},{"location":"openapi/","text":"SwaggerUIBundle({ url: 'https://raw.githubusercontent.com/kubeshop/testkube/main/api/v1/testkube.yaml', dom_id: '#swagger-ui', })","title":"OpenAPI Definition"},{"location":"postman-executors/","text":"Postman Collections Testkube is able to run Postman collections inside your Kubernetes cluster so it can be used to test internal or external services. Test Environment Let's assume that our SUT (Service Under Test) is an internal Kubernetes service which has ClusterIP Service created and is exposed on port 8088 . The service name is testkube-api-server and is exposing the /health endpoint that we want to test. To call the SUT inside a cluster: curl http://testkube-api-server:8088/health Output: 200 OK Create a New Postman Test Create a postman collection and export it as JSON: Right click and export the given Collection to a file, In this example, it is saved into ~/Downloads/API-Health.postman_collection.json Now we can create a new TestKube based on the saved Postman Collection. Create a New Testkube Test Script kubectl testkube create test --name api-incluster-test --file ~/Downloads/API-Health.postman_collection.json --type postman/collection Output: Test created \ud83e\udd47 Test created! Running a Test kubectl testkube run test api-incluster-test Type : postman/collection Name : api-incluster-test Execution ID : 615d6398b046f8fbd3d955d4 Execution name: openly-full-bream Test queued for execution Use the following command to get test execution details: $ kubectl testkube get execution 615d6398b046f8fbd3d955d4 or watch test execution until complete: $ kubectl testkube watch execution 615d6398b046f8fbd3d955d4 Test runs can be named. If no name is passed, Testkube will autogenerate a name. Getting Test Results Now we can watch/get test execution details: kubectl testkube watch execution 615d6398b046f8fbd3d955d4 Output: Type : postman/collection Name : api-incluster-test Execution ID : 615d6398b046f8fbd3d955d4 Execution name: openly-full-bream Watching for changes Status: success, Duration: 598ms Getting results Name: openly-full-bream, Status: success, Duration: 598ms newman API-Health \u2192 Health GET http://testkube-api-server:8088/health [ 200 OK, 124B, 297ms ] \u2713 Status code is 200 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 executed \u2502 failed \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 iterations \u2502 1 \u2502 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 requests \u2502 1 \u2502 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 test-scripts \u2502 2 \u2502 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 prerequest-scripts \u2502 1 \u2502 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 assertions \u2502 1 \u2502 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 total run duration: 523ms \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 total data received: 8B ( approx ) \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 average response time: 297ms [ min: 297ms, max: 297ms, s.d.: 0\u00b5s ] \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Test execution completed in 598ms Summary Testkube simplifies running tests inside a cluster and stores tests and tests results for later use.","title":"Postman Collections"},{"location":"postman-executors/#postman-collections","text":"Testkube is able to run Postman collections inside your Kubernetes cluster so it can be used to test internal or external services.","title":"Postman Collections"},{"location":"postman-executors/#test-environment","text":"Let's assume that our SUT (Service Under Test) is an internal Kubernetes service which has ClusterIP Service created and is exposed on port 8088 . The service name is testkube-api-server and is exposing the /health endpoint that we want to test. To call the SUT inside a cluster: curl http://testkube-api-server:8088/health Output: 200 OK","title":"Test Environment"},{"location":"postman-executors/#create-a-new-postman-test","text":"Create a postman collection and export it as JSON: Right click and export the given Collection to a file, In this example, it is saved into ~/Downloads/API-Health.postman_collection.json Now we can create a new TestKube based on the saved Postman Collection.","title":"Create a New Postman Test"},{"location":"postman-executors/#create-a-new-testkube-test-script","text":"kubectl testkube create test --name api-incluster-test --file ~/Downloads/API-Health.postman_collection.json --type postman/collection Output: Test created \ud83e\udd47 Test created!","title":"Create a New Testkube Test Script"},{"location":"postman-executors/#running-a-test","text":"kubectl testkube run test api-incluster-test Type : postman/collection Name : api-incluster-test Execution ID : 615d6398b046f8fbd3d955d4 Execution name: openly-full-bream Test queued for execution Use the following command to get test execution details: $ kubectl testkube get execution 615d6398b046f8fbd3d955d4 or watch test execution until complete: $ kubectl testkube watch execution 615d6398b046f8fbd3d955d4 Test runs can be named. If no name is passed, Testkube will autogenerate a name.","title":"Running a Test"},{"location":"postman-executors/#getting-test-results","text":"Now we can watch/get test execution details: kubectl testkube watch execution 615d6398b046f8fbd3d955d4 Output: Type : postman/collection Name : api-incluster-test Execution ID : 615d6398b046f8fbd3d955d4 Execution name: openly-full-bream Watching for changes Status: success, Duration: 598ms Getting results Name: openly-full-bream, Status: success, Duration: 598ms newman API-Health \u2192 Health GET http://testkube-api-server:8088/health [ 200 OK, 124B, 297ms ] \u2713 Status code is 200 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 executed \u2502 failed \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 iterations \u2502 1 \u2502 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 requests \u2502 1 \u2502 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 test-scripts \u2502 2 \u2502 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 prerequest-scripts \u2502 1 \u2502 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 assertions \u2502 1 \u2502 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 total run duration: 523ms \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 total data received: 8B ( approx ) \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 average response time: 297ms [ min: 297ms, max: 297ms, s.d.: 0\u00b5s ] \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Test execution completed in 598ms","title":"Getting Test Results"},{"location":"postman-executors/#summary","text":"Testkube simplifies running tests inside a cluster and stores tests and tests results for later use.","title":"Summary"},{"location":"scheduling/","text":"Testkube Test and Test Suite Scheduling In order to run Tests and Test Suites on a regular basis, we support a scheduling mechanism for these objects. CRDs both for test and test suite contain a schedule field used to define rules for launching them in time. Testkube's schedule data format is the same that is used to define Kubernetes Cron jobs (check Wikipedia Cron format for details https://en.wikipedia.org/wiki/Cron ). Scheduling Architecture Testkube uses the scheduling engine from Kubernetes Cron jobs. In fact, for each scheduled Test or Test Suite, a special cron job is created from this template: https://github.com/kubeshop/helm-charts/tree/main/charts/testkube-api/cronjob-template.yml . Technically, it is a callback to Testkube API server method launching either Test or Test Suite execution. This works similarly to scheduled Test and Test Suite executions done by external scheduling platforms. Create a Test with a Schedule Let's create a test with a required schedule using Testkube CLI command: kubectl testkube create test --file test/postman/TODO.postman_collection.json --name scheduled-test --schedule = \"*/1 * * * *\" Output: Detected test type postman/collection Test created / scheduled-test \ud83e\udd47 We successfuly created a scheduled test and can check a list of the available tests: kubectl testkube get tests Output: NAME | TYPE | CREATED | LABELS | SCHEDULE | STATUS | EXECUTION ID +-------------------+--------------------+-------------------------------+--------+-------------+--------+--------------------------+ scheduled-test | postman/collection | 2022 -04-13 12 :37:40 +0000 UTC | | */1 * * * * | | The scheduled test was created and successfully scheduled for execution. Let's check a Cron job connected to this test. kubectl get cronjobs -A Output: NAMESPACE NAME SCHEDULE SUSPEND ACTIVE LAST SCHEDULE AGE testkube scheduled-test-tests */1 * * * * False 1 42s 3m22s The Cron job for this test was successfully created and the test was executed. To the check Cron job details: kubectl describe cronjob scheduled-test-tests -n testkube Output: Name: scheduled-test-tests Namespace: testkube Labels: testkube = tests Annotations: <none> Schedule: */1 * * * * Concurrency Policy: Forbid Suspend: False Successful Job History Limit: 3 Failed Job History Limit: 1 Starting Deadline Seconds: <unset> Selector: <unset> Parallelism: <unset> Completions: <unset> Pod Template: Labels: <none> Containers: curlimage: Image: curlimages/curl Port: <none> Host Port: <none> Command: sh -c Args: curl -X POST -H \"Content-Type: application/json\" -d '{}' \"http://testkube-api-server:8088/v1/tests/scheduled-test/executions?callback=true\" Environment: <none> Mounts: <none> Volumes: <none> Last Schedule Time: Wed, 13 Apr 2022 15 :50:00 +0300 Active Jobs: scheduled-test-tests-27497570 Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal SuccessfulCreate 5m41s cronjob-controller Created job scheduled-test-tests-2749757 As mentioned above, we have a scheduled callback for launching our test. Getting Scheduled Test Results Now we can check whether the test is executed every minute for the schedule we provided. kubectl testkube get execution Output: ID | NAME | TYPE | STATUS | LABELS +--------------------------+---------------------+--------------------+---------+--------+ 6256c98f418062706814e1fc | scheduled-test | postman/collection | passed | 6256c953418062706814e1fa | scheduled-test | postman/collection | passed | 6256c91e418062706814e1f8 | scheduled-test | postman/collection | passed | 6256c8db418062706814e1f6 | scheduled-test | postman/collection | passed | 6256c89f418062706814e1f4 | scheduled-test | postman/collection | passed | 6256c885418062706814e1f2 | scheduled-test | postman/collection | passed | 6256c87e418062706814e1f0 | scheduled-test | postman/collection | passed | The test is successfully regulary executed. Create a Test Suite with a Schedule Let's create a Test Suite with a required schedule using the Testkube CLI command: cat test/suites/testsuite.json | kubectl testkube create testsuite --name scheduled-testsuite --schedule = \"*/1 * * * *\" Output: TestSuite created scheduled-testsuite \ud83e\udd47 We successfuly created a scheduled Test Suite and can view a list of the available Test Suites: kubectl testkube get testsuites Output: NAME | DESCRIPTION | STEPS | LABELS | SCHEDULE | STATUS | EXECUTION ID +---------------------+------------------------+-------+--------+-------------+--------+--------------+ scheduled-testsuite | Run test several times | 2 | | */1 * * * * | | The scheduled test suite was created and successfully scheduled for execution. We will skip the Cron job details, they are fully similar to test one described above. Getting Scheduled Test Suite Results The Test Suite is executed every minute for the schedule we provided. kubectl testkube get tse Output: ID | TEST SUITE NAME | EXECUTION NAME | STATUS | STEPS | LABELS +--------------------------+---------------------+--------------------------------------------+--------+-------+--------+ 6256ce3f418062706814e210 | scheduled-testsuite | scheduled-testsuite.abnormally-in-lark | passed | 2 | 6256ce04418062706814e20c | scheduled-testsuite | scheduled-testsuite.kindly-evolved-primate | passed | 2 | 6256cdcc418062706814e208 | scheduled-testsuite | scheduled-testsuite.formerly-champion-dodo | passed | 2 | The Test Suite is successfully executed according to the schedule set.","title":"Scheduling"},{"location":"scheduling/#testkube-test-and-test-suite-scheduling","text":"In order to run Tests and Test Suites on a regular basis, we support a scheduling mechanism for these objects. CRDs both for test and test suite contain a schedule field used to define rules for launching them in time. Testkube's schedule data format is the same that is used to define Kubernetes Cron jobs (check Wikipedia Cron format for details https://en.wikipedia.org/wiki/Cron ).","title":"Testkube Test and Test Suite Scheduling"},{"location":"scheduling/#scheduling-architecture","text":"Testkube uses the scheduling engine from Kubernetes Cron jobs. In fact, for each scheduled Test or Test Suite, a special cron job is created from this template: https://github.com/kubeshop/helm-charts/tree/main/charts/testkube-api/cronjob-template.yml . Technically, it is a callback to Testkube API server method launching either Test or Test Suite execution. This works similarly to scheduled Test and Test Suite executions done by external scheduling platforms.","title":"Scheduling Architecture"},{"location":"scheduling/#create-a-test-with-a-schedule","text":"Let's create a test with a required schedule using Testkube CLI command: kubectl testkube create test --file test/postman/TODO.postman_collection.json --name scheduled-test --schedule = \"*/1 * * * *\" Output: Detected test type postman/collection Test created / scheduled-test \ud83e\udd47 We successfuly created a scheduled test and can check a list of the available tests: kubectl testkube get tests Output: NAME | TYPE | CREATED | LABELS | SCHEDULE | STATUS | EXECUTION ID +-------------------+--------------------+-------------------------------+--------+-------------+--------+--------------------------+ scheduled-test | postman/collection | 2022 -04-13 12 :37:40 +0000 UTC | | */1 * * * * | | The scheduled test was created and successfully scheduled for execution. Let's check a Cron job connected to this test. kubectl get cronjobs -A Output: NAMESPACE NAME SCHEDULE SUSPEND ACTIVE LAST SCHEDULE AGE testkube scheduled-test-tests */1 * * * * False 1 42s 3m22s The Cron job for this test was successfully created and the test was executed. To the check Cron job details: kubectl describe cronjob scheduled-test-tests -n testkube Output: Name: scheduled-test-tests Namespace: testkube Labels: testkube = tests Annotations: <none> Schedule: */1 * * * * Concurrency Policy: Forbid Suspend: False Successful Job History Limit: 3 Failed Job History Limit: 1 Starting Deadline Seconds: <unset> Selector: <unset> Parallelism: <unset> Completions: <unset> Pod Template: Labels: <none> Containers: curlimage: Image: curlimages/curl Port: <none> Host Port: <none> Command: sh -c Args: curl -X POST -H \"Content-Type: application/json\" -d '{}' \"http://testkube-api-server:8088/v1/tests/scheduled-test/executions?callback=true\" Environment: <none> Mounts: <none> Volumes: <none> Last Schedule Time: Wed, 13 Apr 2022 15 :50:00 +0300 Active Jobs: scheduled-test-tests-27497570 Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal SuccessfulCreate 5m41s cronjob-controller Created job scheduled-test-tests-2749757 As mentioned above, we have a scheduled callback for launching our test.","title":"Create a Test with a Schedule"},{"location":"scheduling/#getting-scheduled-test-results","text":"Now we can check whether the test is executed every minute for the schedule we provided. kubectl testkube get execution Output: ID | NAME | TYPE | STATUS | LABELS +--------------------------+---------------------+--------------------+---------+--------+ 6256c98f418062706814e1fc | scheduled-test | postman/collection | passed | 6256c953418062706814e1fa | scheduled-test | postman/collection | passed | 6256c91e418062706814e1f8 | scheduled-test | postman/collection | passed | 6256c8db418062706814e1f6 | scheduled-test | postman/collection | passed | 6256c89f418062706814e1f4 | scheduled-test | postman/collection | passed | 6256c885418062706814e1f2 | scheduled-test | postman/collection | passed | 6256c87e418062706814e1f0 | scheduled-test | postman/collection | passed | The test is successfully regulary executed.","title":"Getting Scheduled Test Results"},{"location":"scheduling/#create-a-test-suite-with-a-schedule","text":"Let's create a Test Suite with a required schedule using the Testkube CLI command: cat test/suites/testsuite.json | kubectl testkube create testsuite --name scheduled-testsuite --schedule = \"*/1 * * * *\" Output: TestSuite created scheduled-testsuite \ud83e\udd47 We successfuly created a scheduled Test Suite and can view a list of the available Test Suites: kubectl testkube get testsuites Output: NAME | DESCRIPTION | STEPS | LABELS | SCHEDULE | STATUS | EXECUTION ID +---------------------+------------------------+-------+--------+-------------+--------+--------------+ scheduled-testsuite | Run test several times | 2 | | */1 * * * * | | The scheduled test suite was created and successfully scheduled for execution. We will skip the Cron job details, they are fully similar to test one described above.","title":"Create a Test Suite with a Schedule"},{"location":"scheduling/#getting-scheduled-test-suite-results","text":"The Test Suite is executed every minute for the schedule we provided. kubectl testkube get tse Output: ID | TEST SUITE NAME | EXECUTION NAME | STATUS | STEPS | LABELS +--------------------------+---------------------+--------------------------------------------+--------+-------+--------+ 6256ce3f418062706814e210 | scheduled-testsuite | scheduled-testsuite.abnormally-in-lark | passed | 2 | 6256ce04418062706814e20c | scheduled-testsuite | scheduled-testsuite.kindly-evolved-primate | passed | 2 | 6256cdcc418062706814e208 | scheduled-testsuite | scheduled-testsuite.formerly-champion-dodo | passed | 2 | The Test Suite is successfully executed according to the schedule set.","title":"Getting Scheduled Test Suite Results"},{"location":"slack-integration/","text":"Integrating with Slack In order to receive notifications in Slack about the status of the testing process, Testkube provides integration with Slack. Below are the steps to configure it. Install Testkube bot to Your Slack Workspace Testkube bot Add the Testkube bot to a Channel Configure Testkube to Use the Slack bot Token Populate slackToken in the Helm values file, then install Testkube using Helm install, see Manual Testkube Helm Charts Installation for more information.","title":"Integrating with Slack"},{"location":"slack-integration/#integrating-with-slack","text":"In order to receive notifications in Slack about the status of the testing process, Testkube provides integration with Slack. Below are the steps to configure it.","title":"Integrating with Slack"},{"location":"slack-integration/#install-testkube-bot-to-your-slack-workspace","text":"Testkube bot","title":"Install Testkube bot to Your Slack Workspace"},{"location":"slack-integration/#add-the-testkube-bot-to-a-channel","text":"","title":"Add the Testkube bot to a Channel"},{"location":"slack-integration/#configure-testkube-to-use-the-slack-bot-token","text":"Populate slackToken in the Helm values file, then install Testkube using Helm install, see Manual Testkube Helm Charts Installation for more information.","title":"Configure Testkube to Use the Slack bot Token"},{"location":"telemetry/","text":"Telemetry To improve the end-user experience, Testkube collects anonymous telemetry data about usage. Participation in this program is optional. You may opt-out if you'd prefer not to share any information. The data collected is always anonymous, not traceable to the source, and only used in aggregate form. Telemetry collects and scrambles information about the host when the API server is bootstrapped for the first time. The collected data looks like this. { \"anonymousId\" : \"a4652358effb311a074bf84d2aed5a7d270dee858bff10e847df2a9ea132bb38\" , \"context\" : { \"library\" : { \"name\" : \"analytics-go\" , \"version\" : \"3.0.0\" } }, \"event\" : \"testkube-heartbeat\" , \"integrations\" : {}, \"messageId\" : \"2021-11-04 19:54:40.029549 +0100 CET m=+0.148209228\" , \"originalTimestamp\" : \"2021-11-04T19:54:40.029571+01:00\" , \"receivedAt\" : \"2021-11-04T18:54:41.004Z\" , \"sentAt\" : \"2021-11-04T18:54:40.029Z\" , \"timestamp\" : \"2021-11-04T18:54:41.004Z\" , \"type\" : \"track\" } What We Collect The telemetry data we use in our metrics is limited to: The number of CLI installations. The number of unique CLI usages in a day. The number of installations to a cluster. The number of unique active cluster installations. The number of people who disable telemetry. The number of unique sessions in the UI. How to Opt Out? To opt out of the Testkube telemetry collection: kubectl testkube disable telemetry To opt in : kubectl testkube enable telemetry To check the current status : kubectl testkube status telemetry","title":"Telemetry"},{"location":"telemetry/#telemetry","text":"To improve the end-user experience, Testkube collects anonymous telemetry data about usage. Participation in this program is optional. You may opt-out if you'd prefer not to share any information. The data collected is always anonymous, not traceable to the source, and only used in aggregate form. Telemetry collects and scrambles information about the host when the API server is bootstrapped for the first time. The collected data looks like this. { \"anonymousId\" : \"a4652358effb311a074bf84d2aed5a7d270dee858bff10e847df2a9ea132bb38\" , \"context\" : { \"library\" : { \"name\" : \"analytics-go\" , \"version\" : \"3.0.0\" } }, \"event\" : \"testkube-heartbeat\" , \"integrations\" : {}, \"messageId\" : \"2021-11-04 19:54:40.029549 +0100 CET m=+0.148209228\" , \"originalTimestamp\" : \"2021-11-04T19:54:40.029571+01:00\" , \"receivedAt\" : \"2021-11-04T18:54:41.004Z\" , \"sentAt\" : \"2021-11-04T18:54:40.029Z\" , \"timestamp\" : \"2021-11-04T18:54:41.004Z\" , \"type\" : \"track\" }","title":"Telemetry"},{"location":"telemetry/#what-we-collect","text":"The telemetry data we use in our metrics is limited to: The number of CLI installations. The number of unique CLI usages in a day. The number of installations to a cluster. The number of unique active cluster installations. The number of people who disable telemetry. The number of unique sessions in the UI.","title":"What We Collect"},{"location":"telemetry/#how-to-opt-out","text":"To opt out of the Testkube telemetry collection: kubectl testkube disable telemetry To opt in : kubectl testkube enable telemetry To check the current status : kubectl testkube status telemetry","title":"How to Opt Out?"},{"location":"testkube-automation/","text":"Integrating with CI/CD Check out our blog post to follow tutorial steps for our GitOps-friendly Cloud-native test orchestration/execution framework. In order to automate Testkube runs, access to a K8S cluster is needed, for example, a configured environment with the set up context and kubeconfig for communication with the K8S cluster. Testkube uses your K8S context and access settings in order to interact with the cluster and tests resources, etc. In the next few sections, we will go through the process of Testkube and Helm (for Testkube's release deploy/upgrade) automations with the usage of GitHub Actions and GKE K8S. Teskube github action The testkube github action is available here https://github.com/marketplace/actions/testkube-cli and it makes possible running the Testkube cli commands in a github workflow. Following example shows how to create a test using the github action, a more complex example can be found here . # Creating test - name : Create test id : create_test uses : kubeshop/testkube-docker-action@v1 with : command : create resource : test namespace : testkube parameters : \"--type k6/script --name testkube-github-action\" stdin : \"import http from 'k6/http';\\nimport { sleep,check } from 'k6';\\n\\nexport default function () {\\n const baseURI = `${__ENV.TESTKUBE_HOMEPAGE_URI || 'https://testkube.kubeshop.io'}`\\n check(http.get(`${baseURI}/`), {\\n 'check testkube homepage home page': (r) =>\\n r.body.includes('Your Friendly Cloud-Native Testing Framework for Kubernetes'),\\n });\\n\\n\\n sleep(1);\\n}\\n\" Configuring your GH Actions for the Access to GKE To obtain set up access to a GKE (Google Kubernetes Engine) from GH (GitHub) actions, please visit the official documentation from GH: https://docs.github.com/en/actions/deployment/deploying-to-google-kubernetes-engine Create a Service Account (SA). Save it into GH's Secrets of the repository. Run either Helm or Kubectl kubtest commands against the set up GKE cluster. Main GH Action Section Configuration To install on Linux or MacOS, run: # Deploy into configured GKE cluster: - name : Deploy run : |- helm upgrade --install --atomic --timeout 180s testkube helm-charts/testkube --namespace testkube --create-namespace In addition to Helm, you can run any other K8s-native command. In our case: kubectl kubtest... Complete Example of Working GH Actions Workflow and Testkube Tests Usage Testkube tests can be easily re-used with minimal modifications according to your needs. To run tests on Linux or MacOS: name : Running Testkube Tests. on : push : paths : - 'charts/**' branches : - main env : PROJECT_ID : ${{ secrets.GKE_PROJECT }} GKE_CLUSTER_NAME_DEV : ${{ secrets.GKE_CLUSTER_NAME_DEV }} # Add your cluster name here. GKE_ZONE_DEV : ${{ secrets.GKE_ZONE_DEV }} # Add your cluster zone here. DEPLOYMENT_NAME : testkube # Add your deployment name here. jobs : deploy-to-testkube-dev-gke : name : Deploy runs-on : ubuntu-latest needs : notify_slack_if_release_succeeds steps : - name : Checkout uses : actions/checkout@v2 with : fetch-depth : 0 - name : Configure Git run : | git config user.name \"$GITHUB_ACTOR\" git config user.email \"$GITHUB_ACTOR@users.noreply.github.com\" # Setup gcloud CLI - uses : google-github-actions/setup-gcloud@94337306dda8180d967a56932ceb4ddcf01edae7 with : service_account_key : ${{ secrets.GKE_SA_KEY }} project_id : ${{ secrets.GKE_PROJECT }} # Configure Docker to use the gcloud command-line tool as a credential # helper for authentication - run : |- gcloud --quiet auth configure-docker # Get the GKE credentials so we can deploy to the cluster - uses : google-github-actions/get-gke-credentials@fb08709ba27618c31c09e014e1d8364b02e5042e with : cluster_name : ${{ env.GKE_CLUSTER_NAME_DEV }} location : ${{ env.GKE_ZONE_DEV }} credentials : ${{ secrets.GKE_SA_KEY }} # Run Testkube test on a GKE cluster - name : Run test id : run_test uses : kubeshop/testkube-docker-action@v1 with : command : run resource : test parameters : TEST_NAME Along with the kubectl command, you can pass all the standard K8s parameters such as --namespace , etc. If you wish to automate the CI/CD part of Testkube's Helm release, use Helm blocks as follow: ... - name : Install Helm uses : azure/setup-helm@v1 with : version : v3.4.0 - name : Installing repositories run : | helm repo add helm-charts https://kubeshop.github.io/helm-charts helm repo add bitnami https://charts.bitnami.com/bitnami # Run Helm delpoy/upgrade of the Testkube release on a GKE cluster - name : Deploy run : |- helm upgrade --install --atomic --timeout 180s testkube helm-charts/testkube --namespace testkube --create-namespace ...","title":"Integrating with CI/CD"},{"location":"testkube-automation/#integrating-with-cicd","text":"Check out our blog post to follow tutorial steps for our GitOps-friendly Cloud-native test orchestration/execution framework. In order to automate Testkube runs, access to a K8S cluster is needed, for example, a configured environment with the set up context and kubeconfig for communication with the K8S cluster. Testkube uses your K8S context and access settings in order to interact with the cluster and tests resources, etc. In the next few sections, we will go through the process of Testkube and Helm (for Testkube's release deploy/upgrade) automations with the usage of GitHub Actions and GKE K8S.","title":"Integrating with CI/CD"},{"location":"testkube-automation/#teskube-github-action","text":"The testkube github action is available here https://github.com/marketplace/actions/testkube-cli and it makes possible running the Testkube cli commands in a github workflow. Following example shows how to create a test using the github action, a more complex example can be found here . # Creating test - name : Create test id : create_test uses : kubeshop/testkube-docker-action@v1 with : command : create resource : test namespace : testkube parameters : \"--type k6/script --name testkube-github-action\" stdin : \"import http from 'k6/http';\\nimport { sleep,check } from 'k6';\\n\\nexport default function () {\\n const baseURI = `${__ENV.TESTKUBE_HOMEPAGE_URI || 'https://testkube.kubeshop.io'}`\\n check(http.get(`${baseURI}/`), {\\n 'check testkube homepage home page': (r) =>\\n r.body.includes('Your Friendly Cloud-Native Testing Framework for Kubernetes'),\\n });\\n\\n\\n sleep(1);\\n}\\n\"","title":"Teskube github action"},{"location":"testkube-automation/#configuring-your-gh-actions-for-the-access-to-gke","text":"To obtain set up access to a GKE (Google Kubernetes Engine) from GH (GitHub) actions, please visit the official documentation from GH: https://docs.github.com/en/actions/deployment/deploying-to-google-kubernetes-engine Create a Service Account (SA). Save it into GH's Secrets of the repository. Run either Helm or Kubectl kubtest commands against the set up GKE cluster.","title":"Configuring your GH Actions for the Access to GKE"},{"location":"testkube-automation/#main-gh-action-section-configuration","text":"To install on Linux or MacOS, run: # Deploy into configured GKE cluster: - name : Deploy run : |- helm upgrade --install --atomic --timeout 180s testkube helm-charts/testkube --namespace testkube --create-namespace In addition to Helm, you can run any other K8s-native command. In our case: kubectl kubtest...","title":"Main GH Action Section Configuration"},{"location":"testkube-automation/#complete-example-of-working-gh-actions-workflow-and-testkube-tests-usage","text":"Testkube tests can be easily re-used with minimal modifications according to your needs. To run tests on Linux or MacOS: name : Running Testkube Tests. on : push : paths : - 'charts/**' branches : - main env : PROJECT_ID : ${{ secrets.GKE_PROJECT }} GKE_CLUSTER_NAME_DEV : ${{ secrets.GKE_CLUSTER_NAME_DEV }} # Add your cluster name here. GKE_ZONE_DEV : ${{ secrets.GKE_ZONE_DEV }} # Add your cluster zone here. DEPLOYMENT_NAME : testkube # Add your deployment name here. jobs : deploy-to-testkube-dev-gke : name : Deploy runs-on : ubuntu-latest needs : notify_slack_if_release_succeeds steps : - name : Checkout uses : actions/checkout@v2 with : fetch-depth : 0 - name : Configure Git run : | git config user.name \"$GITHUB_ACTOR\" git config user.email \"$GITHUB_ACTOR@users.noreply.github.com\" # Setup gcloud CLI - uses : google-github-actions/setup-gcloud@94337306dda8180d967a56932ceb4ddcf01edae7 with : service_account_key : ${{ secrets.GKE_SA_KEY }} project_id : ${{ secrets.GKE_PROJECT }} # Configure Docker to use the gcloud command-line tool as a credential # helper for authentication - run : |- gcloud --quiet auth configure-docker # Get the GKE credentials so we can deploy to the cluster - uses : google-github-actions/get-gke-credentials@fb08709ba27618c31c09e014e1d8364b02e5042e with : cluster_name : ${{ env.GKE_CLUSTER_NAME_DEV }} location : ${{ env.GKE_ZONE_DEV }} credentials : ${{ secrets.GKE_SA_KEY }} # Run Testkube test on a GKE cluster - name : Run test id : run_test uses : kubeshop/testkube-docker-action@v1 with : command : run resource : test parameters : TEST_NAME Along with the kubectl command, you can pass all the standard K8s parameters such as --namespace , etc. If you wish to automate the CI/CD part of Testkube's Helm release, use Helm blocks as follow: ... - name : Install Helm uses : azure/setup-helm@v1 with : version : v3.4.0 - name : Installing repositories run : | helm repo add helm-charts https://kubeshop.github.io/helm-charts helm repo add bitnami https://charts.bitnami.com/bitnami # Run Helm delpoy/upgrade of the Testkube release on a GKE cluster - name : Deploy run : |- helm upgrade --install --atomic --timeout 180s testkube helm-charts/testkube --namespace testkube --create-namespace ...","title":"Complete Example of Working GH Actions Workflow and Testkube Tests Usage"},{"location":"tests-creating/","text":"Testkube Tests Tests are single executor oriented objects. Test can have different types, which depends on which executors are installed in your cluster. Testkube includes postman/collection , cypress/project , curl/test , k6/script and soapui/xml test types which are auto registered during the Testkube install by default. As Testkube was designed with flexibility in mind, you can add your own executors to handle additional test types. Test Source Tests can be currently created from multiple sources: A simple file with the test content, For example, with Postman collections, we're exporting the collection as a JSON file. For cURL executors, we're passing a JSON file with the configured cURL command. String - we can also define the content of the test as a string Git directory - we can pass repository , path and branch where our tests are stored. This is used in Cypress executor as Cypress tests are more like npm-based projects which can have a lot of files. We are handling sparse checkouts which are fast even in the case of huge mono-repos. Git file - similarly to Git directories, we can use files located on Git by specifying git-uri and branch . Note: not all executors support all input types. Please refer to the individual executors' documentation to see which options are available. Create a Test Create Your First Test from a File (Postman Collection Test) To create your first Postman collection in Testkube, export your collection into a file. Right click on your collection name: Click the Export button: Save in a convenient location. In this example, we are using ~/Downloads/TODO.postman_collection.json path. Create a Testkube test using the exported JSON and give it a unique and fitting name. For simplicity's sake we used test in this example. kubectl testkube create test --file ~/Downloads/TODO.postman_collection.json --name test Output: Detected test type postman/collection Test created test \ud83e\udd47 Test created! Now we have a reusable test. Updating Tests If you need to update your test after change in Postman, re-export it to a file and run the update command: kubectl testkube update test --file ~/Downloads/TODO.postman_collection.json --name test To check if the test was created correctly, look at the Test Custom Resource in your Kubernetes cluster: Output: Detected test test type postman/collection Test updated test \ud83e\udd47 Testkube will override all test settings and content with the update method. Checking Test Content Let's see what has been created: kubectl get tests -ntestkube Output: NAME AGE test 32s Get the details of a test: kubectl get tests -ntestkube test-example -oyaml ``` sh $ kubectl testkube get test test name: test type_: postman/collection content: | - { \"info\" : { \"_postman_id\" : \"b40de9fe-9201-4b03-8ca2-3064d9027dd6\" , \"name\" : \"TODO\" , \"schema\" : \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\" } , \"item\" : [ { \"name\" : \"Create TODO\" , \"event\" : [ { \"listen\" : \"test\" , \"script\" : { \"exec\" : [ \"pm.test(\\\"Status code is 201 CREATED\\\", function () {\" , \" pm.response.to.have.status(201);\" , \"});\" , \"\" , \"\" , \"pm.test(\\\"Check if todo item craeted successfully\\\", function() {\" , \" var json = pm.response.json();\" , \" pm.environment.set(\\\"item\\\", json.url);\" , \" pm.sendRequest(json.url, function (err, response) {\" , \" var json = pm.response.json();\" , \" pm.expect(json.title).to.eq(\\\"Create video for conference\\\");\" , \"\" , \" });\" , \" console.log(\\\"creating\\\", pm.environment.get(\\\"item\\\"))\" , \"})\" , \"\" , \"\" ] , \"type\" : \"text/javascript\" } } , { \"listen\" : \"prerequest\" , \"script\" : { \"exec\" : [ \"\" ] , \"type\" : \"text/javascript\" } } ] , \"protocolProfileBehavior\" : { \"disabledSystemHeaders\" : {} } , \"request\" : { \"method\" : \"POST\" , \"header\" : [ { \"key\" : \"Content-Type\" , \"value\" : \"application/json\" , \"type\" : \"text\" } ] , \"body\" : { \"mode\" : \"raw\" , \"raw\" : \"{\\\"title\\\":\\\"Create video for conference\\\",\\\"order\\\":1,\\\"completed\\\":false}\" } , \"url\" : { \"raw\" : \"{{uri}}\" , \"host\" : [ \"{{uri}}\" ] } } , \"response\" : [] } , { \"name\" : \"Complete TODO item\" , \"event\" : [ { \"listen\" : \"prerequest\" , \"script\" : { \"exec\" : [ \"console.log(\\\"completing\\\", pm.environment.get(\\\"item\\\"))\" ] , \"type\" : \"text/javascript\" } } ] , \"request\" : { \"method\" : \"PATCH\" , \"header\" : [ { \"key\" : \"Content-Type\" , \"value\" : \"application/json\" , \"type\" : \"text\" } ] , \"body\" : { \"mode\" : \"raw\" , \"raw\" : \"{\\\"completed\\\": true}\" } , \"url\" : { \"raw\" : \"{{item}}\" , \"host\" : [ \"{{item}}\" ] } } , \"response\" : [] } , { \"name\" : \"Delete TODO item\" , \"event\" : [ { \"listen\" : \"prerequest\" , \"script\" : { \"exec\" : [ \"console.log(\\\"deleting\\\", pm.environment.get(\\\"item\\\"))\" ] , \"type\" : \"text/javatest\" } } , { \"listen\" : \"test\" , \"script\" : { \"exec\" : [ \"pm.test(\\\"Status code is 204 no content\\\", function () {\" , \" pm.response.to.have.status(204);\" , \"});\" ] , \"type\" : \"text/javascript\" } } ] , \"request\" : { \"method\" : \"DELETE\" , \"header\" : [] , \"url\" : { \"raw\" : \"{{item}}\" , \"host\" : [ \"{{item}}\" ] } } , \"response\" : [] } ] , \"event\" : [ { \"listen\" : \"prerequest\" , \"script\" : { \"type\" : \"text/javascript\" , \"exec\" : [ \"\" ] } } , { \"listen\" : \"test\" , \"script\" : { \"type\" : \"text/javascript\" , \"exec\" : [ \"\" ] } } ] , \"variable\" : [ { \"key\" : \"uri\" , \"value\" : \"http://34.74.127.60:8080/todos\" } , { \"key\" : \"item\" , \"value\" : null } ] } We can see that the test resource was created with Postman collection JSON content. You can also check tests with the standard kubectl command which will list the tests Custom Resource. kubectl get tests -n testkube test -oyaml Create a Test from Git Some executors can handle files and some can handle only git resources. You'll need to follow the particular executor readme file to be aware which test types the executor handles. Let's assume that a Cypress project is created in a git repository - https://github.com/kubeshop/testkube-executor-cypress/tree/main/examples - where examples is a test directory in the https://github.com/kubeshop/testkube-executor-cypress.git repository. Now we can create our Cypress-based test as shown below. In git based tests, we need to pass the test type. kubectl testkube create test --uri https://github.com/kubeshop/testkube-executor-cypress.git --git-branch main --git-path examples --name kubeshop-cypress --type cypress/project Output: Test created kubeshop-cypress \ud83e\udd47 Let's check how the test created by Testkube is defined in the cluster: $ kubectl get tests -n testkube kubeshop-cypress -o yaml apiVersion: tests.testkube.io/v1 kind: Test metadata: creationTimestamp: \"2021-11-17T12:29:32Z\" generation: 1 name: kubeshop-cypress namespace: testkube resourceVersion: \"225162\" uid: f0d856aa-04fc-4238-bb4c-156ff82b4741 spec: repository: branch: main path: examples type: git uri: https://github.com/kubeshop/testkube-executor-cypress.git type: cypress/project As we can see, this test has spec.repository with git repository data. This data can now be used by the executor to download test data. Summary Tests are the main smallest abstractions over test suites in Testkube, they can be created with different sources and used by executors to run on top of a particular test framework.","title":"Creating"},{"location":"tests-creating/#testkube-tests","text":"Tests are single executor oriented objects. Test can have different types, which depends on which executors are installed in your cluster. Testkube includes postman/collection , cypress/project , curl/test , k6/script and soapui/xml test types which are auto registered during the Testkube install by default. As Testkube was designed with flexibility in mind, you can add your own executors to handle additional test types.","title":"Testkube Tests"},{"location":"tests-creating/#test-source","text":"Tests can be currently created from multiple sources: A simple file with the test content, For example, with Postman collections, we're exporting the collection as a JSON file. For cURL executors, we're passing a JSON file with the configured cURL command. String - we can also define the content of the test as a string Git directory - we can pass repository , path and branch where our tests are stored. This is used in Cypress executor as Cypress tests are more like npm-based projects which can have a lot of files. We are handling sparse checkouts which are fast even in the case of huge mono-repos. Git file - similarly to Git directories, we can use files located on Git by specifying git-uri and branch . Note: not all executors support all input types. Please refer to the individual executors' documentation to see which options are available.","title":"Test Source"},{"location":"tests-creating/#create-a-test","text":"","title":"Create a Test"},{"location":"tests-creating/#create-your-first-test-from-a-file-postman-collection-test","text":"To create your first Postman collection in Testkube, export your collection into a file. Right click on your collection name: Click the Export button: Save in a convenient location. In this example, we are using ~/Downloads/TODO.postman_collection.json path. Create a Testkube test using the exported JSON and give it a unique and fitting name. For simplicity's sake we used test in this example. kubectl testkube create test --file ~/Downloads/TODO.postman_collection.json --name test Output: Detected test type postman/collection Test created test \ud83e\udd47 Test created! Now we have a reusable test.","title":"Create Your First Test from a File (Postman Collection Test)"},{"location":"tests-creating/#updating-tests","text":"If you need to update your test after change in Postman, re-export it to a file and run the update command: kubectl testkube update test --file ~/Downloads/TODO.postman_collection.json --name test To check if the test was created correctly, look at the Test Custom Resource in your Kubernetes cluster: Output: Detected test test type postman/collection Test updated test \ud83e\udd47 Testkube will override all test settings and content with the update method.","title":"Updating Tests"},{"location":"tests-creating/#checking-test-content","text":"Let's see what has been created: kubectl get tests -ntestkube Output: NAME AGE test 32s Get the details of a test: kubectl get tests -ntestkube test-example -oyaml ``` sh $ kubectl testkube get test test name: test type_: postman/collection content: | - { \"info\" : { \"_postman_id\" : \"b40de9fe-9201-4b03-8ca2-3064d9027dd6\" , \"name\" : \"TODO\" , \"schema\" : \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\" } , \"item\" : [ { \"name\" : \"Create TODO\" , \"event\" : [ { \"listen\" : \"test\" , \"script\" : { \"exec\" : [ \"pm.test(\\\"Status code is 201 CREATED\\\", function () {\" , \" pm.response.to.have.status(201);\" , \"});\" , \"\" , \"\" , \"pm.test(\\\"Check if todo item craeted successfully\\\", function() {\" , \" var json = pm.response.json();\" , \" pm.environment.set(\\\"item\\\", json.url);\" , \" pm.sendRequest(json.url, function (err, response) {\" , \" var json = pm.response.json();\" , \" pm.expect(json.title).to.eq(\\\"Create video for conference\\\");\" , \"\" , \" });\" , \" console.log(\\\"creating\\\", pm.environment.get(\\\"item\\\"))\" , \"})\" , \"\" , \"\" ] , \"type\" : \"text/javascript\" } } , { \"listen\" : \"prerequest\" , \"script\" : { \"exec\" : [ \"\" ] , \"type\" : \"text/javascript\" } } ] , \"protocolProfileBehavior\" : { \"disabledSystemHeaders\" : {} } , \"request\" : { \"method\" : \"POST\" , \"header\" : [ { \"key\" : \"Content-Type\" , \"value\" : \"application/json\" , \"type\" : \"text\" } ] , \"body\" : { \"mode\" : \"raw\" , \"raw\" : \"{\\\"title\\\":\\\"Create video for conference\\\",\\\"order\\\":1,\\\"completed\\\":false}\" } , \"url\" : { \"raw\" : \"{{uri}}\" , \"host\" : [ \"{{uri}}\" ] } } , \"response\" : [] } , { \"name\" : \"Complete TODO item\" , \"event\" : [ { \"listen\" : \"prerequest\" , \"script\" : { \"exec\" : [ \"console.log(\\\"completing\\\", pm.environment.get(\\\"item\\\"))\" ] , \"type\" : \"text/javascript\" } } ] , \"request\" : { \"method\" : \"PATCH\" , \"header\" : [ { \"key\" : \"Content-Type\" , \"value\" : \"application/json\" , \"type\" : \"text\" } ] , \"body\" : { \"mode\" : \"raw\" , \"raw\" : \"{\\\"completed\\\": true}\" } , \"url\" : { \"raw\" : \"{{item}}\" , \"host\" : [ \"{{item}}\" ] } } , \"response\" : [] } , { \"name\" : \"Delete TODO item\" , \"event\" : [ { \"listen\" : \"prerequest\" , \"script\" : { \"exec\" : [ \"console.log(\\\"deleting\\\", pm.environment.get(\\\"item\\\"))\" ] , \"type\" : \"text/javatest\" } } , { \"listen\" : \"test\" , \"script\" : { \"exec\" : [ \"pm.test(\\\"Status code is 204 no content\\\", function () {\" , \" pm.response.to.have.status(204);\" , \"});\" ] , \"type\" : \"text/javascript\" } } ] , \"request\" : { \"method\" : \"DELETE\" , \"header\" : [] , \"url\" : { \"raw\" : \"{{item}}\" , \"host\" : [ \"{{item}}\" ] } } , \"response\" : [] } ] , \"event\" : [ { \"listen\" : \"prerequest\" , \"script\" : { \"type\" : \"text/javascript\" , \"exec\" : [ \"\" ] } } , { \"listen\" : \"test\" , \"script\" : { \"type\" : \"text/javascript\" , \"exec\" : [ \"\" ] } } ] , \"variable\" : [ { \"key\" : \"uri\" , \"value\" : \"http://34.74.127.60:8080/todos\" } , { \"key\" : \"item\" , \"value\" : null } ] } We can see that the test resource was created with Postman collection JSON content. You can also check tests with the standard kubectl command which will list the tests Custom Resource. kubectl get tests -n testkube test -oyaml","title":"Checking Test Content"},{"location":"tests-creating/#create-a-test-from-git","text":"Some executors can handle files and some can handle only git resources. You'll need to follow the particular executor readme file to be aware which test types the executor handles. Let's assume that a Cypress project is created in a git repository - https://github.com/kubeshop/testkube-executor-cypress/tree/main/examples - where examples is a test directory in the https://github.com/kubeshop/testkube-executor-cypress.git repository. Now we can create our Cypress-based test as shown below. In git based tests, we need to pass the test type. kubectl testkube create test --uri https://github.com/kubeshop/testkube-executor-cypress.git --git-branch main --git-path examples --name kubeshop-cypress --type cypress/project Output: Test created kubeshop-cypress \ud83e\udd47 Let's check how the test created by Testkube is defined in the cluster: $ kubectl get tests -n testkube kubeshop-cypress -o yaml apiVersion: tests.testkube.io/v1 kind: Test metadata: creationTimestamp: \"2021-11-17T12:29:32Z\" generation: 1 name: kubeshop-cypress namespace: testkube resourceVersion: \"225162\" uid: f0d856aa-04fc-4238-bb4c-156ff82b4741 spec: repository: branch: main path: examples type: git uri: https://github.com/kubeshop/testkube-executor-cypress.git type: cypress/project As we can see, this test has spec.repository with git repository data. This data can now be used by the executor to download test data.","title":"Create a Test from Git"},{"location":"tests-creating/#summary","text":"Tests are the main smallest abstractions over test suites in Testkube, they can be created with different sources and used by executors to run on top of a particular test framework.","title":"Summary"},{"location":"tests-getting-results/","text":"Getting Testkube Test Execution Results We saw how simple it is to create and run Testkube tests execution. Obtaining test results is also simple. Getting Test Executions After Test is Executed After each run, Testkube informs you that you can get results of a given test execution. kubectl testkube run test api-incluster-test Output: Type : postman/collection Name : api-incluster-test Execution ID : 615d6398b046f8fbd3d955d4 Execution name: openly-full-bream Test queued for execution Use the following command to get test execution details: $ kubectl testkube get execution 615d6398b046f8fbd3d955d4 Or watch test execution until complete: $ kubectl testkube watch execution 615d6398b046f8fbd3d955d4 kubectl testkube get execution 615d6398b046f8fbd3d955d4 - is for getting string output of test execution, where 615d6398b046f8fbd3d955d4 is the test execution ID. Change the Output Format of Execution Results By default, Testkube returns string output of a particular executor. It can also return JSON or Go-Template based outputs. JSON output Sometimes you need to parse test results programatically. To simplify this task, test execution results can be in JSON format. kubectl testkube get execution 615d7e1ab046f8fbd3d955d6 -ojson { \"id\" : \"615d7e1ab046f8fbd3d955d6\" , \"testName\" : \"api-incluster-test\" , \"testType\" : \"postman/collection\" , \"name\" : \"monthly-sure-finch\" , \"executionResult\" : { \"status\" : \"passed\" , \"startTime\" : \"2021-10-06T10:44:46.338Z\" , \"endTime\" : \"2021-10-06T10:44:46.933Z\" , \"output\" : \"newman\\n\\nAPI-Health\\n\\n\u2192 Health\\n GET http://testkube-api-server:8088/health [200 OK, 124B, 282ms]\\n \u2713 Status code is 200\\n\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502 \u2502 executed \u2502 failed \u2502\\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n\u2502 iterations \u2502 1 \u2502 0 \u2502\\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n\u2502 requests \u2502 1 \u2502 0 \u2502\\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n\u2502 test-tests \u2502 2 \u2502 0 \u2502\\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n\u2502 prerequest-tests \u2502 1 \u2502 0 \u2502\\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n\u2502 assertions \u2502 1 \u2502 0 \u2502\\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n\u2502 total run duration: 519ms \u2502\\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n\u2502 total data received: 8B (approx) \u2502\\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n\u2502 average response time: 282ms [min: 282ms, max: 282ms, s.d.: 0\u00b5s] \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\" , \"outputType\" : \"text/plain\" , \"steps\" : [{ \"name\" : \"Health\" , \"duration\" : \"282ms\" , \"status\" : \"passed\" , \"assertionResults\" : [{ \"name\" : \"Status code is 200\" , \"status\" : \"passed\" }]}]}} It is quite easy to parse data from test executions with tools like jq or in other programmatic ways. Need Non-standard Output? Go-Template for the Rescue If you need non-standard test execution output, you can easily use ouput -o go with the passed --go-template template content. kubectl testkube get execution 615d7e1ab046f8fbd3d955d6 -ogo --go-template = '{{.Name}} {{.Id}} {{.ExecutionResult.Status}}' Output: monthly-sure-finch 615d7e1ab046f8fbd3d955d6 success Getting a List of Test Executions Getting a List of Recent Executions We can get a list of current executions with use of the executions subcommand: kubectl testkube get executions Output: TEST | TYPE | NAME | ID | STATUS +---------------------+--------------------+------+--------------------------+---------+ api-incluster-test | postman/collection | | 615d7e1ab046f8fbd3d955d6 | success api-incluster-test | postman/collection | | 615d6398b046f8fbd3d955d4 | success kubeshop-cypress | cypress/project | | 615d5372b046f8fbd3d955d2 | success kubeshop-cypress | cypress/project | | 615d5265b046f8fbd3d955d0 | error cypress-example | cypress/project | | 615d4fe6b046f8fbd3d955ce | error cypress-example | cypress/project | | 615d4556b046f8fbd3d955cc | error Now we can use an ID to check the results: kubectl testkube get execution 615d5265b046f8fbd3d955d0 Getting a List of Executions in Different Formats Terminal mode table data is not always best when processing results in code or shell tests. To simplify this, we have implemented JSON or Go-Template based results when getting results lists. JSON Getting JSON results is quite easy, just pass the -o json flag to the command: kubectl testkube get executions -ojson { \"totals\" : { \"results\" :17, \"passed\" :7, \"failed\" :10, \"queued\" :0, \"pending\" :0 } , \"results\" : [{ \"id\" : \"615d7e1ab046f8fbd3d955d6\" , \"name\" : \"\" , \"testName\" : \"api-incluster-test\" , \"testType\" : \"postman/collection\" , \"status\" : \"passed\" , \"startTime\" : \"2021-10-06T10:44:46.338Z\" , \"endTime\" : \"2021-10-06T10:44:46.933Z\" } , { \"id\" : \"615d6398b046f8fbd3d955d4\" , \"name\" : \"\" , \"testName\" : \"api-incluster-test\" , \"testType\" : \"postman/collection\" , \"status\" : \"passed\" , \"startTime\" : \"2021-10-06T08:51:39.834Z\" , \"endTime\" : \"2021-10-06T08:51:40.432Z\" } , { \"id\" : \"615d5372b046f8fbd3d955d2\" , \"name\" : \"\" , \"testName\" : \"kubeshop-cypress\" , \"testType\" : \"cypress/project\" , \"status\" : \"passed\" , \"startTime\" : \"0001-01-01T00:00:00Z\" , \"endTime\" : \"2021-10-06T07:44:30.025Z\" } , { \"id\" : \"615d5265b046f8fbd3d955d0\" , \"name\" : \"\" , \"testName\" : \"kubeshop-cypress\" , \"testType\" : \"cypress/project\" , \"status\" : \"failed\" , \"startTime\" : \"0001-01-01T00:00:00Z\" , \"endTime\" : \"2021-10-06T07:40:09.261Z\" } , { \"id\" : \"615d4fe6b046f8fbd3d955ce\" , \"name\" : \"\" , \"testName\" : \"cypress-example\" , \"testType\" : \"cypress/project\" , \"status\" : \"failed\" , \"startTime\" : \"0001-01-01T00:00:00Z\" , \"endTime\" : \"2021-10-06T07:28:54.579Z\" } , { \"id\" : \"615d4556b046f8fbd3d955cc\" , \"name\" : \"\" , \"testName\" : \"cypress-example\" , \"testType\" : \"cypress/project\" , \"status\" : \"failed\" , \"startTime\" : \"0001-01-01T00:00:00Z\" , \"endTime\" : \"2021-10-06T06:43:44.1Z\" } , { \"id\" : \"615d43d3b046f8fbd3d955ca\" , \"name\" : \"\" , \"testName\" : \"cypress-example\" , \"testType\" : \"cypress/project\" , \"status\" : \"failed\" , \"startTime\" : \"0001-01-01T00:00:00Z\" , \"endTime\" : \"2021-10-06T06:37:52.601Z\" } , { \"id\" : \"6155cd7db046f8fbd3d955c8\" , \"name\" : \"\" , \"testName\" : \"postman-test-7f6qrm\" , \"testType\" : \"postman/collection\" , \"status\" : \"passed\" , \"startTime\" : \"2021-09-30T14:45:20.819Z\" , \"endTime\" : \"2021-09-30T14:45:21.419Z\" } , { \"id\" : \"6155cd67b046f8fbd3d955c6\" , \"name\" : \"\" , \"testName\" : \"sanity\" , \"testType\" : \"postman/collection\" , \"status\" : \"failed\" , \"startTime\" : \"0001-01-01T00:00:00Z\" , \"endTime\" : \"2021-09-30T14:45:00.135Z\" } , { \"id\" : \"615322f3f47de75f31ae7a06\" , \"name\" : \"\" , \"testName\" : \"long-1\" , \"testType\" : \"postman/collection\" , \"status\" : \"passed\" , \"startTime\" : \"2021-09-28T14:13:11.293Z\" , \"endTime\" : \"2021-09-28T14:13:45.271Z\" } , { \"id\" : \"61532298f47de75f31ae7a04\" , \"name\" : \"\" , \"testName\" : \"long-1\" , \"testType\" : \"postman/collection\" , \"status\" : \"passed\" , \"startTime\" : \"2021-09-28T14:11:39.179Z\" , \"endTime\" : \"2021-09-28T14:12:15.202Z\" } , { \"id\" : \"6151b4b342189df67944968e\" , \"name\" : \"\" , \"testName\" : \"postman-test-7f6qrm\" , \"testType\" : \"postman/collection\" , \"status\" : \"passed\" , \"startTime\" : \"2021-09-27T12:10:31.581Z\" , \"endTime\" : \"2021-09-27T12:10:32.105Z\" } , { \"id\" : \"6151b49d42189df67944968c\" , \"name\" : \"\" , \"testName\" : \"curl-test\" , \"testType\" : \"curl/test\" , \"status\" : \"failed\" , \"startTime\" : \"0001-01-01T00:00:00Z\" , \"endTime\" : \"2021-09-27T12:10:06.954Z\" } , { \"id\" : \"6151b41742189df67944968a\" , \"name\" : \"\" , \"testName\" : \"curl-test\" , \"testType\" : \"curl/test\" , \"status\" : \"failed\" , \"startTime\" : \"0001-01-01T00:00:00Z\" , \"endTime\" : \"2021-09-27T12:07:52.893Z\" } , { \"id\" : \"6151b41342189df679449688\" , \"name\" : \"\" , \"testName\" : \"curl-test\" , \"testType\" : \"curl/test\" , \"status\" : \"failed\" , \"startTime\" : \"0001-01-01T00:00:00Z\" , \"endTime\" : \"2021-09-27T12:07:48.868Z\" } , { \"id\" : \"6151b40f42189df679449686\" , \"name\" : \"\" , \"testName\" : \"curl-test\" , \"testType\" : \"curl/test\" , \"status\" : \"failed\" , \"startTime\" : \"0001-01-01T00:00:00Z\" , \"endTime\" : \"2021-09-27T12:07:44.89Z\" } , { \"id\" : \"6151b40b42189df679449684\" , \"name\" : \"\" , \"testName\" : \"curl-test\" , \"testType\" : \"curl/test\" , \"status\" : \"failed\" , \"startTime\" : \"0001-01-01T00:00:00Z\" , \"endTime\" : \"2021-09-27T12:07:41.168Z\" }]} Go-Template To get a list of test excution IDs with their corresponding statuses with go-template: kubectl testkube get executions -ogo --go-template '{{.Id}}:{{.Status}} ' 615d7e1ab046f8fbd3d955d6:success 615d6398b046f8fbd3d955d4:success 615d5372b046f8fbd3d955d2:success 615d5265b046f8fbd3d955d0:error 615d4fe6b046f8fbd3d955ce:error 615d4556b046f8fbd3d955cc:error 615d43d3b046f8fbd3d955ca:error 6155cd7db046f8fbd3d955c8:success 6155cd67b046f8fbd3d955c6:error 615322f3f47de75f31ae7a06:success 61532298f47de75f31ae7a04:success 6151b4b342189df67944968e:success 6151b49d42189df67944968c:error 6151b41742189df67944968a:error 6151b41342189df679449688:error 6151b40f42189df679449686:error 6151b40b42189df679449684:error Getting a List of Executions of a Given Test To find the execution of a particular test, pass the test name as a parameter: kubectl testkube get executions api-incluster-test Output: TEST | TYPE | NAME | ID | STATUS +--------------------+--------------------+------+--------------------------+---------+ api-incluster-test | postman/collection | | 615d6398b046f8fbd3d955d4 | success api-incluster-test | postman/collection | | 615d7e1ab046f8fbd3d955d6 | success","title":"Getting Results"},{"location":"tests-getting-results/#getting-testkube-test-execution-results","text":"We saw how simple it is to create and run Testkube tests execution. Obtaining test results is also simple.","title":"Getting Testkube Test Execution Results"},{"location":"tests-getting-results/#getting-test-executions-after-test-is-executed","text":"After each run, Testkube informs you that you can get results of a given test execution. kubectl testkube run test api-incluster-test Output: Type : postman/collection Name : api-incluster-test Execution ID : 615d6398b046f8fbd3d955d4 Execution name: openly-full-bream Test queued for execution Use the following command to get test execution details: $ kubectl testkube get execution 615d6398b046f8fbd3d955d4 Or watch test execution until complete: $ kubectl testkube watch execution 615d6398b046f8fbd3d955d4 kubectl testkube get execution 615d6398b046f8fbd3d955d4 - is for getting string output of test execution, where 615d6398b046f8fbd3d955d4 is the test execution ID.","title":"Getting Test Executions After Test is Executed"},{"location":"tests-getting-results/#change-the-output-format-of-execution-results","text":"By default, Testkube returns string output of a particular executor. It can also return JSON or Go-Template based outputs.","title":"Change the Output Format of Execution Results"},{"location":"tests-getting-results/#json-output","text":"Sometimes you need to parse test results programatically. To simplify this task, test execution results can be in JSON format. kubectl testkube get execution 615d7e1ab046f8fbd3d955d6 -ojson { \"id\" : \"615d7e1ab046f8fbd3d955d6\" , \"testName\" : \"api-incluster-test\" , \"testType\" : \"postman/collection\" , \"name\" : \"monthly-sure-finch\" , \"executionResult\" : { \"status\" : \"passed\" , \"startTime\" : \"2021-10-06T10:44:46.338Z\" , \"endTime\" : \"2021-10-06T10:44:46.933Z\" , \"output\" : \"newman\\n\\nAPI-Health\\n\\n\u2192 Health\\n GET http://testkube-api-server:8088/health [200 OK, 124B, 282ms]\\n \u2713 Status code is 200\\n\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502 \u2502 executed \u2502 failed \u2502\\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n\u2502 iterations \u2502 1 \u2502 0 \u2502\\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n\u2502 requests \u2502 1 \u2502 0 \u2502\\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n\u2502 test-tests \u2502 2 \u2502 0 \u2502\\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n\u2502 prerequest-tests \u2502 1 \u2502 0 \u2502\\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n\u2502 assertions \u2502 1 \u2502 0 \u2502\\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n\u2502 total run duration: 519ms \u2502\\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n\u2502 total data received: 8B (approx) \u2502\\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n\u2502 average response time: 282ms [min: 282ms, max: 282ms, s.d.: 0\u00b5s] \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\" , \"outputType\" : \"text/plain\" , \"steps\" : [{ \"name\" : \"Health\" , \"duration\" : \"282ms\" , \"status\" : \"passed\" , \"assertionResults\" : [{ \"name\" : \"Status code is 200\" , \"status\" : \"passed\" }]}]}} It is quite easy to parse data from test executions with tools like jq or in other programmatic ways.","title":"JSON output"},{"location":"tests-getting-results/#need-non-standard-output-go-template-for-the-rescue","text":"If you need non-standard test execution output, you can easily use ouput -o go with the passed --go-template template content. kubectl testkube get execution 615d7e1ab046f8fbd3d955d6 -ogo --go-template = '{{.Name}} {{.Id}} {{.ExecutionResult.Status}}' Output: monthly-sure-finch 615d7e1ab046f8fbd3d955d6 success","title":"Need Non-standard Output? Go-Template for the Rescue"},{"location":"tests-getting-results/#getting-a-list-of-test-executions","text":"","title":"Getting a List of Test Executions"},{"location":"tests-getting-results/#getting-a-list-of-recent-executions","text":"We can get a list of current executions with use of the executions subcommand: kubectl testkube get executions Output: TEST | TYPE | NAME | ID | STATUS +---------------------+--------------------+------+--------------------------+---------+ api-incluster-test | postman/collection | | 615d7e1ab046f8fbd3d955d6 | success api-incluster-test | postman/collection | | 615d6398b046f8fbd3d955d4 | success kubeshop-cypress | cypress/project | | 615d5372b046f8fbd3d955d2 | success kubeshop-cypress | cypress/project | | 615d5265b046f8fbd3d955d0 | error cypress-example | cypress/project | | 615d4fe6b046f8fbd3d955ce | error cypress-example | cypress/project | | 615d4556b046f8fbd3d955cc | error Now we can use an ID to check the results: kubectl testkube get execution 615d5265b046f8fbd3d955d0","title":"Getting a List of Recent Executions"},{"location":"tests-getting-results/#getting-a-list-of-executions-in-different-formats","text":"Terminal mode table data is not always best when processing results in code or shell tests. To simplify this, we have implemented JSON or Go-Template based results when getting results lists.","title":"Getting a List of Executions in Different Formats"},{"location":"tests-getting-results/#json","text":"Getting JSON results is quite easy, just pass the -o json flag to the command: kubectl testkube get executions -ojson { \"totals\" : { \"results\" :17, \"passed\" :7, \"failed\" :10, \"queued\" :0, \"pending\" :0 } , \"results\" : [{ \"id\" : \"615d7e1ab046f8fbd3d955d6\" , \"name\" : \"\" , \"testName\" : \"api-incluster-test\" , \"testType\" : \"postman/collection\" , \"status\" : \"passed\" , \"startTime\" : \"2021-10-06T10:44:46.338Z\" , \"endTime\" : \"2021-10-06T10:44:46.933Z\" } , { \"id\" : \"615d6398b046f8fbd3d955d4\" , \"name\" : \"\" , \"testName\" : \"api-incluster-test\" , \"testType\" : \"postman/collection\" , \"status\" : \"passed\" , \"startTime\" : \"2021-10-06T08:51:39.834Z\" , \"endTime\" : \"2021-10-06T08:51:40.432Z\" } , { \"id\" : \"615d5372b046f8fbd3d955d2\" , \"name\" : \"\" , \"testName\" : \"kubeshop-cypress\" , \"testType\" : \"cypress/project\" , \"status\" : \"passed\" , \"startTime\" : \"0001-01-01T00:00:00Z\" , \"endTime\" : \"2021-10-06T07:44:30.025Z\" } , { \"id\" : \"615d5265b046f8fbd3d955d0\" , \"name\" : \"\" , \"testName\" : \"kubeshop-cypress\" , \"testType\" : \"cypress/project\" , \"status\" : \"failed\" , \"startTime\" : \"0001-01-01T00:00:00Z\" , \"endTime\" : \"2021-10-06T07:40:09.261Z\" } , { \"id\" : \"615d4fe6b046f8fbd3d955ce\" , \"name\" : \"\" , \"testName\" : \"cypress-example\" , \"testType\" : \"cypress/project\" , \"status\" : \"failed\" , \"startTime\" : \"0001-01-01T00:00:00Z\" , \"endTime\" : \"2021-10-06T07:28:54.579Z\" } , { \"id\" : \"615d4556b046f8fbd3d955cc\" , \"name\" : \"\" , \"testName\" : \"cypress-example\" , \"testType\" : \"cypress/project\" , \"status\" : \"failed\" , \"startTime\" : \"0001-01-01T00:00:00Z\" , \"endTime\" : \"2021-10-06T06:43:44.1Z\" } , { \"id\" : \"615d43d3b046f8fbd3d955ca\" , \"name\" : \"\" , \"testName\" : \"cypress-example\" , \"testType\" : \"cypress/project\" , \"status\" : \"failed\" , \"startTime\" : \"0001-01-01T00:00:00Z\" , \"endTime\" : \"2021-10-06T06:37:52.601Z\" } , { \"id\" : \"6155cd7db046f8fbd3d955c8\" , \"name\" : \"\" , \"testName\" : \"postman-test-7f6qrm\" , \"testType\" : \"postman/collection\" , \"status\" : \"passed\" , \"startTime\" : \"2021-09-30T14:45:20.819Z\" , \"endTime\" : \"2021-09-30T14:45:21.419Z\" } , { \"id\" : \"6155cd67b046f8fbd3d955c6\" , \"name\" : \"\" , \"testName\" : \"sanity\" , \"testType\" : \"postman/collection\" , \"status\" : \"failed\" , \"startTime\" : \"0001-01-01T00:00:00Z\" , \"endTime\" : \"2021-09-30T14:45:00.135Z\" } , { \"id\" : \"615322f3f47de75f31ae7a06\" , \"name\" : \"\" , \"testName\" : \"long-1\" , \"testType\" : \"postman/collection\" , \"status\" : \"passed\" , \"startTime\" : \"2021-09-28T14:13:11.293Z\" , \"endTime\" : \"2021-09-28T14:13:45.271Z\" } , { \"id\" : \"61532298f47de75f31ae7a04\" , \"name\" : \"\" , \"testName\" : \"long-1\" , \"testType\" : \"postman/collection\" , \"status\" : \"passed\" , \"startTime\" : \"2021-09-28T14:11:39.179Z\" , \"endTime\" : \"2021-09-28T14:12:15.202Z\" } , { \"id\" : \"6151b4b342189df67944968e\" , \"name\" : \"\" , \"testName\" : \"postman-test-7f6qrm\" , \"testType\" : \"postman/collection\" , \"status\" : \"passed\" , \"startTime\" : \"2021-09-27T12:10:31.581Z\" , \"endTime\" : \"2021-09-27T12:10:32.105Z\" } , { \"id\" : \"6151b49d42189df67944968c\" , \"name\" : \"\" , \"testName\" : \"curl-test\" , \"testType\" : \"curl/test\" , \"status\" : \"failed\" , \"startTime\" : \"0001-01-01T00:00:00Z\" , \"endTime\" : \"2021-09-27T12:10:06.954Z\" } , { \"id\" : \"6151b41742189df67944968a\" , \"name\" : \"\" , \"testName\" : \"curl-test\" , \"testType\" : \"curl/test\" , \"status\" : \"failed\" , \"startTime\" : \"0001-01-01T00:00:00Z\" , \"endTime\" : \"2021-09-27T12:07:52.893Z\" } , { \"id\" : \"6151b41342189df679449688\" , \"name\" : \"\" , \"testName\" : \"curl-test\" , \"testType\" : \"curl/test\" , \"status\" : \"failed\" , \"startTime\" : \"0001-01-01T00:00:00Z\" , \"endTime\" : \"2021-09-27T12:07:48.868Z\" } , { \"id\" : \"6151b40f42189df679449686\" , \"name\" : \"\" , \"testName\" : \"curl-test\" , \"testType\" : \"curl/test\" , \"status\" : \"failed\" , \"startTime\" : \"0001-01-01T00:00:00Z\" , \"endTime\" : \"2021-09-27T12:07:44.89Z\" } , { \"id\" : \"6151b40b42189df679449684\" , \"name\" : \"\" , \"testName\" : \"curl-test\" , \"testType\" : \"curl/test\" , \"status\" : \"failed\" , \"startTime\" : \"0001-01-01T00:00:00Z\" , \"endTime\" : \"2021-09-27T12:07:41.168Z\" }]}","title":"JSON"},{"location":"tests-getting-results/#go-template","text":"To get a list of test excution IDs with their corresponding statuses with go-template: kubectl testkube get executions -ogo --go-template '{{.Id}}:{{.Status}} ' 615d7e1ab046f8fbd3d955d6:success 615d6398b046f8fbd3d955d4:success 615d5372b046f8fbd3d955d2:success 615d5265b046f8fbd3d955d0:error 615d4fe6b046f8fbd3d955ce:error 615d4556b046f8fbd3d955cc:error 615d43d3b046f8fbd3d955ca:error 6155cd7db046f8fbd3d955c8:success 6155cd67b046f8fbd3d955c6:error 615322f3f47de75f31ae7a06:success 61532298f47de75f31ae7a04:success 6151b4b342189df67944968e:success 6151b49d42189df67944968c:error 6151b41742189df67944968a:error 6151b41342189df679449688:error 6151b40f42189df679449686:error 6151b40b42189df679449684:error","title":"Go-Template"},{"location":"tests-getting-results/#getting-a-list-of-executions-of-a-given-test","text":"To find the execution of a particular test, pass the test name as a parameter: kubectl testkube get executions api-incluster-test Output: TEST | TYPE | NAME | ID | STATUS +--------------------+--------------------+------+--------------------------+---------+ api-incluster-test | postman/collection | | 615d6398b046f8fbd3d955d4 | success api-incluster-test | postman/collection | | 615d7e1ab046f8fbd3d955d6 | success","title":"Getting a List of Executions of a Given Test"},{"location":"tests-running/","text":"Running Testkube Tests Tests are stored in Kubernetes clusters as Custom Resources. Testkube tests are reusable and can get results with the use of kubectl testkube plugin or with an API. Running Running tests looks the same for any type of test. In this example, we have previously created a test with the name api-incluster-test . Standard Run Command This is an example of the simplest run command: kubectl testkube run test api-incluster-test Output: Type : postman/collection Name : api-incluster-test Execution ID : 615d6398b046f8fbd3d955d4 Execution name: openly-full-bream Test queued for execution Use the following command to get test execution details: $ kubectl testkube get execution 615d6398b046f8fbd3d955d4 Or watch test execution until complete: $ kubectl testkube watch execution 615d6398b046f8fbd3d955d4 Testkube will inform us about possible commands to get test results: kubectl testkube get execution 615d6398b046f8fbd3d955d4 to get execution details. kubectl testkube watch execution 615d6398b046f8fbd3d955d4 to watch the current pending execution. Watch will also get details when a test is completed and is good for long running tests to lock your terminal until test execution completes. Run with Watch for Changes If we want to wait until a test execution completes we can pass the -f flag (follow) to the test run command: kubectl testkube run test api-incluster-test -f Output: Type : postman/collection Name : api-incluster-test Execution ID : 615d7e1ab046f8fbd3d955d6 Execution name: monthly-sure-finch Test queued for execution Use the following command to get test execution details: $ kubectl testkube get execution 615d7e1ab046f8fbd3d955d6 Or watch test execution until complete: $ kubectl testkube watch execution 615d7e1ab046f8fbd3d955d6 Watching for changes Status: pending, Duration: 222 .387ms Status: pending, Duration: 1 .210689s Status: pending, Duration: 2 .201346s Status: pending, Duration: 3 .198539s Status: success, Duration: 595ms Getting results Name: monthly-sure-finch, Status: success, Duration: 595ms newman API-Health \u2192 Health GET http://testkube-api-server:8088/health [ 200 OK, 124B, 282ms ] \u2713 Status code is 200 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 executed \u2502 failed \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 iterations \u2502 1 \u2502 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 requests \u2502 1 \u2502 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 test-scripts \u2502 2 \u2502 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 prerequest-scripts \u2502 1 \u2502 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 assertions \u2502 1 \u2502 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 total run duration: 519ms \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 total data received: 8B ( approx ) \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 average response time: 282ms [ min: 282ms, max: 282ms, s.d.: 0\u00b5s ] \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Use the following command to get test execution details: $ kubectl testkube get execution 615d7e1ab046f8fbd3d955d6 Test execution completed in 595ms This command will wait until the test execution completes. Passing Parameters For some 'real world' tests, configuration variables are passed in order to run them on different environments or with different test configurations. Let's assume that our example Cypress test needs the testparam parameter with the value testvalue . This is done by using the -p parameter. If you need to pass more parameters, simply pass multiple -p flags. It's possible to pass parameters securely to the executed test. It's necessary to use --secret flag, which contains a key value pair - a name of the kubernetes secret and a secret key. Pass it multiple times if needed. kubectl testkube run test kubeshop-cypress -p testparam = testvalue -f --secret secret-name = secret-key Output: Type : cypress/project Name : kubeshop-cypress Execution ID : 615d5372b046f8fbd3d955d2 Execution name: nominally-able-glider Test queued for execution Use the following command to get test execution details: $ kubectl testkube get execution 615d5372b046f8fbd3d955d2 or watch test execution until complete: $ kubectl testkube watch execution 615d5372b046f8fbd3d955d2 Watching for changes Status: queued, Duration: 0s Status: pending, Duration: 383 .064ms .... Status: pending, Duration: 1m45.405939s Status: success, Duration: 1m45.405939s Getting results Name: nominally-able-glider, Status: success, Duration: 2562047h47m16.854775807s ==================================================================================================== ( Run Starting ) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Cypress: 8 .5.0 \u2502 \u2502 Browser: Electron 91 ( headless ) \u2502 \u2502 Specs: 1 found ( simple-test.js ) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Running: simple-test.js ( 1 of 1 ) ( Results ) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Tests: 1 \u2502 \u2502 Passing: 1 \u2502 \u2502 Failing: 0 \u2502 \u2502 Pending: 0 \u2502 \u2502 Skipped: 0 \u2502 \u2502 Screenshots: 0 \u2502 \u2502 Video: true \u2502 \u2502 Duration: 19 seconds \u2502 \u2502 Spec Ran: simple-test.js \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 ( Video ) - Started processing: Compressing to 32 CRF Compression progress: 39 % Compression progress: 81 % - Finished processing: /tmp/testkube-scripts531364188/repo/examples/cypress/videos/ ( 30 seconds ) simple-test.js.mp4 Compression progress: 100 % ==================================================================================================== ( Run Finished ) Spec Tests Passing Failing Pending Skipped \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2714 simple-test.js 00 :19 1 1 - - - \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2714 All specs passed! 00 :19 1 1 - - - Use the following command to get test execution details: $ kubectl testkube get execution 615d5372b046f8fbd3d955d2 Test execution completed in 1m45.405939s Summary As we can see, running tests in Kubernetes cluster is really easy with use of the Testkube kubectl plugin!","title":"Running"},{"location":"tests-running/#running-testkube-tests","text":"Tests are stored in Kubernetes clusters as Custom Resources. Testkube tests are reusable and can get results with the use of kubectl testkube plugin or with an API.","title":"Running Testkube Tests"},{"location":"tests-running/#running","text":"Running tests looks the same for any type of test. In this example, we have previously created a test with the name api-incluster-test .","title":"Running"},{"location":"tests-running/#standard-run-command","text":"This is an example of the simplest run command: kubectl testkube run test api-incluster-test Output: Type : postman/collection Name : api-incluster-test Execution ID : 615d6398b046f8fbd3d955d4 Execution name: openly-full-bream Test queued for execution Use the following command to get test execution details: $ kubectl testkube get execution 615d6398b046f8fbd3d955d4 Or watch test execution until complete: $ kubectl testkube watch execution 615d6398b046f8fbd3d955d4 Testkube will inform us about possible commands to get test results: kubectl testkube get execution 615d6398b046f8fbd3d955d4 to get execution details. kubectl testkube watch execution 615d6398b046f8fbd3d955d4 to watch the current pending execution. Watch will also get details when a test is completed and is good for long running tests to lock your terminal until test execution completes.","title":"Standard Run Command"},{"location":"tests-running/#run-with-watch-for-changes","text":"If we want to wait until a test execution completes we can pass the -f flag (follow) to the test run command: kubectl testkube run test api-incluster-test -f Output: Type : postman/collection Name : api-incluster-test Execution ID : 615d7e1ab046f8fbd3d955d6 Execution name: monthly-sure-finch Test queued for execution Use the following command to get test execution details: $ kubectl testkube get execution 615d7e1ab046f8fbd3d955d6 Or watch test execution until complete: $ kubectl testkube watch execution 615d7e1ab046f8fbd3d955d6 Watching for changes Status: pending, Duration: 222 .387ms Status: pending, Duration: 1 .210689s Status: pending, Duration: 2 .201346s Status: pending, Duration: 3 .198539s Status: success, Duration: 595ms Getting results Name: monthly-sure-finch, Status: success, Duration: 595ms newman API-Health \u2192 Health GET http://testkube-api-server:8088/health [ 200 OK, 124B, 282ms ] \u2713 Status code is 200 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 executed \u2502 failed \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 iterations \u2502 1 \u2502 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 requests \u2502 1 \u2502 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 test-scripts \u2502 2 \u2502 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 prerequest-scripts \u2502 1 \u2502 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 assertions \u2502 1 \u2502 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 total run duration: 519ms \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 total data received: 8B ( approx ) \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 average response time: 282ms [ min: 282ms, max: 282ms, s.d.: 0\u00b5s ] \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Use the following command to get test execution details: $ kubectl testkube get execution 615d7e1ab046f8fbd3d955d6 Test execution completed in 595ms This command will wait until the test execution completes.","title":"Run with Watch for Changes"},{"location":"tests-running/#passing-parameters","text":"For some 'real world' tests, configuration variables are passed in order to run them on different environments or with different test configurations. Let's assume that our example Cypress test needs the testparam parameter with the value testvalue . This is done by using the -p parameter. If you need to pass more parameters, simply pass multiple -p flags. It's possible to pass parameters securely to the executed test. It's necessary to use --secret flag, which contains a key value pair - a name of the kubernetes secret and a secret key. Pass it multiple times if needed. kubectl testkube run test kubeshop-cypress -p testparam = testvalue -f --secret secret-name = secret-key Output: Type : cypress/project Name : kubeshop-cypress Execution ID : 615d5372b046f8fbd3d955d2 Execution name: nominally-able-glider Test queued for execution Use the following command to get test execution details: $ kubectl testkube get execution 615d5372b046f8fbd3d955d2 or watch test execution until complete: $ kubectl testkube watch execution 615d5372b046f8fbd3d955d2 Watching for changes Status: queued, Duration: 0s Status: pending, Duration: 383 .064ms .... Status: pending, Duration: 1m45.405939s Status: success, Duration: 1m45.405939s Getting results Name: nominally-able-glider, Status: success, Duration: 2562047h47m16.854775807s ==================================================================================================== ( Run Starting ) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Cypress: 8 .5.0 \u2502 \u2502 Browser: Electron 91 ( headless ) \u2502 \u2502 Specs: 1 found ( simple-test.js ) \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Running: simple-test.js ( 1 of 1 ) ( Results ) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Tests: 1 \u2502 \u2502 Passing: 1 \u2502 \u2502 Failing: 0 \u2502 \u2502 Pending: 0 \u2502 \u2502 Skipped: 0 \u2502 \u2502 Screenshots: 0 \u2502 \u2502 Video: true \u2502 \u2502 Duration: 19 seconds \u2502 \u2502 Spec Ran: simple-test.js \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 ( Video ) - Started processing: Compressing to 32 CRF Compression progress: 39 % Compression progress: 81 % - Finished processing: /tmp/testkube-scripts531364188/repo/examples/cypress/videos/ ( 30 seconds ) simple-test.js.mp4 Compression progress: 100 % ==================================================================================================== ( Run Finished ) Spec Tests Passing Failing Pending Skipped \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2714 simple-test.js 00 :19 1 1 - - - \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2714 All specs passed! 00 :19 1 1 - - - Use the following command to get test execution details: $ kubectl testkube get execution 615d5372b046f8fbd3d955d2 Test execution completed in 1m45.405939s","title":"Passing Parameters"},{"location":"tests-running/#summary","text":"As we can see, running tests in Kubernetes cluster is really easy with use of the Testkube kubectl plugin!","title":"Summary"},{"location":"tests-variables/","text":"Using Test Variables To synchronize Testkube's feature set between the CLI and the UI, Test variables can be defined in the UI. On the Tests screen, select a Test and click on the Settings tab and select Variables & Secrets : Any variables already existing for that Test will be shown. To create a Test variable, click Add Variable and provide desired values. The types available for Test variables are Basic and Secret.","title":"Adding Test Variables"},{"location":"tests-variables/#using-test-variables","text":"To synchronize Testkube's feature set between the CLI and the UI, Test variables can be defined in the UI. On the Tests screen, select a Test and click on the Settings tab and select Variables & Secrets : Any variables already existing for that Test will be shown. To create a Test variable, click Add Variable and provide desired values. The types available for Test variables are Basic and Secret.","title":"Using Test Variables"},{"location":"testsuites-creating/","text":"Test Suites A large IT department has a frontend team and a backend team, everything is deployed on Kubernetes cluster, and each team is responsible for its part of the work. The frontend engineers test their code using the Cypress testing framework, but the backend engineers prefer simpler tools like Postman. They have a lot of Postman collections defined and want to run them against a Kubernetes cluster but some of their services are not exposed externally. A QA leader is responsible for release trains and wants to be sure that before the release all tests are completed successfully. The QA leader will need to create pipelines that orchestrate each teams' tests into a common platform. This is easily done with Testkube. Each team can run their tests against clusters on their own, and the QA manager can create test resources and add tests written by all teams. Test Suites stands for the orchestration of different test steps such as test execution, delay, or other (future) steps. Test Suite Creation Creating tests is really simple - create the test definition in a JSON file and pass it to the testkube kubectl plugin. An example test file could look like this: echo ' { \"name\": \"testkube-suite\", \"description\": \"Testkube test suite, api, dashboard and performance\", \"steps\": [ {\"execute\": {\"name\": \"testkube-api\"}}, {\"delay\": {\"duration\": 1000}}, {\"execute\": {\"name\": \"testkube-dashboard\"}}, {\"delay\": {\"duration\": 1000}}, {\"execute\": {\"name\": \"testkube-api-performance\"}}, {\"delay\": {\"duration\": 1000}}, {\"execute\": {\"name\": \"testkube-homepage-performance\"}} ] }' | kubectl testkube create testsuite To check if the test was created correctly, you can look at TestSuite Custom Resource in your Kubernetes cluster: kubectl get testsuites -ntestkube NAME AGE testkube-suite 1m testsuite-example-2 2d21h Get the details of a test: kubectl get testsuites -ntestkube testkube-suite -oyaml apiVersion: tests.testkube.io/v1 kind: Test metadata: creationTimestamp: \"2022-01-11T07:46:12Z\" generation: 4 name: test-example namespace: testkube-suite resourceVersion: \"57695094\" uid: ea90a79e-bb46-49ee-a3ef-a5d99cee0a2c spec: description: Example simple tests orchestration steps: steps: - execute: name: testkube-api - delay: duration: 1000 - execute: name: testkube-dashboard - delay: duration: 1000 - execute: name: testkube-api-performance - delay: duration: 1000 - execute: name: testkube-homepage-performance Your Test Suite is defined and you can start running testing workflows.","title":"Creating"},{"location":"testsuites-creating/#test-suites","text":"A large IT department has a frontend team and a backend team, everything is deployed on Kubernetes cluster, and each team is responsible for its part of the work. The frontend engineers test their code using the Cypress testing framework, but the backend engineers prefer simpler tools like Postman. They have a lot of Postman collections defined and want to run them against a Kubernetes cluster but some of their services are not exposed externally. A QA leader is responsible for release trains and wants to be sure that before the release all tests are completed successfully. The QA leader will need to create pipelines that orchestrate each teams' tests into a common platform. This is easily done with Testkube. Each team can run their tests against clusters on their own, and the QA manager can create test resources and add tests written by all teams. Test Suites stands for the orchestration of different test steps such as test execution, delay, or other (future) steps.","title":"Test Suites"},{"location":"testsuites-creating/#test-suite-creation","text":"Creating tests is really simple - create the test definition in a JSON file and pass it to the testkube kubectl plugin. An example test file could look like this: echo ' { \"name\": \"testkube-suite\", \"description\": \"Testkube test suite, api, dashboard and performance\", \"steps\": [ {\"execute\": {\"name\": \"testkube-api\"}}, {\"delay\": {\"duration\": 1000}}, {\"execute\": {\"name\": \"testkube-dashboard\"}}, {\"delay\": {\"duration\": 1000}}, {\"execute\": {\"name\": \"testkube-api-performance\"}}, {\"delay\": {\"duration\": 1000}}, {\"execute\": {\"name\": \"testkube-homepage-performance\"}} ] }' | kubectl testkube create testsuite To check if the test was created correctly, you can look at TestSuite Custom Resource in your Kubernetes cluster: kubectl get testsuites -ntestkube NAME AGE testkube-suite 1m testsuite-example-2 2d21h Get the details of a test: kubectl get testsuites -ntestkube testkube-suite -oyaml apiVersion: tests.testkube.io/v1 kind: Test metadata: creationTimestamp: \"2022-01-11T07:46:12Z\" generation: 4 name: test-example namespace: testkube-suite resourceVersion: \"57695094\" uid: ea90a79e-bb46-49ee-a3ef-a5d99cee0a2c spec: description: Example simple tests orchestration steps: steps: - execute: name: testkube-api - delay: duration: 1000 - execute: name: testkube-dashboard - delay: duration: 1000 - execute: name: testkube-api-performance - delay: duration: 1000 - execute: name: testkube-homepage-performance Your Test Suite is defined and you can start running testing workflows.","title":"Test Suite Creation"},{"location":"testsuites-getting-results/","text":"Getting a List of Recent Test Executions To get recent results, call the tests executions subcommand: kubectl testkube get tse ID | TEST NAME | EXECUTION NAME | STATUS | STEPS +--------------------------+--------------+-------------------------------------+---------+-------+ 61e1142465e59a318346512b | test-example | test-example.equally-enabled-heron | success | 3 61e1136165e59a3183465125 | test-example | test-example.fairly-humble-tick | success | 3 61dff61867326ad521b2a0d6 | test-example | test-example.verbally-merry-hagfish | success | 3 61dfe0de69b7bfcb9058dad0 | test-example | test-example.overly-exciting-krill | success | 3 Getting a Single Test Execution With the test execution ID, you can get single test results: kubectl testkube get tse 61e1136165e59a3183465125 Name: test-example.fairly-humble-tick Status: success STEP | STATUS | ID | ERROR +----------------------------+---------+--------------------------+-------+ run test: testkube/test1 | success | 61e1136165e59a3183465127 | delay 2000ms | success | | run test: testkube/test1 | success | 61e1136765e59a3183465129 | Use the following command to get test execution details: $ kubectl testkube get tse 61e1136165e59a3183465125 Test Suite steps that are running workflows based on Test Custom Resources have a Test Execution ID. You can get the details of each in a separate command: kubectl testkube get execution 61e1136165e59a3183465127Name: test-example-test1, Status: success, Duration: 4 .677s newman TODO \u2192 Create TODO POST http://34.74.127.60:8080/todos [ 201 Created, 296B, 100ms ] \u2713 Status code is 201 CREATED \u250c \u2502 'creating' , 'http://34.74.127.60:8080/todos/50' \u2514 \u2713 Check if todo item craeted successfully GET http://34.74.127.60:8080/todos/50 [ 200 OK, 291B, 8ms ] \u2192 Complete TODO item \u250c \u2502 'completing' , 'http://34.74.127.60:8080/todos/50' \u2514 PATCH http://34.74.127.60:8080/todos/50 [ 200 OK, 290B, 8ms ] \u2192 Delete TODO item \u250c \u2502 'deleting' , 'http://34.74.127.60:8080/todos/50' \u2514 DELETE http://34.74.127.60:8080/todos/50 [ 204 No Content, 113B, 7ms ] \u2713 Status code is 204 no content \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 executed \u2502 failed \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 iterations \u2502 1 \u2502 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 requests \u2502 4 \u2502 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 test-scripts \u2502 5 \u2502 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 prerequest-scripts \u2502 6 \u2502 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 assertions \u2502 3 \u2502 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 total run duration: 283ms \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 total data received: 353B ( approx ) \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 average response time: 30ms [ min: 7ms, max: 100ms, s.d.: 39ms ] \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"Getting results"},{"location":"testsuites-getting-results/#getting-a-list-of-recent-test-executions","text":"To get recent results, call the tests executions subcommand: kubectl testkube get tse ID | TEST NAME | EXECUTION NAME | STATUS | STEPS +--------------------------+--------------+-------------------------------------+---------+-------+ 61e1142465e59a318346512b | test-example | test-example.equally-enabled-heron | success | 3 61e1136165e59a3183465125 | test-example | test-example.fairly-humble-tick | success | 3 61dff61867326ad521b2a0d6 | test-example | test-example.verbally-merry-hagfish | success | 3 61dfe0de69b7bfcb9058dad0 | test-example | test-example.overly-exciting-krill | success | 3","title":"Getting a List of Recent Test Executions"},{"location":"testsuites-getting-results/#getting-a-single-test-execution","text":"With the test execution ID, you can get single test results: kubectl testkube get tse 61e1136165e59a3183465125 Name: test-example.fairly-humble-tick Status: success STEP | STATUS | ID | ERROR +----------------------------+---------+--------------------------+-------+ run test: testkube/test1 | success | 61e1136165e59a3183465127 | delay 2000ms | success | | run test: testkube/test1 | success | 61e1136765e59a3183465129 | Use the following command to get test execution details: $ kubectl testkube get tse 61e1136165e59a3183465125 Test Suite steps that are running workflows based on Test Custom Resources have a Test Execution ID. You can get the details of each in a separate command: kubectl testkube get execution 61e1136165e59a3183465127Name: test-example-test1, Status: success, Duration: 4 .677s newman TODO \u2192 Create TODO POST http://34.74.127.60:8080/todos [ 201 Created, 296B, 100ms ] \u2713 Status code is 201 CREATED \u250c \u2502 'creating' , 'http://34.74.127.60:8080/todos/50' \u2514 \u2713 Check if todo item craeted successfully GET http://34.74.127.60:8080/todos/50 [ 200 OK, 291B, 8ms ] \u2192 Complete TODO item \u250c \u2502 'completing' , 'http://34.74.127.60:8080/todos/50' \u2514 PATCH http://34.74.127.60:8080/todos/50 [ 200 OK, 290B, 8ms ] \u2192 Delete TODO item \u250c \u2502 'deleting' , 'http://34.74.127.60:8080/todos/50' \u2514 DELETE http://34.74.127.60:8080/todos/50 [ 204 No Content, 113B, 7ms ] \u2713 Status code is 204 no content \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 executed \u2502 failed \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 iterations \u2502 1 \u2502 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 requests \u2502 4 \u2502 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 test-scripts \u2502 5 \u2502 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 prerequest-scripts \u2502 6 \u2502 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 assertions \u2502 3 \u2502 0 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 total run duration: 283ms \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 total data received: 353B ( approx ) \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 average response time: 30ms [ min: 7ms, max: 100ms, s.d.: 39ms ] \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"Getting a Single Test Execution"},{"location":"testsuites-running/","text":"Running Test Suites To run your Tests Suites, pass testsuites run command with the test name to your kubectl testkube plugin. Test Suites are started asynchronously by default. kubectl testkube run testsuite test-example Name: test-example.fairly-humble-tick Status: pending STEP | STATUS | ID | ERROR +------+--------+----+-------+ Use the following command to get test suite execution details: $ kubectl testkube get tse 61e1136165e59a3183465125 Use the following command to get test suite execution details: $ kubectl testkube watch tse 61e1136165e59a3183465125 After the test is started, you can check the current status of the test with tests execution EXECUTION_ID . Running Testsuites Synchronously You can start a testsuite synchronously by passing the -f flag (like --follow) to your command: kubectl testkube run testsuite test-example -f Name: test-example.equally-enabled-heron Status: pending STEP | STATUS | ID | ERROR +------+--------+----+-------+ ... STEP | STATUS | ID | ERROR +----------------------------+---------+--------------------------+-------+ run test: testkube/test1 | success | 61e1142465e59a318346512d | Name: test-example.equally-enabled-heron Status: pending STEP | STATUS | ID | ERROR +----------------------------+---------+--------------------------+-------+ run test: testkube/test1 | success | 61e1142465e59a318346512d | delay 2000ms | success | | ... Name: test-example.equally-enabled-heron Status: success STEP | STATUS | ID | ERROR +----------------------------+---------+--------------------------+-------+ run test: testkube/test1 | success | 61e1142465e59a318346512d | delay 2000ms | success | | run test: testkube/test1 | success | 61e1142a65e59a318346512f | Use the following command to get test execution details: $ kubectl testkube get tse 61e1142465e59a318346512b","title":"Running"},{"location":"testsuites-running/#running-test-suites","text":"To run your Tests Suites, pass testsuites run command with the test name to your kubectl testkube plugin. Test Suites are started asynchronously by default. kubectl testkube run testsuite test-example Name: test-example.fairly-humble-tick Status: pending STEP | STATUS | ID | ERROR +------+--------+----+-------+ Use the following command to get test suite execution details: $ kubectl testkube get tse 61e1136165e59a3183465125 Use the following command to get test suite execution details: $ kubectl testkube watch tse 61e1136165e59a3183465125 After the test is started, you can check the current status of the test with tests execution EXECUTION_ID .","title":"Running Test Suites"},{"location":"testsuites-running/#running-testsuites-synchronously","text":"You can start a testsuite synchronously by passing the -f flag (like --follow) to your command: kubectl testkube run testsuite test-example -f Name: test-example.equally-enabled-heron Status: pending STEP | STATUS | ID | ERROR +------+--------+----+-------+ ... STEP | STATUS | ID | ERROR +----------------------------+---------+--------------------------+-------+ run test: testkube/test1 | success | 61e1142465e59a318346512d | Name: test-example.equally-enabled-heron Status: pending STEP | STATUS | ID | ERROR +----------------------------+---------+--------------------------+-------+ run test: testkube/test1 | success | 61e1142465e59a318346512d | delay 2000ms | success | | ... Name: test-example.equally-enabled-heron Status: success STEP | STATUS | ID | ERROR +----------------------------+---------+--------------------------+-------+ run test: testkube/test1 | success | 61e1142465e59a318346512d | delay 2000ms | success | | run test: testkube/test1 | success | 61e1142a65e59a318346512f | Use the following command to get test execution details: $ kubectl testkube get tse 61e1142465e59a318346512b","title":"Running Testsuites Synchronously"},{"location":"cli/kubectl-testkube/","text":"kubectl-testkube Testkube entrypoint for kubectl plugin kubectl-testkube [flags] Options -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") -h, --help help for kubectl-testkube --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages SEE ALSO kubectl-testkube abort - Abort tests or test suites kubectl-testkube completion - Generate the autocompletion script for the specified shell kubectl-testkube config - Set feature configuration value kubectl-testkube create - Create resource kubectl-testkube create-ticket - Create bug ticket kubectl-testkube dashboard - Open testkube dashboard kubectl-testkube debug - Print environment information for debugging kubectl-testkube delete - Delete resources kubectl-testkube disable - Disable feature kubectl-testkube download - Artifacts management commands kubectl-testkube enable - Enable feature kubectl-testkube generate - Generate resources commands kubectl-testkube get - Get resources kubectl-testkube init - Install Helm chart registry in current kubectl context and update dependencies kubectl-testkube migrate - manual migrate command kubectl-testkube purge - Uninstall Helm chart registry from current kubectl context kubectl-testkube run - Runs tests or test suites kubectl-testkube status - Show status of feature or resource kubectl-testkube update - Update resource kubectl-testkube upgrade - Upgrade Helm chart, install dependencies and run migrations kubectl-testkube version - Shows version and build info kubectl-testkube watch - Watch tests or test suites","title":"Overview"},{"location":"cli/kubectl-testkube/#kubectl-testkube","text":"Testkube entrypoint for kubectl plugin kubectl-testkube [flags]","title":"kubectl-testkube"},{"location":"cli/kubectl-testkube/#options","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") -h, --help help for kubectl-testkube --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages","title":"Options"},{"location":"cli/kubectl-testkube/#see-also","text":"kubectl-testkube abort - Abort tests or test suites kubectl-testkube completion - Generate the autocompletion script for the specified shell kubectl-testkube config - Set feature configuration value kubectl-testkube create - Create resource kubectl-testkube create-ticket - Create bug ticket kubectl-testkube dashboard - Open testkube dashboard kubectl-testkube debug - Print environment information for debugging kubectl-testkube delete - Delete resources kubectl-testkube disable - Disable feature kubectl-testkube download - Artifacts management commands kubectl-testkube enable - Enable feature kubectl-testkube generate - Generate resources commands kubectl-testkube get - Get resources kubectl-testkube init - Install Helm chart registry in current kubectl context and update dependencies kubectl-testkube migrate - manual migrate command kubectl-testkube purge - Uninstall Helm chart registry from current kubectl context kubectl-testkube run - Runs tests or test suites kubectl-testkube status - Show status of feature or resource kubectl-testkube update - Update resource kubectl-testkube upgrade - Upgrade Helm chart, install dependencies and run migrations kubectl-testkube version - Shows version and build info kubectl-testkube watch - Watch tests or test suites","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_abort/","text":"kubectl-testkube abort Abort tests or test suites kubectl-testkube abort <resourceName> [flags] Options -h, --help help for abort Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages SEE ALSO kubectl-testkube - Testkube entrypoint for kubectl plugin kubectl-testkube abort execution - Aborts execution of the test","title":"Abort Command"},{"location":"cli/kubectl-testkube_abort/#kubectl-testkube-abort","text":"Abort tests or test suites kubectl-testkube abort <resourceName> [flags]","title":"kubectl-testkube abort"},{"location":"cli/kubectl-testkube_abort/#options","text":"-h, --help help for abort","title":"Options"},{"location":"cli/kubectl-testkube_abort/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_abort/#see-also","text":"kubectl-testkube - Testkube entrypoint for kubectl plugin kubectl-testkube abort execution - Aborts execution of the test","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_abort_execution/","text":"kubectl-testkube abort execution Aborts execution of the test kubectl-testkube abort execution <executionID> [flags] Options -h, --help help for execution Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages SEE ALSO kubectl-testkube abort - Abort tests or test suites","title":"Kubectl testkube abort execution"},{"location":"cli/kubectl-testkube_abort_execution/#kubectl-testkube-abort-execution","text":"Aborts execution of the test kubectl-testkube abort execution <executionID> [flags]","title":"kubectl-testkube abort execution"},{"location":"cli/kubectl-testkube_abort_execution/#options","text":"-h, --help help for execution","title":"Options"},{"location":"cli/kubectl-testkube_abort_execution/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_abort_execution/#see-also","text":"kubectl-testkube abort - Abort tests or test suites","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_completion/","text":"kubectl-testkube completion Generate the autocompletion script for the specified shell Synopsis Generate the autocompletion script for kubectl-testkube for the specified shell. See each sub-command's help for details on how to use the generated script. Options -h, --help help for completion Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages SEE ALSO kubectl-testkube - Testkube entrypoint for kubectl plugin kubectl-testkube completion bash - Generate the autocompletion script for bash kubectl-testkube completion fish - Generate the autocompletion script for fish kubectl-testkube completion powershell - Generate the autocompletion script for powershell kubectl-testkube completion zsh - Generate the autocompletion script for zsh","title":"Completion Command"},{"location":"cli/kubectl-testkube_completion/#kubectl-testkube-completion","text":"Generate the autocompletion script for the specified shell","title":"kubectl-testkube completion"},{"location":"cli/kubectl-testkube_completion/#synopsis","text":"Generate the autocompletion script for kubectl-testkube for the specified shell. See each sub-command's help for details on how to use the generated script.","title":"Synopsis"},{"location":"cli/kubectl-testkube_completion/#options","text":"-h, --help help for completion","title":"Options"},{"location":"cli/kubectl-testkube_completion/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_completion/#see-also","text":"kubectl-testkube - Testkube entrypoint for kubectl plugin kubectl-testkube completion bash - Generate the autocompletion script for bash kubectl-testkube completion fish - Generate the autocompletion script for fish kubectl-testkube completion powershell - Generate the autocompletion script for powershell kubectl-testkube completion zsh - Generate the autocompletion script for zsh","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_completion_bash/","text":"kubectl-testkube completion bash Generate the autocompletion script for bash Synopsis Generate the autocompletion script for the bash shell. This script depends on the 'bash-completion' package. If it is not installed already, you can install it via your OS's package manager. To load completions in your current shell session: source <(kubectl-testkube completion bash) To load completions for every new session, execute once: Linux: kubectl-testkube completion bash > /etc/bash_completion.d/kubectl-testkube macOS: kubectl-testkube completion bash > $(brew --prefix)/etc/bash_completion.d/kubectl-testkube You will need to start a new shell for this setup to take effect. kubectl-testkube completion bash Options -h, --help help for bash --no-descriptions disable completion descriptions Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages SEE ALSO kubectl-testkube completion - Generate the autocompletion script for the specified shell","title":"Kubectl testkube completion bash"},{"location":"cli/kubectl-testkube_completion_bash/#kubectl-testkube-completion-bash","text":"Generate the autocompletion script for bash","title":"kubectl-testkube completion bash"},{"location":"cli/kubectl-testkube_completion_bash/#synopsis","text":"Generate the autocompletion script for the bash shell. This script depends on the 'bash-completion' package. If it is not installed already, you can install it via your OS's package manager. To load completions in your current shell session: source <(kubectl-testkube completion bash) To load completions for every new session, execute once:","title":"Synopsis"},{"location":"cli/kubectl-testkube_completion_bash/#linux","text":"kubectl-testkube completion bash > /etc/bash_completion.d/kubectl-testkube","title":"Linux:"},{"location":"cli/kubectl-testkube_completion_bash/#macos","text":"kubectl-testkube completion bash > $(brew --prefix)/etc/bash_completion.d/kubectl-testkube You will need to start a new shell for this setup to take effect. kubectl-testkube completion bash","title":"macOS:"},{"location":"cli/kubectl-testkube_completion_bash/#options","text":"-h, --help help for bash --no-descriptions disable completion descriptions","title":"Options"},{"location":"cli/kubectl-testkube_completion_bash/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_completion_bash/#see-also","text":"kubectl-testkube completion - Generate the autocompletion script for the specified shell","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_completion_fish/","text":"kubectl-testkube completion fish Generate the autocompletion script for fish Synopsis Generate the autocompletion script for the fish shell. To load completions in your current shell session: kubectl-testkube completion fish | source To load completions for every new session, execute once: kubectl-testkube completion fish > ~/.config/fish/completions/kubectl-testkube.fish You will need to start a new shell for this setup to take effect. kubectl-testkube completion fish [flags] Options -h, --help help for fish --no-descriptions disable completion descriptions Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages SEE ALSO kubectl-testkube completion - Generate the autocompletion script for the specified shell","title":"Kubectl testkube completion fish"},{"location":"cli/kubectl-testkube_completion_fish/#kubectl-testkube-completion-fish","text":"Generate the autocompletion script for fish","title":"kubectl-testkube completion fish"},{"location":"cli/kubectl-testkube_completion_fish/#synopsis","text":"Generate the autocompletion script for the fish shell. To load completions in your current shell session: kubectl-testkube completion fish | source To load completions for every new session, execute once: kubectl-testkube completion fish > ~/.config/fish/completions/kubectl-testkube.fish You will need to start a new shell for this setup to take effect. kubectl-testkube completion fish [flags]","title":"Synopsis"},{"location":"cli/kubectl-testkube_completion_fish/#options","text":"-h, --help help for fish --no-descriptions disable completion descriptions","title":"Options"},{"location":"cli/kubectl-testkube_completion_fish/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_completion_fish/#see-also","text":"kubectl-testkube completion - Generate the autocompletion script for the specified shell","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_completion_powershell/","text":"kubectl-testkube completion powershell Generate the autocompletion script for powershell Synopsis Generate the autocompletion script for powershell. To load completions in your current shell session: kubectl-testkube completion powershell | Out-String | Invoke-Expression To load completions for every new session, add the output of the above command to your powershell profile. kubectl-testkube completion powershell [flags] Options -h, --help help for powershell --no-descriptions disable completion descriptions Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages SEE ALSO kubectl-testkube completion - Generate the autocompletion script for the specified shell","title":"Kubectl testkube completion powershell"},{"location":"cli/kubectl-testkube_completion_powershell/#kubectl-testkube-completion-powershell","text":"Generate the autocompletion script for powershell","title":"kubectl-testkube completion powershell"},{"location":"cli/kubectl-testkube_completion_powershell/#synopsis","text":"Generate the autocompletion script for powershell. To load completions in your current shell session: kubectl-testkube completion powershell | Out-String | Invoke-Expression To load completions for every new session, add the output of the above command to your powershell profile. kubectl-testkube completion powershell [flags]","title":"Synopsis"},{"location":"cli/kubectl-testkube_completion_powershell/#options","text":"-h, --help help for powershell --no-descriptions disable completion descriptions","title":"Options"},{"location":"cli/kubectl-testkube_completion_powershell/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_completion_powershell/#see-also","text":"kubectl-testkube completion - Generate the autocompletion script for the specified shell","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_completion_zsh/","text":"kubectl-testkube completion zsh Generate the autocompletion script for zsh Synopsis Generate the autocompletion script for the zsh shell. If shell completion is not already enabled in your environment you will need to enable it. You can execute the following once: echo \"autoload -U compinit; compinit\" >> ~/.zshrc To load completions in your current shell session: source <(kubectl-testkube completion zsh); compdef _kubectl-testkube kubectl-testkube To load completions for every new session, execute once: Linux: kubectl-testkube completion zsh > \"${fpath[1]}/_kubectl-testkube\" macOS: kubectl-testkube completion zsh > $(brew --prefix)/share/zsh/site-functions/_kubectl-testkube You will need to start a new shell for this setup to take effect. kubectl-testkube completion zsh [flags] Options -h, --help help for zsh --no-descriptions disable completion descriptions Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages SEE ALSO kubectl-testkube completion - Generate the autocompletion script for the specified shell","title":"Kubectl testkube completion zsh"},{"location":"cli/kubectl-testkube_completion_zsh/#kubectl-testkube-completion-zsh","text":"Generate the autocompletion script for zsh","title":"kubectl-testkube completion zsh"},{"location":"cli/kubectl-testkube_completion_zsh/#synopsis","text":"Generate the autocompletion script for the zsh shell. If shell completion is not already enabled in your environment you will need to enable it. You can execute the following once: echo \"autoload -U compinit; compinit\" >> ~/.zshrc To load completions in your current shell session: source <(kubectl-testkube completion zsh); compdef _kubectl-testkube kubectl-testkube To load completions for every new session, execute once:","title":"Synopsis"},{"location":"cli/kubectl-testkube_completion_zsh/#linux","text":"kubectl-testkube completion zsh > \"${fpath[1]}/_kubectl-testkube\"","title":"Linux:"},{"location":"cli/kubectl-testkube_completion_zsh/#macos","text":"kubectl-testkube completion zsh > $(brew --prefix)/share/zsh/site-functions/_kubectl-testkube You will need to start a new shell for this setup to take effect. kubectl-testkube completion zsh [flags]","title":"macOS:"},{"location":"cli/kubectl-testkube_completion_zsh/#options","text":"-h, --help help for zsh --no-descriptions disable completion descriptions","title":"Options"},{"location":"cli/kubectl-testkube_completion_zsh/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_completion_zsh/#see-also","text":"kubectl-testkube completion - Generate the autocompletion script for the specified shell","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_config/","text":"kubectl-testkube config Set feature configuration value kubectl-testkube config <feature> <value> [flags] Options -h, --help help for config Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages SEE ALSO kubectl-testkube - Testkube entrypoint for kubectl plugin kubectl-testkube config api-uri - Set api uri for testkube client kubectl-testkube config namespace - Set namespace for testkube client kubectl-testkube config oauth - Set oauth credentials for api uri in testkube client","title":"Config Command"},{"location":"cli/kubectl-testkube_config/#kubectl-testkube-config","text":"Set feature configuration value kubectl-testkube config <feature> <value> [flags]","title":"kubectl-testkube config"},{"location":"cli/kubectl-testkube_config/#options","text":"-h, --help help for config","title":"Options"},{"location":"cli/kubectl-testkube_config/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_config/#see-also","text":"kubectl-testkube - Testkube entrypoint for kubectl plugin kubectl-testkube config api-uri - Set api uri for testkube client kubectl-testkube config namespace - Set namespace for testkube client kubectl-testkube config oauth - Set oauth credentials for api uri in testkube client","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_config_api-uri/","text":"kubectl-testkube config api-uri Set api uri for testkube client kubectl-testkube config api-uri <value> [flags] Options -h, --help help for api-uri Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages SEE ALSO kubectl-testkube config - Set feature configuration value","title":"Kubectl testkube config api uri"},{"location":"cli/kubectl-testkube_config_api-uri/#kubectl-testkube-config-api-uri","text":"Set api uri for testkube client kubectl-testkube config api-uri <value> [flags]","title":"kubectl-testkube config api-uri"},{"location":"cli/kubectl-testkube_config_api-uri/#options","text":"-h, --help help for api-uri","title":"Options"},{"location":"cli/kubectl-testkube_config_api-uri/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_config_api-uri/#see-also","text":"kubectl-testkube config - Set feature configuration value","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_config_namespace/","text":"kubectl-testkube config namespace Set namespace for testkube client kubectl-testkube config namespace <value> [flags] Options -h, --help help for namespace Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages SEE ALSO kubectl-testkube config - Set feature configuration value","title":"Kubectl testkube config namespace"},{"location":"cli/kubectl-testkube_config_namespace/#kubectl-testkube-config-namespace","text":"Set namespace for testkube client kubectl-testkube config namespace <value> [flags]","title":"kubectl-testkube config namespace"},{"location":"cli/kubectl-testkube_config_namespace/#options","text":"-h, --help help for namespace","title":"Options"},{"location":"cli/kubectl-testkube_config_namespace/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_config_namespace/#see-also","text":"kubectl-testkube config - Set feature configuration value","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_config_oauth/","text":"kubectl-testkube config oauth Set oauth credentials for api uri in testkube client kubectl-testkube config oauth <value> [flags] Options --client-id string client id for authentication provider --client-secret string client secret for authentication provider -h, --help help for oauth --provider string authentication provider, currently available: github (default \"github\") --scope stringArray scope for authentication provider Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages SEE ALSO kubectl-testkube config - Set feature configuration value","title":"Kubectl testkube config oauth"},{"location":"cli/kubectl-testkube_config_oauth/#kubectl-testkube-config-oauth","text":"Set oauth credentials for api uri in testkube client kubectl-testkube config oauth <value> [flags]","title":"kubectl-testkube config oauth"},{"location":"cli/kubectl-testkube_config_oauth/#options","text":"--client-id string client id for authentication provider --client-secret string client secret for authentication provider -h, --help help for oauth --provider string authentication provider, currently available: github (default \"github\") --scope stringArray scope for authentication provider","title":"Options"},{"location":"cli/kubectl-testkube_config_oauth/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_config_oauth/#see-also","text":"kubectl-testkube config - Set feature configuration value","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_create-ticket/","text":"kubectl-testkube create-ticket Create bug ticket Synopsis Create an issue of type bug in the Testkube repository kubectl-testkube create-ticket [flags] Options -h, --help help for create-ticket Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages SEE ALSO kubectl-testkube - Testkube entrypoint for kubectl plugin","title":"Kubectl testkube create ticket"},{"location":"cli/kubectl-testkube_create-ticket/#kubectl-testkube-create-ticket","text":"Create bug ticket","title":"kubectl-testkube create-ticket"},{"location":"cli/kubectl-testkube_create-ticket/#synopsis","text":"Create an issue of type bug in the Testkube repository kubectl-testkube create-ticket [flags]","title":"Synopsis"},{"location":"cli/kubectl-testkube_create-ticket/#options","text":"-h, --help help for create-ticket","title":"Options"},{"location":"cli/kubectl-testkube_create-ticket/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_create-ticket/#see-also","text":"kubectl-testkube - Testkube entrypoint for kubectl plugin","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_create/","text":"kubectl-testkube create Create resource kubectl-testkube create <resourceName> [flags] Options --crd-only generate only crd -h, --help help for create Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages SEE ALSO kubectl-testkube - Testkube entrypoint for kubectl plugin kubectl-testkube create executor - Create new Executor kubectl-testkube create test - Create new Test kubectl-testkube create testsuite - Create new TestSuite kubectl-testkube create webhook - Create new Webhook","title":"Create Command"},{"location":"cli/kubectl-testkube_create/#kubectl-testkube-create","text":"Create resource kubectl-testkube create <resourceName> [flags]","title":"kubectl-testkube create"},{"location":"cli/kubectl-testkube_create/#options","text":"--crd-only generate only crd -h, --help help for create","title":"Options"},{"location":"cli/kubectl-testkube_create/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_create/#see-also","text":"kubectl-testkube - Testkube entrypoint for kubectl plugin kubectl-testkube create executor - Create new Executor kubectl-testkube create test - Create new Test kubectl-testkube create testsuite - Create new TestSuite kubectl-testkube create webhook - Create new Webhook","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_create_executor/","text":"kubectl-testkube create executor Create new Executor Synopsis Create new Executor Custom Resource kubectl-testkube create executor [flags] Options --executor-type string executor type (defaults to job) (default \"job\") -h, --help help for executor -i, --image string if uri is git repository we can set additional branch parameter -j, --job-template string if executor needs to be launched using custom job specification -l, --label stringToString label key value pair: --label key1=value1 (default []) -n, --name string unique test name - mandatory -t, --types stringArray types handled by executor -u, --uri string if resource need to be loaded from URI Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --crd-only generate only crd --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages SEE ALSO kubectl-testkube create - Create resource","title":"Kubectl testkube create executor"},{"location":"cli/kubectl-testkube_create_executor/#kubectl-testkube-create-executor","text":"Create new Executor","title":"kubectl-testkube create executor"},{"location":"cli/kubectl-testkube_create_executor/#synopsis","text":"Create new Executor Custom Resource kubectl-testkube create executor [flags]","title":"Synopsis"},{"location":"cli/kubectl-testkube_create_executor/#options","text":"--executor-type string executor type (defaults to job) (default \"job\") -h, --help help for executor -i, --image string if uri is git repository we can set additional branch parameter -j, --job-template string if executor needs to be launched using custom job specification -l, --label stringToString label key value pair: --label key1=value1 (default []) -n, --name string unique test name - mandatory -t, --types stringArray types handled by executor -u, --uri string if resource need to be loaded from URI","title":"Options"},{"location":"cli/kubectl-testkube_create_executor/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --crd-only generate only crd --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_create_executor/#see-also","text":"kubectl-testkube create - Create resource","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_create_test/","text":"kubectl-testkube create test Create new Test Synopsis Create new Test Custom Resource kubectl-testkube create test [flags] Options --env stringToString envs in a form of name1=val1 passed to executor (default []) --execution-name string execution name, if empty will be autogenerated --executor-args stringArray executor binary additional arguments -f, --file string test file - will be read from stdin if not specified --git-branch string if uri is git repository we can set additional branch parameter --git-commit string if uri is git repository we can use commit id (sha) parameter --git-path string if repository is big we need to define additional path to directory/file to checkout partially --git-token string if git repository is private we can use token as an auth parameter --git-token-secret stringToString git token secret in a form of secret_name1=secret_key1 for private repository (default []) --git-uri string Git repository uri --git-username string if git repository is private we can use username as an auth parameter --git-username-secret stringToString git username secret in a form of secret_name1=secret_key1 for private repository (default []) -h, --help help for test --http-proxy string http proxy for executor containers --https-proxy string https proxy for executor containers -l, --label stringToString label key value pair: --label key1=value1 (default []) -n, --name string unique test name - mandatory --schedule string test schedule in a cronjob form: * * * * * --secret-env stringToString secret envs in a form of secret_name1=secret_key1 passed to executor (default []) -s, --secret-variable stringToString secret variable key value pair: --secret-variable key1=value1 (default []) --secret-variable-reference stringToString secret variable references in a form name1=secret_name1=secret_key1 (default []) --test-content-type string content type of test one of string|file-uri|git-file|git-dir -t, --type string test type (defaults to postman/collection) --uri string URI of resource - will be loaded by http GET -v, --variable stringToString variable key value pair: --variable key1=value1 (default []) --variables-file string variables file path, e.g. postman env file - will be passed to executor if supported Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --crd-only generate only crd --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages SEE ALSO kubectl-testkube create - Create resource","title":"Kubectl testkube create test"},{"location":"cli/kubectl-testkube_create_test/#kubectl-testkube-create-test","text":"Create new Test","title":"kubectl-testkube create test"},{"location":"cli/kubectl-testkube_create_test/#synopsis","text":"Create new Test Custom Resource kubectl-testkube create test [flags]","title":"Synopsis"},{"location":"cli/kubectl-testkube_create_test/#options","text":"--env stringToString envs in a form of name1=val1 passed to executor (default []) --execution-name string execution name, if empty will be autogenerated --executor-args stringArray executor binary additional arguments -f, --file string test file - will be read from stdin if not specified --git-branch string if uri is git repository we can set additional branch parameter --git-commit string if uri is git repository we can use commit id (sha) parameter --git-path string if repository is big we need to define additional path to directory/file to checkout partially --git-token string if git repository is private we can use token as an auth parameter --git-token-secret stringToString git token secret in a form of secret_name1=secret_key1 for private repository (default []) --git-uri string Git repository uri --git-username string if git repository is private we can use username as an auth parameter --git-username-secret stringToString git username secret in a form of secret_name1=secret_key1 for private repository (default []) -h, --help help for test --http-proxy string http proxy for executor containers --https-proxy string https proxy for executor containers -l, --label stringToString label key value pair: --label key1=value1 (default []) -n, --name string unique test name - mandatory --schedule string test schedule in a cronjob form: * * * * * --secret-env stringToString secret envs in a form of secret_name1=secret_key1 passed to executor (default []) -s, --secret-variable stringToString secret variable key value pair: --secret-variable key1=value1 (default []) --secret-variable-reference stringToString secret variable references in a form name1=secret_name1=secret_key1 (default []) --test-content-type string content type of test one of string|file-uri|git-file|git-dir -t, --type string test type (defaults to postman/collection) --uri string URI of resource - will be loaded by http GET -v, --variable stringToString variable key value pair: --variable key1=value1 (default []) --variables-file string variables file path, e.g. postman env file - will be passed to executor if supported","title":"Options"},{"location":"cli/kubectl-testkube_create_test/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --crd-only generate only crd --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_create_test/#see-also","text":"kubectl-testkube create - Create resource","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_create_testsuite/","text":"kubectl-testkube create testsuite Create new TestSuite Synopsis Create new TestSuite Custom Resource kubectl-testkube create testsuite [flags] Options --execution-name string execution name, if empty will be autogenerated -f, --file string JSON test suite file - will be read from stdin if not specified, look at testkube.TestUpsertRequest -h, --help help for testsuite --http-proxy string http proxy for executor containers --https-proxy string https proxy for executor containers -l, --label stringToString label key value pair: --label key1=value1 (default []) --name string Set/Override test suite name --schedule string test suite schedule in a cronjob form: * * * * * -s, --secret-variable stringToString secret variable key value pair: --secret-variable key1=value1 (default []) --secret-variable-reference stringToString secret variable references in a form name1=secret_name1=secret_key1 (default []) -v, --variable stringToString param key value pair: --variable key1=value1 (default []) Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --crd-only generate only crd --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages SEE ALSO kubectl-testkube create - Create resource","title":"Kubectl testkube create testsuite"},{"location":"cli/kubectl-testkube_create_testsuite/#kubectl-testkube-create-testsuite","text":"Create new TestSuite","title":"kubectl-testkube create testsuite"},{"location":"cli/kubectl-testkube_create_testsuite/#synopsis","text":"Create new TestSuite Custom Resource kubectl-testkube create testsuite [flags]","title":"Synopsis"},{"location":"cli/kubectl-testkube_create_testsuite/#options","text":"--execution-name string execution name, if empty will be autogenerated -f, --file string JSON test suite file - will be read from stdin if not specified, look at testkube.TestUpsertRequest -h, --help help for testsuite --http-proxy string http proxy for executor containers --https-proxy string https proxy for executor containers -l, --label stringToString label key value pair: --label key1=value1 (default []) --name string Set/Override test suite name --schedule string test suite schedule in a cronjob form: * * * * * -s, --secret-variable stringToString secret variable key value pair: --secret-variable key1=value1 (default []) --secret-variable-reference stringToString secret variable references in a form name1=secret_name1=secret_key1 (default []) -v, --variable stringToString param key value pair: --variable key1=value1 (default [])","title":"Options"},{"location":"cli/kubectl-testkube_create_testsuite/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --crd-only generate only crd --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_create_testsuite/#see-also","text":"kubectl-testkube create - Create resource","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_create_ticket/","text":"kubectl-testkube debug create-ticket Create bug ticket Synopsis Create an issue of type bug in the Testkube repository kubectl-testkube debug create-ticket [flags] Options -h, --help help for info Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --telemetry-enabled enable collection of anonumous telemetry data --verbose show additional debug messages SEE ALSO kubectl-testkube - Testkube entrypoint for kubectl plugin kubectl-testkube debug - Debug Testkube","title":"Kubectl testkube create ticket"},{"location":"cli/kubectl-testkube_create_ticket/#kubectl-testkube-debug-create-ticket","text":"Create bug ticket","title":"kubectl-testkube debug create-ticket"},{"location":"cli/kubectl-testkube_create_ticket/#synopsis","text":"Create an issue of type bug in the Testkube repository kubectl-testkube debug create-ticket [flags]","title":"Synopsis"},{"location":"cli/kubectl-testkube_create_ticket/#options","text":"-h, --help help for info","title":"Options"},{"location":"cli/kubectl-testkube_create_ticket/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --telemetry-enabled enable collection of anonumous telemetry data --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_create_ticket/#see-also","text":"kubectl-testkube - Testkube entrypoint for kubectl plugin kubectl-testkube debug - Debug Testkube","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_create_webhook/","text":"kubectl-testkube create webhook Create new Webhook Synopsis Create new Webhook Custom Resource kubectl-testkube create webhook [flags] Options -e, --events stringArray event types handled by executor e.g. start-test|end-test -h, --help help for webhook -l, --label stringToString label key value pair: --label key1=value1 (default []) -n, --name string unique webhook name - mandatory --selector string expression to select tests and test suites for webhook events: --selector app=backend -u, --uri string URI which should be called when given event occurs Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --crd-only generate only crd --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages SEE ALSO kubectl-testkube create - Create resource","title":"Kubectl testkube create webhook"},{"location":"cli/kubectl-testkube_create_webhook/#kubectl-testkube-create-webhook","text":"Create new Webhook","title":"kubectl-testkube create webhook"},{"location":"cli/kubectl-testkube_create_webhook/#synopsis","text":"Create new Webhook Custom Resource kubectl-testkube create webhook [flags]","title":"Synopsis"},{"location":"cli/kubectl-testkube_create_webhook/#options","text":"-e, --events stringArray event types handled by executor e.g. start-test|end-test -h, --help help for webhook -l, --label stringToString label key value pair: --label key1=value1 (default []) -n, --name string unique webhook name - mandatory --selector string expression to select tests and test suites for webhook events: --selector app=backend -u, --uri string URI which should be called when given event occurs","title":"Options"},{"location":"cli/kubectl-testkube_create_webhook/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --crd-only generate only crd --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_create_webhook/#see-also","text":"kubectl-testkube create - Create resource","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_dashboard/","text":"kubectl-testkube dashboard Open testkube dashboard Synopsis Open testkube dashboard kubectl-testkube dashboard [flags] Options -h, --help help for dashboard --use-global-dashboard use global dashboard for viewing testkube results Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages SEE ALSO kubectl-testkube - Testkube entrypoint for kubectl plugin","title":"Dashboard Command"},{"location":"cli/kubectl-testkube_dashboard/#kubectl-testkube-dashboard","text":"Open testkube dashboard","title":"kubectl-testkube dashboard"},{"location":"cli/kubectl-testkube_dashboard/#synopsis","text":"Open testkube dashboard kubectl-testkube dashboard [flags]","title":"Synopsis"},{"location":"cli/kubectl-testkube_dashboard/#options","text":"-h, --help help for dashboard --use-global-dashboard use global dashboard for viewing testkube results","title":"Options"},{"location":"cli/kubectl-testkube_dashboard/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_dashboard/#see-also","text":"kubectl-testkube - Testkube entrypoint for kubectl plugin","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_debug/","text":"kubectl-testkube debug Print environment information for debugging kubectl-testkube debug [flags] Options -h, --help help for debug Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages SEE ALSO kubectl-testkube - Testkube entrypoint for kubectl plugin kubectl-testkube debug info - Show debug info","title":"Debug Command"},{"location":"cli/kubectl-testkube_debug/#kubectl-testkube-debug","text":"Print environment information for debugging kubectl-testkube debug [flags]","title":"kubectl-testkube debug"},{"location":"cli/kubectl-testkube_debug/#options","text":"-h, --help help for debug","title":"Options"},{"location":"cli/kubectl-testkube_debug/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_debug/#see-also","text":"kubectl-testkube - Testkube entrypoint for kubectl plugin kubectl-testkube debug info - Show debug info","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_debug_info/","text":"kubectl-testkube debug info Show debug info Synopsis Get all the necessary information to debug an issue in Testkube kubectl-testkube debug info [flags] Options -h, --help help for info Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages SEE ALSO kubectl-testkube debug - Print environment information for debugging","title":"Kubectl testkube debug info"},{"location":"cli/kubectl-testkube_debug_info/#kubectl-testkube-debug-info","text":"Show debug info","title":"kubectl-testkube debug info"},{"location":"cli/kubectl-testkube_debug_info/#synopsis","text":"Get all the necessary information to debug an issue in Testkube kubectl-testkube debug info [flags]","title":"Synopsis"},{"location":"cli/kubectl-testkube_debug_info/#options","text":"-h, --help help for info","title":"Options"},{"location":"cli/kubectl-testkube_debug_info/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_debug_info/#see-also","text":"kubectl-testkube debug - Print environment information for debugging","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_delete/","text":"kubectl-testkube delete Delete resources kubectl-testkube delete <resourceName> [flags] Options -h, --help help for delete Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages SEE ALSO kubectl-testkube - Testkube entrypoint for kubectl plugin kubectl-testkube delete executor - Delete Executor kubectl-testkube delete test - Delete Test kubectl-testkube delete testsuite - Delete test suite kubectl-testkube delete webhook - Delete webhook","title":"Delete Command"},{"location":"cli/kubectl-testkube_delete/#kubectl-testkube-delete","text":"Delete resources kubectl-testkube delete <resourceName> [flags]","title":"kubectl-testkube delete"},{"location":"cli/kubectl-testkube_delete/#options","text":"-h, --help help for delete","title":"Options"},{"location":"cli/kubectl-testkube_delete/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_delete/#see-also","text":"kubectl-testkube - Testkube entrypoint for kubectl plugin kubectl-testkube delete executor - Delete Executor kubectl-testkube delete test - Delete Test kubectl-testkube delete testsuite - Delete test suite kubectl-testkube delete webhook - Delete webhook","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_delete_executor/","text":"kubectl-testkube delete executor Delete Executor Synopsis Delete Executor Resource, pass name to delete by name kubectl-testkube delete executor [executorName] [flags] Options -h, --help help for executor -l, --label strings label key value pair: --label key1=value1 -n, --name string unique executor name, you can also pass it as first argument Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string Client used for connecting to testkube API one of proxy|direct (default \"proxy\") --namespace string kubernetes namespace (default \"testkube\") --oauth-enabled enable oauth --verbose should I show additional debug messages SEE ALSO kubectl-testkube delete - Delete resources","title":"Kubectl testkube delete executor"},{"location":"cli/kubectl-testkube_delete_executor/#kubectl-testkube-delete-executor","text":"Delete Executor","title":"kubectl-testkube delete executor"},{"location":"cli/kubectl-testkube_delete_executor/#synopsis","text":"Delete Executor Resource, pass name to delete by name kubectl-testkube delete executor [executorName] [flags]","title":"Synopsis"},{"location":"cli/kubectl-testkube_delete_executor/#options","text":"-h, --help help for executor -l, --label strings label key value pair: --label key1=value1 -n, --name string unique executor name, you can also pass it as first argument","title":"Options"},{"location":"cli/kubectl-testkube_delete_executor/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string Client used for connecting to testkube API one of proxy|direct (default \"proxy\") --namespace string kubernetes namespace (default \"testkube\") --oauth-enabled enable oauth --verbose should I show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_delete_executor/#see-also","text":"kubectl-testkube delete - Delete resources","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_delete_test/","text":"kubectl-testkube delete test Delete Test kubectl-testkube delete test [testName] [flags] Options --all Delete all tests -h, --help help for test -l, --label strings label key value pair: --label key1=value1 Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string Client used for connecting to testkube API one of proxy|direct (default \"proxy\") --namespace string kubernetes namespace (default \"testkube\") --oauth-enabled enable oauth --verbose should I show additional debug messages SEE ALSO kubectl-testkube delete - Delete resources","title":"Kubectl testkube delete test"},{"location":"cli/kubectl-testkube_delete_test/#kubectl-testkube-delete-test","text":"Delete Test kubectl-testkube delete test [testName] [flags]","title":"kubectl-testkube delete test"},{"location":"cli/kubectl-testkube_delete_test/#options","text":"--all Delete all tests -h, --help help for test -l, --label strings label key value pair: --label key1=value1","title":"Options"},{"location":"cli/kubectl-testkube_delete_test/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string Client used for connecting to testkube API one of proxy|direct (default \"proxy\") --namespace string kubernetes namespace (default \"testkube\") --oauth-enabled enable oauth --verbose should I show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_delete_test/#see-also","text":"kubectl-testkube delete - Delete resources","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_delete_testsuite/","text":"kubectl-testkube delete testsuite Delete test suite Synopsis Delete test suite by name kubectl-testkube delete testsuite <testSuiteName> [flags] Options --all Delete all tests -h, --help help for testsuite -l, --label strings label key value pair: --label key1=value1 Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string Client used for connecting to testkube API one of proxy|direct (default \"proxy\") --namespace string kubernetes namespace (default \"testkube\") --oauth-enabled enable oauth --verbose should I show additional debug messages SEE ALSO kubectl-testkube delete - Delete resources","title":"Kubectl testkube delete testsuite"},{"location":"cli/kubectl-testkube_delete_testsuite/#kubectl-testkube-delete-testsuite","text":"Delete test suite","title":"kubectl-testkube delete testsuite"},{"location":"cli/kubectl-testkube_delete_testsuite/#synopsis","text":"Delete test suite by name kubectl-testkube delete testsuite <testSuiteName> [flags]","title":"Synopsis"},{"location":"cli/kubectl-testkube_delete_testsuite/#options","text":"--all Delete all tests -h, --help help for testsuite -l, --label strings label key value pair: --label key1=value1","title":"Options"},{"location":"cli/kubectl-testkube_delete_testsuite/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string Client used for connecting to testkube API one of proxy|direct (default \"proxy\") --namespace string kubernetes namespace (default \"testkube\") --oauth-enabled enable oauth --verbose should I show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_delete_testsuite/#see-also","text":"kubectl-testkube delete - Delete resources","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_delete_webhook/","text":"kubectl-testkube delete webhook Delete webhook Synopsis Delete webhook, pass webhook name which should be deleted kubectl-testkube delete webhook <webhookName> [flags] Options -h, --help help for webhook -l, --label strings label key value pair: --label key1=value1 -n, --name string unique webhook name, you can also pass it as first argument Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string Client used for connecting to testkube API one of proxy|direct (default \"proxy\") --namespace string kubernetes namespace (default \"testkube\") --oauth-enabled enable oauth --verbose should I show additional debug messages SEE ALSO kubectl-testkube delete - Delete resources","title":"Kubectl testkube delete webhook"},{"location":"cli/kubectl-testkube_delete_webhook/#kubectl-testkube-delete-webhook","text":"Delete webhook","title":"kubectl-testkube delete webhook"},{"location":"cli/kubectl-testkube_delete_webhook/#synopsis","text":"Delete webhook, pass webhook name which should be deleted kubectl-testkube delete webhook <webhookName> [flags]","title":"Synopsis"},{"location":"cli/kubectl-testkube_delete_webhook/#options","text":"-h, --help help for webhook -l, --label strings label key value pair: --label key1=value1 -n, --name string unique webhook name, you can also pass it as first argument","title":"Options"},{"location":"cli/kubectl-testkube_delete_webhook/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string Client used for connecting to testkube API one of proxy|direct (default \"proxy\") --namespace string kubernetes namespace (default \"testkube\") --oauth-enabled enable oauth --verbose should I show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_delete_webhook/#see-also","text":"kubectl-testkube delete - Delete resources","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_disable/","text":"kubectl-testkube disable Disable feature kubectl-testkube disable <feature> [flags] Options -h, --help help for disable Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages SEE ALSO kubectl-testkube - Testkube entrypoint for kubectl plugin kubectl-testkube disable oauth - disable oauth authentication for direct api kubectl-testkube disable telemetry - disable collecting of anonymous telemetry data","title":"Disable Command"},{"location":"cli/kubectl-testkube_disable/#kubectl-testkube-disable","text":"Disable feature kubectl-testkube disable <feature> [flags]","title":"kubectl-testkube disable"},{"location":"cli/kubectl-testkube_disable/#options","text":"-h, --help help for disable","title":"Options"},{"location":"cli/kubectl-testkube_disable/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_disable/#see-also","text":"kubectl-testkube - Testkube entrypoint for kubectl plugin kubectl-testkube disable oauth - disable oauth authentication for direct api kubectl-testkube disable telemetry - disable collecting of anonymous telemetry data","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_disable_oauth/","text":"kubectl-testkube disable oauth disable oauth authentication for direct api kubectl-testkube disable oauth [flags] Options -h, --help help for oauth Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages SEE ALSO kubectl-testkube disable - Disable feature","title":"Kubectl testkube disable oauth"},{"location":"cli/kubectl-testkube_disable_oauth/#kubectl-testkube-disable-oauth","text":"disable oauth authentication for direct api kubectl-testkube disable oauth [flags]","title":"kubectl-testkube disable oauth"},{"location":"cli/kubectl-testkube_disable_oauth/#options","text":"-h, --help help for oauth","title":"Options"},{"location":"cli/kubectl-testkube_disable_oauth/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_disable_oauth/#see-also","text":"kubectl-testkube disable - Disable feature","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_disable_telemetry/","text":"kubectl-testkube disable telemetry disable collecting of anonymous telemetry data kubectl-testkube disable telemetry [flags] Options -h, --help help for telemetry Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages SEE ALSO kubectl-testkube disable - Disable feature","title":"Kubectl testkube disable telemetry"},{"location":"cli/kubectl-testkube_disable_telemetry/#kubectl-testkube-disable-telemetry","text":"disable collecting of anonymous telemetry data kubectl-testkube disable telemetry [flags]","title":"kubectl-testkube disable telemetry"},{"location":"cli/kubectl-testkube_disable_telemetry/#options","text":"-h, --help help for telemetry","title":"Options"},{"location":"cli/kubectl-testkube_disable_telemetry/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_disable_telemetry/#see-also","text":"kubectl-testkube disable - Disable feature","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_download/","text":"kubectl-testkube download Artifacts management commands kubectl-testkube download <resource> [flags] Options -h, --help help for download Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages SEE ALSO kubectl-testkube - Testkube entrypoint for kubectl plugin kubectl-testkube download artifact - download artifact kubectl-testkube download artifacts - download artifacts","title":"Download Command"},{"location":"cli/kubectl-testkube_download/#kubectl-testkube-download","text":"Artifacts management commands kubectl-testkube download <resource> [flags]","title":"kubectl-testkube download"},{"location":"cli/kubectl-testkube_download/#options","text":"-h, --help help for download","title":"Options"},{"location":"cli/kubectl-testkube_download/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_download/#see-also","text":"kubectl-testkube - Testkube entrypoint for kubectl plugin kubectl-testkube download artifact - download artifact kubectl-testkube download artifacts - download artifacts","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_download_artifact/","text":"kubectl-testkube download artifact download artifact kubectl-testkube download artifact <executionID> <fileName> <destinationDir> [flags] Options -d, --destination string name of the file -e, --execution-id string ID of the execution -f, --filename string name of the file -h, --help help for artifact Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose should I show additional debug messages SEE ALSO kubectl-testkube download - Artifacts management commands","title":"Kubectl testkube download artifact"},{"location":"cli/kubectl-testkube_download_artifact/#kubectl-testkube-download-artifact","text":"download artifact kubectl-testkube download artifact <executionID> <fileName> <destinationDir> [flags]","title":"kubectl-testkube download artifact"},{"location":"cli/kubectl-testkube_download_artifact/#options","text":"-d, --destination string name of the file -e, --execution-id string ID of the execution -f, --filename string name of the file -h, --help help for artifact","title":"Options"},{"location":"cli/kubectl-testkube_download_artifact/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose should I show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_download_artifact/#see-also","text":"kubectl-testkube download - Artifacts management commands","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_download_artifacts/","text":"kubectl-testkube download artifacts download artifacts kubectl-testkube download artifacts <executionID> [flags] Options --download-dir string download dir (default \"artifacts\") -e, --execution-id string ID of the execution -h, --help help for artifacts Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose should I show additional debug messages SEE ALSO kubectl-testkube download - Artifacts management commands","title":"Kubectl testkube download artifacts"},{"location":"cli/kubectl-testkube_download_artifacts/#kubectl-testkube-download-artifacts","text":"download artifacts kubectl-testkube download artifacts <executionID> [flags]","title":"kubectl-testkube download artifacts"},{"location":"cli/kubectl-testkube_download_artifacts/#options","text":"--download-dir string download dir (default \"artifacts\") -e, --execution-id string ID of the execution -h, --help help for artifacts","title":"Options"},{"location":"cli/kubectl-testkube_download_artifacts/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose should I show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_download_artifacts/#see-also","text":"kubectl-testkube download - Artifacts management commands","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_enable/","text":"kubectl-testkube enable Enable feature kubectl-testkube enable <feature> [flags] Options -h, --help help for enable Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages SEE ALSO kubectl-testkube - Testkube entrypoint for kubectl plugin kubectl-testkube enable oauth - enable oauth authentication for direct api kubectl-testkube enable telemetry - Enable collecting of anonymous telemetry data","title":"Enable Command"},{"location":"cli/kubectl-testkube_enable/#kubectl-testkube-enable","text":"Enable feature kubectl-testkube enable <feature> [flags]","title":"kubectl-testkube enable"},{"location":"cli/kubectl-testkube_enable/#options","text":"-h, --help help for enable","title":"Options"},{"location":"cli/kubectl-testkube_enable/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_enable/#see-also","text":"kubectl-testkube - Testkube entrypoint for kubectl plugin kubectl-testkube enable oauth - enable oauth authentication for direct api kubectl-testkube enable telemetry - Enable collecting of anonymous telemetry data","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_enable_oauth/","text":"kubectl-testkube enable oauth enable oauth authentication for direct api kubectl-testkube enable oauth [flags] Options -h, --help help for oauth Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages SEE ALSO kubectl-testkube enable - Enable feature","title":"Kubectl testkube enable oauth"},{"location":"cli/kubectl-testkube_enable_oauth/#kubectl-testkube-enable-oauth","text":"enable oauth authentication for direct api kubectl-testkube enable oauth [flags]","title":"kubectl-testkube enable oauth"},{"location":"cli/kubectl-testkube_enable_oauth/#options","text":"-h, --help help for oauth","title":"Options"},{"location":"cli/kubectl-testkube_enable_oauth/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_enable_oauth/#see-also","text":"kubectl-testkube enable - Enable feature","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_enable_telemetry/","text":"kubectl-testkube enable telemetry Enable collecting of anonymous telemetry data kubectl-testkube enable telemetry [flags] Options -h, --help help for telemetry Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages SEE ALSO kubectl-testkube enable - Enable feature","title":"Kubectl testkube enable telemetry"},{"location":"cli/kubectl-testkube_enable_telemetry/#kubectl-testkube-enable-telemetry","text":"Enable collecting of anonymous telemetry data kubectl-testkube enable telemetry [flags]","title":"kubectl-testkube enable telemetry"},{"location":"cli/kubectl-testkube_enable_telemetry/#options","text":"-h, --help help for telemetry","title":"Options"},{"location":"cli/kubectl-testkube_enable_telemetry/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_enable_telemetry/#see-also","text":"kubectl-testkube enable - Enable feature","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_generate/","text":"kubectl-testkube generate Generate resources commands kubectl-testkube generate <resourceName> [flags] Options -h, --help help for generate Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages SEE ALSO kubectl-testkube - Testkube entrypoint for kubectl plugin kubectl-testkube generate doc - Generate docs for kubectl testkube kubectl-testkube generate tests-crds - Generate tests CRD file based on directory","title":"Generate Command"},{"location":"cli/kubectl-testkube_generate/#kubectl-testkube-generate","text":"Generate resources commands kubectl-testkube generate <resourceName> [flags]","title":"kubectl-testkube generate"},{"location":"cli/kubectl-testkube_generate/#options","text":"-h, --help help for generate","title":"Options"},{"location":"cli/kubectl-testkube_generate/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_generate/#see-also","text":"kubectl-testkube - Testkube entrypoint for kubectl plugin kubectl-testkube generate doc - Generate docs for kubectl testkube kubectl-testkube generate tests-crds - Generate tests CRD file based on directory","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_generate_doc/","text":"kubectl-testkube generate doc Generate docs for kubectl testkube Synopsis Generate docs for kubectl testkube kubectl-testkube generate doc [flags] Options -h, --help help for doc Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages SEE ALSO kubectl-testkube generate - Generate resources commands","title":"Kubectl testkube generate doc"},{"location":"cli/kubectl-testkube_generate_doc/#kubectl-testkube-generate-doc","text":"Generate docs for kubectl testkube","title":"kubectl-testkube generate doc"},{"location":"cli/kubectl-testkube_generate_doc/#synopsis","text":"Generate docs for kubectl testkube kubectl-testkube generate doc [flags]","title":"Synopsis"},{"location":"cli/kubectl-testkube_generate_doc/#options","text":"-h, --help help for doc","title":"Options"},{"location":"cli/kubectl-testkube_generate_doc/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_generate_doc/#see-also","text":"kubectl-testkube generate - Generate resources commands","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_generate_tests-crds/","text":"kubectl-testkube generate tests-crds Generate tests CRD file based on directory Synopsis Generate tests manifest based on directory (e.g. for ArgoCD sync based on tests files) kubectl-testkube generate tests-crds <manifestDirectory> [flags] Options -h, --help help for tests-crds Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages SEE ALSO kubectl-testkube generate - Generate resources commands","title":"Kubectl testkube generate tests crds"},{"location":"cli/kubectl-testkube_generate_tests-crds/#kubectl-testkube-generate-tests-crds","text":"Generate tests CRD file based on directory","title":"kubectl-testkube generate tests-crds"},{"location":"cli/kubectl-testkube_generate_tests-crds/#synopsis","text":"Generate tests manifest based on directory (e.g. for ArgoCD sync based on tests files) kubectl-testkube generate tests-crds <manifestDirectory> [flags]","title":"Synopsis"},{"location":"cli/kubectl-testkube_generate_tests-crds/#options","text":"-h, --help help for tests-crds","title":"Options"},{"location":"cli/kubectl-testkube_generate_tests-crds/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_generate_tests-crds/#see-also","text":"kubectl-testkube generate - Generate resources commands","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_get/","text":"kubectl-testkube get Get resources Synopsis Get available resources, get single item or list kubectl-testkube get <resourceName> [flags] Options --go-template string go template to render (default \"{{.}}\") -h, --help help for get -o, --output string output type can be one of json|yaml|pretty|go-template (default \"pretty\") Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages SEE ALSO kubectl-testkube - Testkube entrypoint for kubectl plugin kubectl-testkube get artifact - List artifacts of the given execution ID kubectl-testkube get execution - Lists or gets test executions kubectl-testkube get executor - Gets executor details kubectl-testkube get test - Get all available tests kubectl-testkube get testsuite - Get test suite by name kubectl-testkube get testsuiteexecution - Gets TestSuite Execution details kubectl-testkube get webhook - Get webhook details","title":"Get Command"},{"location":"cli/kubectl-testkube_get/#kubectl-testkube-get","text":"Get resources","title":"kubectl-testkube get"},{"location":"cli/kubectl-testkube_get/#synopsis","text":"Get available resources, get single item or list kubectl-testkube get <resourceName> [flags]","title":"Synopsis"},{"location":"cli/kubectl-testkube_get/#options","text":"--go-template string go template to render (default \"{{.}}\") -h, --help help for get -o, --output string output type can be one of json|yaml|pretty|go-template (default \"pretty\")","title":"Options"},{"location":"cli/kubectl-testkube_get/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_get/#see-also","text":"kubectl-testkube - Testkube entrypoint for kubectl plugin kubectl-testkube get artifact - List artifacts of the given execution ID kubectl-testkube get execution - Lists or gets test executions kubectl-testkube get executor - Gets executor details kubectl-testkube get test - Get all available tests kubectl-testkube get testsuite - Get test suite by name kubectl-testkube get testsuiteexecution - Gets TestSuite Execution details kubectl-testkube get webhook - Get webhook details","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_get_artifact/","text":"kubectl-testkube get artifact List artifacts of the given execution ID kubectl-testkube get artifact <executionID> [flags] Options -e, --execution-id string ID of the execution -h, --help help for artifact Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --go-template string go template to render (default \"{{.}}\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth -o, --output string output type can be one of json|yaml|pretty|go-template (default \"pretty\") --verbose show additional debug messages SEE ALSO kubectl-testkube get - Get resources","title":"Kubectl testkube get artifact"},{"location":"cli/kubectl-testkube_get_artifact/#kubectl-testkube-get-artifact","text":"List artifacts of the given execution ID kubectl-testkube get artifact <executionID> [flags]","title":"kubectl-testkube get artifact"},{"location":"cli/kubectl-testkube_get_artifact/#options","text":"-e, --execution-id string ID of the execution -h, --help help for artifact","title":"Options"},{"location":"cli/kubectl-testkube_get_artifact/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --go-template string go template to render (default \"{{.}}\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth -o, --output string output type can be one of json|yaml|pretty|go-template (default \"pretty\") --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_get_artifact/#see-also","text":"kubectl-testkube get - Get resources","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_get_execution/","text":"kubectl-testkube get execution Lists or gets test executions Synopsis Getting list of execution for given test name or recent executions if there is no test name passed kubectl-testkube get execution [executionID][executionName] [flags] Options -h, --help help for execution -l, --label strings label key value pair: --label key1=value1 --limit int records limit (default 10) --test string test id Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --go-template string go template to render (default \"{{.}}\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth -o, --output string output type can be one of json|yaml|pretty|go-template (default \"pretty\") --verbose show additional debug messages SEE ALSO kubectl-testkube get - Get resources","title":"Kubectl testkube get execution"},{"location":"cli/kubectl-testkube_get_execution/#kubectl-testkube-get-execution","text":"Lists or gets test executions","title":"kubectl-testkube get execution"},{"location":"cli/kubectl-testkube_get_execution/#synopsis","text":"Getting list of execution for given test name or recent executions if there is no test name passed kubectl-testkube get execution [executionID][executionName] [flags]","title":"Synopsis"},{"location":"cli/kubectl-testkube_get_execution/#options","text":"-h, --help help for execution -l, --label strings label key value pair: --label key1=value1 --limit int records limit (default 10) --test string test id","title":"Options"},{"location":"cli/kubectl-testkube_get_execution/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --go-template string go template to render (default \"{{.}}\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth -o, --output string output type can be one of json|yaml|pretty|go-template (default \"pretty\") --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_get_execution/#see-also","text":"kubectl-testkube get - Get resources","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_get_executor/","text":"kubectl-testkube get executor Gets executor details Synopsis Gets executor, you can change output format kubectl-testkube get executor [executorName] [flags] Options --crd-only show only test crd -h, --help help for executor -l, --label strings label key value pair: --label key1=value1 Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --go-template string go template to render (default \"{{.}}\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth -o, --output string output type can be one of json|yaml|pretty|go-template (default \"pretty\") --verbose show additional debug messages SEE ALSO kubectl-testkube get - Get resources","title":"Kubectl testkube get executor"},{"location":"cli/kubectl-testkube_get_executor/#kubectl-testkube-get-executor","text":"Gets executor details","title":"kubectl-testkube get executor"},{"location":"cli/kubectl-testkube_get_executor/#synopsis","text":"Gets executor, you can change output format kubectl-testkube get executor [executorName] [flags]","title":"Synopsis"},{"location":"cli/kubectl-testkube_get_executor/#options","text":"--crd-only show only test crd -h, --help help for executor -l, --label strings label key value pair: --label key1=value1","title":"Options"},{"location":"cli/kubectl-testkube_get_executor/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --go-template string go template to render (default \"{{.}}\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth -o, --output string output type can be one of json|yaml|pretty|go-template (default \"pretty\") --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_get_executor/#see-also","text":"kubectl-testkube get - Get resources","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_get_test/","text":"kubectl-testkube get test Get all available tests Synopsis Getting all available tests from given namespace - if no namespace given \"testkube\" namespace is used kubectl-testkube get test <testName> [flags] Options --crd-only show only test crd -h, --help help for test -l, --label strings label key value pair: --label key1=value1 --no-execution don't show latest execution Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --go-template string go template to render (default \"{{.}}\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth -o, --output string output type can be one of json|yaml|pretty|go-template (default \"pretty\") --verbose show additional debug messages SEE ALSO kubectl-testkube get - Get resources","title":"Kubectl testkube get test"},{"location":"cli/kubectl-testkube_get_test/#kubectl-testkube-get-test","text":"Get all available tests","title":"kubectl-testkube get test"},{"location":"cli/kubectl-testkube_get_test/#synopsis","text":"Getting all available tests from given namespace - if no namespace given \"testkube\" namespace is used kubectl-testkube get test <testName> [flags]","title":"Synopsis"},{"location":"cli/kubectl-testkube_get_test/#options","text":"--crd-only show only test crd -h, --help help for test -l, --label strings label key value pair: --label key1=value1 --no-execution don't show latest execution","title":"Options"},{"location":"cli/kubectl-testkube_get_test/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --go-template string go template to render (default \"{{.}}\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth -o, --output string output type can be one of json|yaml|pretty|go-template (default \"pretty\") --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_get_test/#see-also","text":"kubectl-testkube get - Get resources","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_get_testsuite/","text":"kubectl-testkube get testsuite Get test suite by name Synopsis Getting test suite from given namespace - if no namespace given \"testkube\" namespace is used kubectl-testkube get testsuite <testSuiteName> [flags] Options --crd-only show only test crd -h, --help help for testsuite -l, --label strings label key value pair: --label key1=value1 --no-execution don't show latest execution Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --go-template string go template to render (default \"{{.}}\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth -o, --output string output type can be one of json|yaml|pretty|go-template (default \"pretty\") --verbose show additional debug messages SEE ALSO kubectl-testkube get - Get resources","title":"Kubectl testkube get testsuite"},{"location":"cli/kubectl-testkube_get_testsuite/#kubectl-testkube-get-testsuite","text":"Get test suite by name","title":"kubectl-testkube get testsuite"},{"location":"cli/kubectl-testkube_get_testsuite/#synopsis","text":"Getting test suite from given namespace - if no namespace given \"testkube\" namespace is used kubectl-testkube get testsuite <testSuiteName> [flags]","title":"Synopsis"},{"location":"cli/kubectl-testkube_get_testsuite/#options","text":"--crd-only show only test crd -h, --help help for testsuite -l, --label strings label key value pair: --label key1=value1 --no-execution don't show latest execution","title":"Options"},{"location":"cli/kubectl-testkube_get_testsuite/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --go-template string go template to render (default \"{{.}}\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth -o, --output string output type can be one of json|yaml|pretty|go-template (default \"pretty\") --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_get_testsuite/#see-also","text":"kubectl-testkube get - Get resources","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_get_testsuiteexecution/","text":"kubectl-testkube get testsuiteexecution Gets TestSuite Execution details Synopsis Gets TestSuite Execution details by ID, or list if id is not passed kubectl-testkube get testsuiteexecution [executionID] [flags] Options -h, --help help for testsuiteexecution -l, --label strings label key value pair: --label key1=value1 --limit int max number of records to return (default 1000) --test-suite string test suite name Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --go-template string go template to render (default \"{{.}}\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth -o, --output string output type can be one of json|yaml|pretty|go-template (default \"pretty\") --verbose show additional debug messages SEE ALSO kubectl-testkube get - Get resources","title":"Kubectl testkube get testsuiteexecution"},{"location":"cli/kubectl-testkube_get_testsuiteexecution/#kubectl-testkube-get-testsuiteexecution","text":"Gets TestSuite Execution details","title":"kubectl-testkube get testsuiteexecution"},{"location":"cli/kubectl-testkube_get_testsuiteexecution/#synopsis","text":"Gets TestSuite Execution details by ID, or list if id is not passed kubectl-testkube get testsuiteexecution [executionID] [flags]","title":"Synopsis"},{"location":"cli/kubectl-testkube_get_testsuiteexecution/#options","text":"-h, --help help for testsuiteexecution -l, --label strings label key value pair: --label key1=value1 --limit int max number of records to return (default 1000) --test-suite string test suite name","title":"Options"},{"location":"cli/kubectl-testkube_get_testsuiteexecution/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --go-template string go template to render (default \"{{.}}\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth -o, --output string output type can be one of json|yaml|pretty|go-template (default \"pretty\") --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_get_testsuiteexecution/#see-also","text":"kubectl-testkube get - Get resources","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_get_webhook/","text":"kubectl-testkube get webhook Get webhook details Synopsis Get webhook, you can change output format, to get single details pass name as first arg kubectl-testkube get webhook <webhookName> [flags] Options --crd-only show only test crd -h, --help help for webhook -l, --label strings label key value pair: --label key1=value1 -n, --name string unique webhook name, you can also pass it as argument Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --go-template string go template to render (default \"{{.}}\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth -o, --output string output type can be one of json|yaml|pretty|go-template (default \"pretty\") --verbose show additional debug messages SEE ALSO kubectl-testkube get - Get resources","title":"Kubectl testkube get webhook"},{"location":"cli/kubectl-testkube_get_webhook/#kubectl-testkube-get-webhook","text":"Get webhook details","title":"kubectl-testkube get webhook"},{"location":"cli/kubectl-testkube_get_webhook/#synopsis","text":"Get webhook, you can change output format, to get single details pass name as first arg kubectl-testkube get webhook <webhookName> [flags]","title":"Synopsis"},{"location":"cli/kubectl-testkube_get_webhook/#options","text":"--crd-only show only test crd -h, --help help for webhook -l, --label strings label key value pair: --label key1=value1 -n, --name string unique webhook name, you can also pass it as argument","title":"Options"},{"location":"cli/kubectl-testkube_get_webhook/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --go-template string go template to render (default \"{{.}}\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth -o, --output string output type can be one of json|yaml|pretty|go-template (default \"pretty\") --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_get_webhook/#see-also","text":"kubectl-testkube get - Get resources","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_init/","text":"kubectl-testkube init Install Helm chart registry in current kubectl context and update dependencies kubectl-testkube init [flags] Options --chart string chart name (default \"kubeshop/testkube\") -h, --help help for init --name string installation name (default \"testkube\") --no-dashboard don't install dashboard --no-minio don't install MinIO --no-mongo don't install MongoDB --values string path to Helm values file Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages SEE ALSO kubectl-testkube - Testkube entrypoint for kubectl plugin","title":"Kubectl testkube init"},{"location":"cli/kubectl-testkube_init/#kubectl-testkube-init","text":"Install Helm chart registry in current kubectl context and update dependencies kubectl-testkube init [flags]","title":"kubectl-testkube init"},{"location":"cli/kubectl-testkube_init/#options","text":"--chart string chart name (default \"kubeshop/testkube\") -h, --help help for init --name string installation name (default \"testkube\") --no-dashboard don't install dashboard --no-minio don't install MinIO --no-mongo don't install MongoDB --values string path to Helm values file","title":"Options"},{"location":"cli/kubectl-testkube_init/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_init/#see-also","text":"kubectl-testkube - Testkube entrypoint for kubectl plugin","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_install/","text":"kubectl-testkube install Install Helm chart registry in current kubectl context and update dependencies kubectl-testkube install [flags] Options --chart string chart name (default \"kubeshop/testkube\") -h, --help help for install --name string installation name (default \"testkube\") --no-dashboard don't install dashboard --no-minio don't install MinIO --no-mongo don't install MongoDB --values string path to Helm values file Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --telemetry-enabled enable collection of anonumous telemetry data --verbose show additional debug messages SEE ALSO kubectl-testkube - Testkube entrypoint for kubectl plugin","title":"Install Command"},{"location":"cli/kubectl-testkube_install/#kubectl-testkube-install","text":"Install Helm chart registry in current kubectl context and update dependencies kubectl-testkube install [flags]","title":"kubectl-testkube install"},{"location":"cli/kubectl-testkube_install/#options","text":"--chart string chart name (default \"kubeshop/testkube\") -h, --help help for install --name string installation name (default \"testkube\") --no-dashboard don't install dashboard --no-minio don't install MinIO --no-mongo don't install MongoDB --values string path to Helm values file","title":"Options"},{"location":"cli/kubectl-testkube_install/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --telemetry-enabled enable collection of anonumous telemetry data --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_install/#see-also","text":"kubectl-testkube - Testkube entrypoint for kubectl plugin","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_migrate/","text":"kubectl-testkube migrate manual migrate command Synopsis migrate command will run migrations greater or equals current version kubectl-testkube migrate [flags] Options -h, --help help for migrate Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages SEE ALSO kubectl-testkube - Testkube entrypoint for kubectl plugin","title":"Migrate Command"},{"location":"cli/kubectl-testkube_migrate/#kubectl-testkube-migrate","text":"manual migrate command","title":"kubectl-testkube migrate"},{"location":"cli/kubectl-testkube_migrate/#synopsis","text":"migrate command will run migrations greater or equals current version kubectl-testkube migrate [flags]","title":"Synopsis"},{"location":"cli/kubectl-testkube_migrate/#options","text":"-h, --help help for migrate","title":"Options"},{"location":"cli/kubectl-testkube_migrate/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_migrate/#see-also","text":"kubectl-testkube - Testkube entrypoint for kubectl plugin","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_purge/","text":"kubectl-testkube purge Uninstall Helm chart registry from current kubectl context Synopsis Uninstall Helm chart registry from current kubectl context kubectl-testkube purge [flags] Options -h, --help help for purge --name string installation name (default \"testkube\") Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages SEE ALSO kubectl-testkube - Testkube entrypoint for kubectl plugin","title":"Kubectl testkube purge"},{"location":"cli/kubectl-testkube_purge/#kubectl-testkube-purge","text":"Uninstall Helm chart registry from current kubectl context","title":"kubectl-testkube purge"},{"location":"cli/kubectl-testkube_purge/#synopsis","text":"Uninstall Helm chart registry from current kubectl context kubectl-testkube purge [flags]","title":"Synopsis"},{"location":"cli/kubectl-testkube_purge/#options","text":"-h, --help help for purge --name string installation name (default \"testkube\")","title":"Options"},{"location":"cli/kubectl-testkube_purge/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_purge/#see-also","text":"kubectl-testkube - Testkube entrypoint for kubectl plugin","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_run/","text":"kubectl-testkube run Runs tests or test suites kubectl-testkube run <resourceName> [flags] Options -h, --help help for run Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages SEE ALSO kubectl-testkube - Testkube entrypoint for kubectl plugin kubectl-testkube run test - Starts new test kubectl-testkube run testsuite - Starts new test suite","title":"Run Command"},{"location":"cli/kubectl-testkube_run/#kubectl-testkube-run","text":"Runs tests or test suites kubectl-testkube run <resourceName> [flags]","title":"kubectl-testkube run"},{"location":"cli/kubectl-testkube_run/#options","text":"-h, --help help for run","title":"Options"},{"location":"cli/kubectl-testkube_run/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_run/#see-also","text":"kubectl-testkube - Testkube entrypoint for kubectl plugin kubectl-testkube run test - Starts new test kubectl-testkube run testsuite - Starts new test suite","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_run_test/","text":"kubectl-testkube run test Starts new test Synopsis Starts new test based on Test Custom Resource name, returns results to console kubectl-testkube run test <testName> [flags] Options --args stringArray executor binary additional arguments --concurrency int concurrency level for multiple test execution (default 10) -d, --download-artifacts downlaod artifacts automatically --download-dir string download dir (default \"artifacts\") --env stringToString envs in a form of name1=val1 passed to executor (default []) --execution-label stringToString execution-label key value pair: --execution-label key1=value1 (default []) -h, --help help for test --http-proxy string http proxy for executor containers --https-proxy string https proxy for executor containers --image string execution variable passed to executor -l, --label strings label key value pair: --label key1=value1 -n, --name string execution name, if empty will be autogenerated --secret stringToString secret envs in a form of secret_name1=secret_key1 passed to executor (default []) -s, --secret-variable stringToString execution secret variable passed to executor (default []) --secret-variable-reference stringToString secret variable references in a form name1=secret_name1=secret_key1 (default []) -v, --variable stringToString execution variable passed to executor (default []) --variables-file string variables file path, e.g. postman env file - will be passed to executor if supported -f, --watch watch for changes after start Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages SEE ALSO kubectl-testkube run - Runs tests or test suites","title":"Kubectl testkube run test"},{"location":"cli/kubectl-testkube_run_test/#kubectl-testkube-run-test","text":"Starts new test","title":"kubectl-testkube run test"},{"location":"cli/kubectl-testkube_run_test/#synopsis","text":"Starts new test based on Test Custom Resource name, returns results to console kubectl-testkube run test <testName> [flags]","title":"Synopsis"},{"location":"cli/kubectl-testkube_run_test/#options","text":"--args stringArray executor binary additional arguments --concurrency int concurrency level for multiple test execution (default 10) -d, --download-artifacts downlaod artifacts automatically --download-dir string download dir (default \"artifacts\") --env stringToString envs in a form of name1=val1 passed to executor (default []) --execution-label stringToString execution-label key value pair: --execution-label key1=value1 (default []) -h, --help help for test --http-proxy string http proxy for executor containers --https-proxy string https proxy for executor containers --image string execution variable passed to executor -l, --label strings label key value pair: --label key1=value1 -n, --name string execution name, if empty will be autogenerated --secret stringToString secret envs in a form of secret_name1=secret_key1 passed to executor (default []) -s, --secret-variable stringToString execution secret variable passed to executor (default []) --secret-variable-reference stringToString secret variable references in a form name1=secret_name1=secret_key1 (default []) -v, --variable stringToString execution variable passed to executor (default []) --variables-file string variables file path, e.g. postman env file - will be passed to executor if supported -f, --watch watch for changes after start","title":"Options"},{"location":"cli/kubectl-testkube_run_test/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_run_test/#see-also","text":"kubectl-testkube run - Runs tests or test suites","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_run_testsuite/","text":"kubectl-testkube run testsuite Starts new test suite Synopsis Starts new test suite based on TestSuite Custom Resource name, returns results to console kubectl-testkube run testsuite <testSuiteName> [flags] Options --concurrency int concurrency level for multiple test suite execution (default 10) -d, --download-artifacts download artifacts automatically --download-dir string download dir (default \"artifacts\") --execution-label stringToString execution-label adds a label to execution in form of key value pair: --execution-label key1=value1 (default []) -h, --help help for testsuite --http-proxy string http proxy for executor containers --https-proxy string https proxy for executor containers -l, --label strings label key value pair: --label key1=value1 -n, --name string execution name, if empty will be autogenerated -s, --secret-variable stringToString execution variables passed to executor (default []) --secret-variable-reference stringToString secret variable references in a form name1=secret_name1=secret_key1 (default []) -v, --variable stringToString execution variables passed to executor (default []) -f, --watch watch for changes after start Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages SEE ALSO kubectl-testkube run - Runs tests or test suites","title":"Kubectl testkube run testsuite"},{"location":"cli/kubectl-testkube_run_testsuite/#kubectl-testkube-run-testsuite","text":"Starts new test suite","title":"kubectl-testkube run testsuite"},{"location":"cli/kubectl-testkube_run_testsuite/#synopsis","text":"Starts new test suite based on TestSuite Custom Resource name, returns results to console kubectl-testkube run testsuite <testSuiteName> [flags]","title":"Synopsis"},{"location":"cli/kubectl-testkube_run_testsuite/#options","text":"--concurrency int concurrency level for multiple test suite execution (default 10) -d, --download-artifacts download artifacts automatically --download-dir string download dir (default \"artifacts\") --execution-label stringToString execution-label adds a label to execution in form of key value pair: --execution-label key1=value1 (default []) -h, --help help for testsuite --http-proxy string http proxy for executor containers --https-proxy string https proxy for executor containers -l, --label strings label key value pair: --label key1=value1 -n, --name string execution name, if empty will be autogenerated -s, --secret-variable stringToString execution variables passed to executor (default []) --secret-variable-reference stringToString secret variable references in a form name1=secret_name1=secret_key1 (default []) -v, --variable stringToString execution variables passed to executor (default []) -f, --watch watch for changes after start","title":"Options"},{"location":"cli/kubectl-testkube_run_testsuite/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_run_testsuite/#see-also","text":"kubectl-testkube run - Runs tests or test suites","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_status/","text":"kubectl-testkube status Show status of feature or resource kubectl-testkube status [feature|resource] [flags] Options -h, --help help for status Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages SEE ALSO kubectl-testkube - Testkube entrypoint for kubectl plugin kubectl-testkube status oauth - Get oauth status kubectl-testkube status telemetry - Get telemetry status","title":"Status Command"},{"location":"cli/kubectl-testkube_status/#kubectl-testkube-status","text":"Show status of feature or resource kubectl-testkube status [feature|resource] [flags]","title":"kubectl-testkube status"},{"location":"cli/kubectl-testkube_status/#options","text":"-h, --help help for status","title":"Options"},{"location":"cli/kubectl-testkube_status/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_status/#see-also","text":"kubectl-testkube - Testkube entrypoint for kubectl plugin kubectl-testkube status oauth - Get oauth status kubectl-testkube status telemetry - Get telemetry status","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_status_oauth/","text":"kubectl-testkube status oauth Get oauth status kubectl-testkube status oauth [flags] Options -h, --help help for oauth Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages SEE ALSO kubectl-testkube status - Show status of feature or resource","title":"Kubectl testkube status oauth"},{"location":"cli/kubectl-testkube_status_oauth/#kubectl-testkube-status-oauth","text":"Get oauth status kubectl-testkube status oauth [flags]","title":"kubectl-testkube status oauth"},{"location":"cli/kubectl-testkube_status_oauth/#options","text":"-h, --help help for oauth","title":"Options"},{"location":"cli/kubectl-testkube_status_oauth/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_status_oauth/#see-also","text":"kubectl-testkube status - Show status of feature or resource","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_status_telemetry/","text":"kubectl-testkube status telemetry Get telemetry status kubectl-testkube status telemetry [flags] Options -h, --help help for telemetry Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages SEE ALSO kubectl-testkube status - Show status of feature or resource","title":"Kubectl testkube status telemetry"},{"location":"cli/kubectl-testkube_status_telemetry/#kubectl-testkube-status-telemetry","text":"Get telemetry status kubectl-testkube status telemetry [flags]","title":"kubectl-testkube status telemetry"},{"location":"cli/kubectl-testkube_status_telemetry/#options","text":"-h, --help help for telemetry","title":"Options"},{"location":"cli/kubectl-testkube_status_telemetry/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_status_telemetry/#see-also","text":"kubectl-testkube status - Show status of feature or resource","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_uninstall/","text":"kubectl-testkube uninstall Uninstall Helm chart registry in current kubectl context Synopsis Uninstall Helm chart registry in current kubectl context kubectl-testkube uninstall [flags] Options -h, --help help for uninstall --name string installation name (default \"testkube\") Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --telemetry-enabled enable collection of anonumous telemetry data --verbose show additional debug messages SEE ALSO kubectl-testkube - Testkube entrypoint for kubectl plugin","title":"Kubectl testkube uninstall"},{"location":"cli/kubectl-testkube_uninstall/#kubectl-testkube-uninstall","text":"Uninstall Helm chart registry in current kubectl context","title":"kubectl-testkube uninstall"},{"location":"cli/kubectl-testkube_uninstall/#synopsis","text":"Uninstall Helm chart registry in current kubectl context kubectl-testkube uninstall [flags]","title":"Synopsis"},{"location":"cli/kubectl-testkube_uninstall/#options","text":"-h, --help help for uninstall --name string installation name (default \"testkube\")","title":"Options"},{"location":"cli/kubectl-testkube_uninstall/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --telemetry-enabled enable collection of anonumous telemetry data --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_uninstall/#see-also","text":"kubectl-testkube - Testkube entrypoint for kubectl plugin","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_update/","text":"kubectl-testkube update Update resource kubectl-testkube update <resourceName> [flags] Options -h, --help help for update Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages SEE ALSO kubectl-testkube - Testkube entrypoint for kubectl plugin kubectl-testkube update test - Update test kubectl-testkube update testsuite - Update Test Suite","title":"Update Command"},{"location":"cli/kubectl-testkube_update/#kubectl-testkube-update","text":"Update resource kubectl-testkube update <resourceName> [flags]","title":"kubectl-testkube update"},{"location":"cli/kubectl-testkube_update/#options","text":"-h, --help help for update","title":"Options"},{"location":"cli/kubectl-testkube_update/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_update/#see-also","text":"kubectl-testkube - Testkube entrypoint for kubectl plugin kubectl-testkube update test - Update test kubectl-testkube update testsuite - Update Test Suite","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_update_test/","text":"kubectl-testkube update test Update test Synopsis Update Test Custom Resource kubectl-testkube update test [flags] Options --env stringToString envs in a form of name1=val1 passed to executor (default []) --execution-name string execution name, if empty will be autogenerated --executor-args stringArray executor binary additional arguments -f, --file string test file - will try to read content from stdin if not specified --git-branch string if uri is git repository we can set additional branch parameter --git-commit string if uri is git repository we can use commit id (sha) parameter --git-path string if repository is big we need to define additional path to directory/file to checkout partially --git-token string if git repository is private we can use token as an auth parameter --git-token-secret stringToString git token secret in a form of secret_name1=secret_key1 for private repository (default []) --git-uri string Git repository uri --git-username string if git repository is private we can use username as an auth parameter --git-username-secret stringToString git username secret in a form of secret_name1=secret_key1 for private repository (default []) -h, --help help for test --http-proxy string http proxy for executor containers --https-proxy string https proxy for executor containers -l, --label stringToString label key value pair: --label key1=value1 (default []) -n, --name string unique test name - mandatory --schedule string test schedule in a cronjob form: * * * * * --secret-env stringToString secret envs in a form of secret_name1=secret_key1 passed to executor (default []) -s, --secret-variable stringToString secret variable key value pair: -s key1=value1 (default []) --secret-variable-reference stringToString secret variable references in a form name1=secret_name1=secret_key1 (default []) --test-content-type string content type of test one of string|file-uri|git-file|git-dir -t, --type string test type (defaults to postman-collection) --uri string URI of resource - will be loaded by http GET -v, --variable stringToString variable key value pair: -v key1=value1 (default []) --variables-file string variables file path, e.g. postman env file - will be passed to executor if supported Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages SEE ALSO kubectl-testkube update - Update resource","title":"Kubectl testkube update test"},{"location":"cli/kubectl-testkube_update_test/#kubectl-testkube-update-test","text":"Update test","title":"kubectl-testkube update test"},{"location":"cli/kubectl-testkube_update_test/#synopsis","text":"Update Test Custom Resource kubectl-testkube update test [flags]","title":"Synopsis"},{"location":"cli/kubectl-testkube_update_test/#options","text":"--env stringToString envs in a form of name1=val1 passed to executor (default []) --execution-name string execution name, if empty will be autogenerated --executor-args stringArray executor binary additional arguments -f, --file string test file - will try to read content from stdin if not specified --git-branch string if uri is git repository we can set additional branch parameter --git-commit string if uri is git repository we can use commit id (sha) parameter --git-path string if repository is big we need to define additional path to directory/file to checkout partially --git-token string if git repository is private we can use token as an auth parameter --git-token-secret stringToString git token secret in a form of secret_name1=secret_key1 for private repository (default []) --git-uri string Git repository uri --git-username string if git repository is private we can use username as an auth parameter --git-username-secret stringToString git username secret in a form of secret_name1=secret_key1 for private repository (default []) -h, --help help for test --http-proxy string http proxy for executor containers --https-proxy string https proxy for executor containers -l, --label stringToString label key value pair: --label key1=value1 (default []) -n, --name string unique test name - mandatory --schedule string test schedule in a cronjob form: * * * * * --secret-env stringToString secret envs in a form of secret_name1=secret_key1 passed to executor (default []) -s, --secret-variable stringToString secret variable key value pair: -s key1=value1 (default []) --secret-variable-reference stringToString secret variable references in a form name1=secret_name1=secret_key1 (default []) --test-content-type string content type of test one of string|file-uri|git-file|git-dir -t, --type string test type (defaults to postman-collection) --uri string URI of resource - will be loaded by http GET -v, --variable stringToString variable key value pair: -v key1=value1 (default []) --variables-file string variables file path, e.g. postman env file - will be passed to executor if supported","title":"Options"},{"location":"cli/kubectl-testkube_update_test/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_update_test/#see-also","text":"kubectl-testkube update - Update resource","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_update_testsuite/","text":"kubectl-testkube update testsuite Update Test Suite Synopsis Update Test Custom Resource Definitions, kubectl-testkube update testsuite [flags] Options --execution-name string execution name, if empty will be autogenerated -f, --file string JSON test file - will be read from stdin if not specified, look at testkube.TestUpsertRequest -h, --help help for testsuite --http-proxy string http proxy for executor containers --https-proxy string https proxy for executor containers -l, --label stringToString label key value pair: --label key1=value1 (default []) --name string Set/Override test suite name --schedule string test suite schedule in a cronjob form: * * * * * -s, --secret-variable stringToString secret variable key value pair: --secret-variable key1=value1 (default []) --secret-variable-reference stringToString secret variable references in a form name1=secret_name1=secret_key1 (default []) -v, --variable stringToString param key value pair: --variable key1=value1 (default []) Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages SEE ALSO kubectl-testkube update - Update resource","title":"Kubectl testkube update testsuite"},{"location":"cli/kubectl-testkube_update_testsuite/#kubectl-testkube-update-testsuite","text":"Update Test Suite","title":"kubectl-testkube update testsuite"},{"location":"cli/kubectl-testkube_update_testsuite/#synopsis","text":"Update Test Custom Resource Definitions, kubectl-testkube update testsuite [flags]","title":"Synopsis"},{"location":"cli/kubectl-testkube_update_testsuite/#options","text":"--execution-name string execution name, if empty will be autogenerated -f, --file string JSON test file - will be read from stdin if not specified, look at testkube.TestUpsertRequest -h, --help help for testsuite --http-proxy string http proxy for executor containers --https-proxy string https proxy for executor containers -l, --label stringToString label key value pair: --label key1=value1 (default []) --name string Set/Override test suite name --schedule string test suite schedule in a cronjob form: * * * * * -s, --secret-variable stringToString secret variable key value pair: --secret-variable key1=value1 (default []) --secret-variable-reference stringToString secret variable references in a form name1=secret_name1=secret_key1 (default []) -v, --variable stringToString param key value pair: --variable key1=value1 (default [])","title":"Options"},{"location":"cli/kubectl-testkube_update_testsuite/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_update_testsuite/#see-also","text":"kubectl-testkube update - Update resource","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_upgrade/","text":"kubectl-testkube upgrade Upgrade Helm chart, install dependencies and run migrations kubectl-testkube upgrade [flags] Options --chart string chart name (default \"kubeshop/testkube\") -h, --help help for upgrade --name string installation name (default \"testkube\") --no-dashboard don't install dashboard --no-minio don't install MinIO --no-mongo don't install MongoDB --values string path to Helm values file Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages SEE ALSO kubectl-testkube - Testkube entrypoint for kubectl plugin","title":"Upgrade Command"},{"location":"cli/kubectl-testkube_upgrade/#kubectl-testkube-upgrade","text":"Upgrade Helm chart, install dependencies and run migrations kubectl-testkube upgrade [flags]","title":"kubectl-testkube upgrade"},{"location":"cli/kubectl-testkube_upgrade/#options","text":"--chart string chart name (default \"kubeshop/testkube\") -h, --help help for upgrade --name string installation name (default \"testkube\") --no-dashboard don't install dashboard --no-minio don't install MinIO --no-mongo don't install MongoDB --values string path to Helm values file","title":"Options"},{"location":"cli/kubectl-testkube_upgrade/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_upgrade/#see-also","text":"kubectl-testkube - Testkube entrypoint for kubectl plugin","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_version/","text":"kubectl-testkube version Shows version and build info Synopsis Shows version and build info kubectl-testkube version [flags] Options -h, --help help for version Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages SEE ALSO kubectl-testkube - Testkube entrypoint for kubectl plugin","title":"Version Command"},{"location":"cli/kubectl-testkube_version/#kubectl-testkube-version","text":"Shows version and build info","title":"kubectl-testkube version"},{"location":"cli/kubectl-testkube_version/#synopsis","text":"Shows version and build info kubectl-testkube version [flags]","title":"Synopsis"},{"location":"cli/kubectl-testkube_version/#options","text":"-h, --help help for version","title":"Options"},{"location":"cli/kubectl-testkube_version/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_version/#see-also","text":"kubectl-testkube - Testkube entrypoint for kubectl plugin","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_watch/","text":"kubectl-testkube watch Watch tests or test suites kubectl-testkube watch <resourceName> [flags] Options -h, --help help for watch Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages SEE ALSO kubectl-testkube - Testkube entrypoint for kubectl plugin kubectl-testkube watch execution - Watch logs output from executor pod kubectl-testkube watch testsuiteexecution - Watch test","title":"Watch Command"},{"location":"cli/kubectl-testkube_watch/#kubectl-testkube-watch","text":"Watch tests or test suites kubectl-testkube watch <resourceName> [flags]","title":"kubectl-testkube watch"},{"location":"cli/kubectl-testkube_watch/#options","text":"-h, --help help for watch","title":"Options"},{"location":"cli/kubectl-testkube_watch/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_watch/#see-also","text":"kubectl-testkube - Testkube entrypoint for kubectl plugin kubectl-testkube watch execution - Watch logs output from executor pod kubectl-testkube watch testsuiteexecution - Watch test","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_watch_execution/","text":"kubectl-testkube watch execution Watch logs output from executor pod Synopsis Gets test execution details, until it's in success/error state, blocks until gets complete state kubectl-testkube watch execution <executionID> [flags] Options -h, --help help for execution Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages SEE ALSO kubectl-testkube watch - Watch tests or test suites","title":"Kubectl testkube watch execution"},{"location":"cli/kubectl-testkube_watch_execution/#kubectl-testkube-watch-execution","text":"Watch logs output from executor pod","title":"kubectl-testkube watch execution"},{"location":"cli/kubectl-testkube_watch_execution/#synopsis","text":"Gets test execution details, until it's in success/error state, blocks until gets complete state kubectl-testkube watch execution <executionID> [flags]","title":"Synopsis"},{"location":"cli/kubectl-testkube_watch_execution/#options","text":"-h, --help help for execution","title":"Options"},{"location":"cli/kubectl-testkube_watch_execution/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_watch_execution/#see-also","text":"kubectl-testkube watch - Watch tests or test suites","title":"SEE ALSO"},{"location":"cli/kubectl-testkube_watch_testsuiteexecution/","text":"kubectl-testkube watch testsuiteexecution Watch test Synopsis Watch test by test execution ID, returns results to console kubectl-testkube watch testsuiteexecution <executionID> [flags] Options -h, --help help for testsuiteexecution Options inherited from parent commands -a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages SEE ALSO kubectl-testkube watch - Watch tests or test suites","title":"Kubectl testkube watch testsuiteexecution"},{"location":"cli/kubectl-testkube_watch_testsuiteexecution/#kubectl-testkube-watch-testsuiteexecution","text":"Watch test","title":"kubectl-testkube watch testsuiteexecution"},{"location":"cli/kubectl-testkube_watch_testsuiteexecution/#synopsis","text":"Watch test by test execution ID, returns results to console kubectl-testkube watch testsuiteexecution <executionID> [flags]","title":"Synopsis"},{"location":"cli/kubectl-testkube_watch_testsuiteexecution/#options","text":"-h, --help help for testsuiteexecution","title":"Options"},{"location":"cli/kubectl-testkube_watch_testsuiteexecution/#options-inherited-from-parent-commands","text":"-a, --api-uri string api uri, default value read from config if set (default \"http://localhost:8088\") -c, --client string client used for connecting to Testkube API one of proxy|direct (default \"proxy\") --namespace string Kubernetes namespace, default value read from config if set (default \"testkube\") --oauth-enabled enable oauth --verbose show additional debug messages","title":"Options inherited from parent commands"},{"location":"cli/kubectl-testkube_watch_testsuiteexecution/#see-also","text":"kubectl-testkube watch - Watch tests or test suites","title":"SEE ALSO"},{"location":"demo-video/","text":"Testkube Installation Walkthrough Get Your Cluster First In this demo we're using GKE (Google Kuberntetes Engine) - but you can use whatever you want. Installing Testkube Kubectl CLI plugin. brew install testkube After successful intallation kubectl testkube version Client Version 1 .2.3 Server Version api/GET-testkube.ServerInfo returned error: api server response: '{\"kind\":\"Status\",\"apiVersion\":\"v1\",\"metadata\":{},\"status\":\"Failure\",\"message\":\"services \\\"testkube-api-server\\\" not found\",\"reason\":\"NotFound\",\"details\":{\"name\":\"testkube-api-server\",\"kind\":\"services\"},\"code\":404} ' error: services \"testkube-api-server\" not found Commit Built by Homebrew Build date We can see the Client version but the Server version is not found yet, as we need to install Testkube cluster components first. Installing Testkube Cluster Components kubectl testkube init .... .... LAST DEPLOYED: Wed May 25 11 :04:14 2022 NAMESPACE: testkube STATUS: deployed REVISION: 1 NOTES: ` Enjoy testing with testkube! ` Show UI Now we're ready to check if Testkube works ok First let's looks at dashboard kubectl testkube dashboard The dashboard is accessible here: http://localhost:8080/apiEndpoint?apiEndpoint = localhost:8088/v1 \ud83e\udd47 The API is accessible here: http://localhost:8088/v1/info \ud83e\udd47 Port forwarding is started for the test results endpoint, hit Ctrl+c ( or Cmd+c ) to stop \ud83e\udd47 Browser should open automatically new and shiny Testkube Dasboard Go through what components were installed Until now we have several components installed - Testkube Kubectl plugin - on your machine - Testkube Orchestrator API - this one is on your cluster - Testkube Dashboard - Frontend for our API - Testkube Operator - For CRD management - MinIO for artifacts storage - S3 replacement - MongoDB - API storage - Jetstack Cert Manager Put Example Service into cluster We'll create some very simple service which will be tested for valid responses. Service will be written in the go programming language First let's build our Docker image and push it into registry (we're using Docker Hub Registry) docker build -t kubeshop/testkube-example-service . docker push kubeshop/testkube-example-service Now when our Docker image can be fetched by Kubernetes let's create the Deployment resource. Deployment will create our service pods and allow to use it inside Kubernetes cluster - it will be enough for purpose of this demo. Create a few tests from scratch using postman, cypress and k6 Upload tests to Testkube using GUI and CLI Show Testkube CRDs Run the tests using UI and CLI Navigate GUI and CLI showing executions Configure ingress to expose the the UI All components should be ready now, but none of them are public as we've used default Testkube installation Ingresses and auth are optional. TODO Ingress walkthrough Configure Github authorization TODO Github / Google Auth walkthrough Final message with the slide which has the Discord, Twitter and github links.","title":"Testkube Installation Walkthrough"},{"location":"demo-video/#testkube-installation-walkthrough","text":"","title":"Testkube Installation Walkthrough"},{"location":"demo-video/#get-your-cluster-first","text":"In this demo we're using GKE (Google Kuberntetes Engine) - but you can use whatever you want.","title":"Get Your Cluster First"},{"location":"demo-video/#installing-testkube-kubectl-cli-plugin","text":"brew install testkube After successful intallation kubectl testkube version Client Version 1 .2.3 Server Version api/GET-testkube.ServerInfo returned error: api server response: '{\"kind\":\"Status\",\"apiVersion\":\"v1\",\"metadata\":{},\"status\":\"Failure\",\"message\":\"services \\\"testkube-api-server\\\" not found\",\"reason\":\"NotFound\",\"details\":{\"name\":\"testkube-api-server\",\"kind\":\"services\"},\"code\":404} ' error: services \"testkube-api-server\" not found Commit Built by Homebrew Build date We can see the Client version but the Server version is not found yet, as we need to install Testkube cluster components first.","title":"Installing Testkube Kubectl CLI plugin."},{"location":"demo-video/#installing-testkube-cluster-components","text":"kubectl testkube init .... .... LAST DEPLOYED: Wed May 25 11 :04:14 2022 NAMESPACE: testkube STATUS: deployed REVISION: 1 NOTES: ` Enjoy testing with testkube! `","title":"Installing Testkube Cluster Components"},{"location":"demo-video/#show-ui","text":"Now we're ready to check if Testkube works ok First let's looks at dashboard kubectl testkube dashboard The dashboard is accessible here: http://localhost:8080/apiEndpoint?apiEndpoint = localhost:8088/v1 \ud83e\udd47 The API is accessible here: http://localhost:8088/v1/info \ud83e\udd47 Port forwarding is started for the test results endpoint, hit Ctrl+c ( or Cmd+c ) to stop \ud83e\udd47 Browser should open automatically new and shiny Testkube Dasboard","title":"Show UI"},{"location":"demo-video/#go-through-what-components-were-installed","text":"Until now we have several components installed - Testkube Kubectl plugin - on your machine - Testkube Orchestrator API - this one is on your cluster - Testkube Dashboard - Frontend for our API - Testkube Operator - For CRD management - MinIO for artifacts storage - S3 replacement - MongoDB - API storage - Jetstack Cert Manager","title":"Go through what components were installed"},{"location":"demo-video/#put-example-service-into-cluster","text":"We'll create some very simple service which will be tested for valid responses. Service will be written in the go programming language First let's build our Docker image and push it into registry (we're using Docker Hub Registry) docker build -t kubeshop/testkube-example-service . docker push kubeshop/testkube-example-service Now when our Docker image can be fetched by Kubernetes let's create the Deployment resource. Deployment will create our service pods and allow to use it inside Kubernetes cluster - it will be enough for purpose of this demo.","title":"Put Example Service into cluster"},{"location":"demo-video/#create-a-few-tests-from-scratch-using-postman-cypress-and-k6","text":"","title":"Create a few tests from scratch using postman, cypress and k6"},{"location":"demo-video/#upload-tests-to-testkube-using-gui-and-cli","text":"","title":"Upload tests to Testkube using GUI and CLI"},{"location":"demo-video/#show-testkube-crds","text":"","title":"Show Testkube CRDs"},{"location":"demo-video/#run-the-tests-using-ui-and-cli","text":"","title":"Run the tests using UI and CLI"},{"location":"demo-video/#navigate-gui-and-cli-showing-executions","text":"","title":"Navigate GUI and CLI showing executions"},{"location":"demo-video/#configure-ingress-to-expose-the-the-ui","text":"All components should be ready now, but none of them are public as we've used default Testkube installation Ingresses and auth are optional. TODO Ingress walkthrough","title":"Configure ingress to expose the the UI"},{"location":"demo-video/#configure-github-authorization","text":"TODO Github / Google Auth walkthrough","title":"Configure Github authorization"},{"location":"demo-video/#final-message-with-the-slide-which-has-the-discord-twitter-and-github-links","text":"","title":"Final message with the slide which has the Discord, Twitter and github links."},{"location":"demo-video/scenario/","text":"Testkube Installation Walkthrough Get Your Cluster First As Testkube is cloud/Kubernetes native testing tool it need to have Kubernetes cluster ready. We'll be using GKE (Google Kuberntetes Engine) for purpose of this introduction but you can use whatever you want. Installing Testkube Kubectl CLI plugin. brew install testkube After successful intallation kubectl testkube version Client Version 1 .2.3 Server Version api/GET-testkube.ServerInfo returned error: api server response: '{\"kind\":\"Status\",\"apiVersion\":\"v1\",\"metadata\":{},\"status\":\"Failure\",\"message\":\"services \\\"testkube-api-server\\\" not found\",\"reason\":\"NotFound\",\"details\":{\"name\":\"testkube-api-server\",\"kind\":\"services\"},\"code\":404} ' error: services \"testkube-api-server\" not found Commit Built by Homebrew Build date We can see the Client version but the Server version is not found yet, as we need to install Testkube cluster components first. Installing Testkube Cluster Components kubectl testkube init .... .... LAST DEPLOYED: Wed May 25 11 :04:14 2022 NAMESPACE: testkube STATUS: deployed REVISION: 1 NOTES: ` Enjoy testing with testkube! ` Go through what components were installed Until now we have several components installed - Testkube Kubectl plugin - on your machine - Testkube Orchestrator API - this one is on your cluster - Testkube Dashboard - Frontend for our API - Testkube Operator - For CRD management - MinIO for artifacts storage - S3 replacement - MongoDB - API storage - Jetstack Cert Manager We can look at them checking what pods are in testkube namespace. kubectl get pods -ntestkube Show UI Now we're ready to check if Testkube works ok First let's looks at dashboard kubectl testkube dashboard The dashboard is accessible here: http://localhost:8080/apiEndpoint?apiEndpoint = localhost:8088/v1 \ud83e\udd47 The API is accessible here: http://localhost:8088/v1/info \ud83e\udd47 Port forwarding is started for the test results endpoint, hit Ctrl+c ( or Cmd+c ) to stop \ud83e\udd47 Browser should open automatically new and shiny Testkube Dasboard Put Example Service into cluster We'll create some very simple service which will be tested for valid responses. Service will be written in the go programming language First let's build our Docker image and push it into registry (we're using Docker Hub Registry) docker build --platform linux/x86_64 -t kubeshop/chuck-jokes . docker push kubeshop/chuck-jokes (you can omit platform if you're on linux x86 64 bit) Now when our Docker image can be fetched by Kubernetes let's create the Deployment resource. Deployment will create our service pods and allow to use it inside Kubernetes cluster - it will be enough for purpose of this demo. We'll add also Service to be able to connect to the Example Service Pod Let's create manifests.yaml file: kind : Deployment metadata : name : chuck-jokes labels : app : chuck-jokes spec : replicas : 3 selector : matchLabels : app : chuck-jokes template : metadata : labels : app : chuck-jokes spec : containers : - name : chuck-jokes image : kubeshop/chuck-jokes:latest ports : - containerPort : 8881 resources : limits : memory : 512Mi cpu : \"1\" requests : memory : 64Mi cpu : \"0.2\" --- apiVersion : v1 kind : Service metadata : name : chuck-jokes spec : selector : app : chuck-jokes ports : - protocol : TCP port : 8881 And ask Kubernetes to sync this manifest with our cluster: kubectl apply -f manifests.yaml After some time everything should be in place, Kubernetes scheduler will create new pod and add service to allow to connect to our service from cluster. Create a few tests from scratch using postman, cypress and k6 Postman test Create new video and export it as file assuming file name is Video-Chuck-Test.postman_collection.json we can create the test with following command: kubectl testkube create test --file Video-Chuck-Test.postman_collection.json --name chuck-jokes-postman Content of our file should be more or less like this: { \"info\" : { \"_postman_id\" : \"046c7729-b816-498a-a07b-88407d4180dc\" , \"name\" : \"Video-Chuck-Test\" , \"schema\" : \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\" , \"_exporter_id\" : \"3706349\" }, \"item\" : [ { \"name\" : \"Check if jokes are about Chuck\" , \"event\" : [ { \"listen\" : \"test\" , \"script\" : { \"exec\" : [ \"pm.test(\\\"Body matches string\\\", function () {\" , \" pm.expect(pm.response.text()).to.include(\\\"Chuck\\\");\" , \"});\" ], \"type\" : \"text/javascript\" } } ], \"request\" : { \"method\" : \"GET\" , \"header\" : [], \"url\" : { \"raw\" : \"{{API_URI}}/joke\" , \"host\" : [ \"{{API_URI}}\" ], \"path\" : [ \"joke\" ] } }, \"response\" : [] } ], \"event\" : [ { \"listen\" : \"prerequest\" , \"script\" : { \"type\" : \"text/javascript\" , \"exec\" : [ \"\" ] } }, { \"listen\" : \"test\" , \"script\" : { \"type\" : \"text/javascript\" , \"exec\" : [ \"\" ] } } ], \"variable\" : [ { \"key\" : \"API_URI\" , \"value\" : \"http://chuck-jokes.services:8881\" , \"type\" : \"string\" } ] } We can also add additional K6 test to check if our service is performant, let's check also if our service is talking about Chuck. And add it through dashboard. import http from 'k6/http' ; import { sleep , check } from 'k6' ; export default function () { const baseURI = ` ${ __ENV . API_URI || 'http://chuck-jokes.services:8881' } ` ; check ( http . get ( ` ${ baseURI } /joke` ), { 'joke should be about Chuck' : r => r . body . includes ( \"Chuck\" ) }); } kubectl testkube create test --file chuck-jokes.k6.js --name chuck-jokes-k6 --type k6/script Create TestSuite from created tests For now our tests was run as separate ones. But sometimes we want to connect different tests in single test suite. It's often used to manage multiple test suites done by different development teams, we can compose test suites from tests of different types e.g. run postman API test to deeply check if everything ok, and next run performance test for critical parts of your service. { \"name\" : \"testkube\" , \"description\" : \"Testkube test suite, api, dashboard and performance\" , \"steps\" : [ { \"execute\" : { \"name\" : \"chuck-jokes-postman\" }}, { \"delay\" : { \"duration\" : 1000 }}, { \"execute\" : { \"name\" : \"chuck-jokes-k6\" }} ] } Upload tests to Testkube using GUI and CLI To upload using API you need to Show Testkube CRDs kubectl get tests -ntestkube kubectl get tests -ntestkube -oyaml chuck-jokes-postman kubectl get tests -ntestkube -oyaml chuck-jokes-k6 kubectl get testsuites -ntestkube kubectl get testsuites -ntestkube kubectl get testsuites -ntestkube -oyaml chuck-jokes Run the tests using UI and CLI Navigate GUI and CLI showing executions Configure ingress to expose the the UI All components should be ready now, but none of them are public as we've used default Testkube installation Ingresses and auth are optional. TODO Ingress walkthrough Configure Github authorization TODO Github / Google Auth walkthrough Final message with the slide which has the Discord, Twitter and github links.","title":"Testkube Installation Walkthrough"},{"location":"demo-video/scenario/#testkube-installation-walkthrough","text":"","title":"Testkube Installation Walkthrough"},{"location":"demo-video/scenario/#get-your-cluster-first","text":"As Testkube is cloud/Kubernetes native testing tool it need to have Kubernetes cluster ready. We'll be using GKE (Google Kuberntetes Engine) for purpose of this introduction but you can use whatever you want.","title":"Get Your Cluster First"},{"location":"demo-video/scenario/#installing-testkube-kubectl-cli-plugin","text":"brew install testkube After successful intallation kubectl testkube version Client Version 1 .2.3 Server Version api/GET-testkube.ServerInfo returned error: api server response: '{\"kind\":\"Status\",\"apiVersion\":\"v1\",\"metadata\":{},\"status\":\"Failure\",\"message\":\"services \\\"testkube-api-server\\\" not found\",\"reason\":\"NotFound\",\"details\":{\"name\":\"testkube-api-server\",\"kind\":\"services\"},\"code\":404} ' error: services \"testkube-api-server\" not found Commit Built by Homebrew Build date We can see the Client version but the Server version is not found yet, as we need to install Testkube cluster components first.","title":"Installing Testkube Kubectl CLI plugin."},{"location":"demo-video/scenario/#installing-testkube-cluster-components","text":"kubectl testkube init .... .... LAST DEPLOYED: Wed May 25 11 :04:14 2022 NAMESPACE: testkube STATUS: deployed REVISION: 1 NOTES: ` Enjoy testing with testkube! `","title":"Installing Testkube Cluster Components"},{"location":"demo-video/scenario/#go-through-what-components-were-installed","text":"Until now we have several components installed - Testkube Kubectl plugin - on your machine - Testkube Orchestrator API - this one is on your cluster - Testkube Dashboard - Frontend for our API - Testkube Operator - For CRD management - MinIO for artifacts storage - S3 replacement - MongoDB - API storage - Jetstack Cert Manager We can look at them checking what pods are in testkube namespace. kubectl get pods -ntestkube","title":"Go through what components were installed"},{"location":"demo-video/scenario/#show-ui","text":"Now we're ready to check if Testkube works ok First let's looks at dashboard kubectl testkube dashboard The dashboard is accessible here: http://localhost:8080/apiEndpoint?apiEndpoint = localhost:8088/v1 \ud83e\udd47 The API is accessible here: http://localhost:8088/v1/info \ud83e\udd47 Port forwarding is started for the test results endpoint, hit Ctrl+c ( or Cmd+c ) to stop \ud83e\udd47 Browser should open automatically new and shiny Testkube Dasboard","title":"Show UI"},{"location":"demo-video/scenario/#put-example-service-into-cluster","text":"We'll create some very simple service which will be tested for valid responses. Service will be written in the go programming language First let's build our Docker image and push it into registry (we're using Docker Hub Registry) docker build --platform linux/x86_64 -t kubeshop/chuck-jokes . docker push kubeshop/chuck-jokes (you can omit platform if you're on linux x86 64 bit) Now when our Docker image can be fetched by Kubernetes let's create the Deployment resource. Deployment will create our service pods and allow to use it inside Kubernetes cluster - it will be enough for purpose of this demo. We'll add also Service to be able to connect to the Example Service Pod Let's create manifests.yaml file: kind : Deployment metadata : name : chuck-jokes labels : app : chuck-jokes spec : replicas : 3 selector : matchLabels : app : chuck-jokes template : metadata : labels : app : chuck-jokes spec : containers : - name : chuck-jokes image : kubeshop/chuck-jokes:latest ports : - containerPort : 8881 resources : limits : memory : 512Mi cpu : \"1\" requests : memory : 64Mi cpu : \"0.2\" --- apiVersion : v1 kind : Service metadata : name : chuck-jokes spec : selector : app : chuck-jokes ports : - protocol : TCP port : 8881 And ask Kubernetes to sync this manifest with our cluster: kubectl apply -f manifests.yaml After some time everything should be in place, Kubernetes scheduler will create new pod and add service to allow to connect to our service from cluster.","title":"Put Example Service into cluster"},{"location":"demo-video/scenario/#create-a-few-tests-from-scratch-using-postman-cypress-and-k6","text":"","title":"Create a few tests from scratch using postman, cypress and k6"},{"location":"demo-video/scenario/#postman-test","text":"Create new video and export it as file assuming file name is Video-Chuck-Test.postman_collection.json we can create the test with following command: kubectl testkube create test --file Video-Chuck-Test.postman_collection.json --name chuck-jokes-postman Content of our file should be more or less like this: { \"info\" : { \"_postman_id\" : \"046c7729-b816-498a-a07b-88407d4180dc\" , \"name\" : \"Video-Chuck-Test\" , \"schema\" : \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\" , \"_exporter_id\" : \"3706349\" }, \"item\" : [ { \"name\" : \"Check if jokes are about Chuck\" , \"event\" : [ { \"listen\" : \"test\" , \"script\" : { \"exec\" : [ \"pm.test(\\\"Body matches string\\\", function () {\" , \" pm.expect(pm.response.text()).to.include(\\\"Chuck\\\");\" , \"});\" ], \"type\" : \"text/javascript\" } } ], \"request\" : { \"method\" : \"GET\" , \"header\" : [], \"url\" : { \"raw\" : \"{{API_URI}}/joke\" , \"host\" : [ \"{{API_URI}}\" ], \"path\" : [ \"joke\" ] } }, \"response\" : [] } ], \"event\" : [ { \"listen\" : \"prerequest\" , \"script\" : { \"type\" : \"text/javascript\" , \"exec\" : [ \"\" ] } }, { \"listen\" : \"test\" , \"script\" : { \"type\" : \"text/javascript\" , \"exec\" : [ \"\" ] } } ], \"variable\" : [ { \"key\" : \"API_URI\" , \"value\" : \"http://chuck-jokes.services:8881\" , \"type\" : \"string\" } ] } We can also add additional K6 test to check if our service is performant, let's check also if our service is talking about Chuck. And add it through dashboard. import http from 'k6/http' ; import { sleep , check } from 'k6' ; export default function () { const baseURI = ` ${ __ENV . API_URI || 'http://chuck-jokes.services:8881' } ` ; check ( http . get ( ` ${ baseURI } /joke` ), { 'joke should be about Chuck' : r => r . body . includes ( \"Chuck\" ) }); } kubectl testkube create test --file chuck-jokes.k6.js --name chuck-jokes-k6 --type k6/script","title":"Postman test"},{"location":"demo-video/scenario/#create-testsuite-from-created-tests","text":"For now our tests was run as separate ones. But sometimes we want to connect different tests in single test suite. It's often used to manage multiple test suites done by different development teams, we can compose test suites from tests of different types e.g. run postman API test to deeply check if everything ok, and next run performance test for critical parts of your service. { \"name\" : \"testkube\" , \"description\" : \"Testkube test suite, api, dashboard and performance\" , \"steps\" : [ { \"execute\" : { \"name\" : \"chuck-jokes-postman\" }}, { \"delay\" : { \"duration\" : 1000 }}, { \"execute\" : { \"name\" : \"chuck-jokes-k6\" }} ] }","title":"Create TestSuite from created tests"},{"location":"demo-video/scenario/#upload-tests-to-testkube-using-gui-and-cli","text":"To upload using API you need to","title":"Upload tests to Testkube using GUI and CLI"},{"location":"demo-video/scenario/#show-testkube-crds","text":"kubectl get tests -ntestkube kubectl get tests -ntestkube -oyaml chuck-jokes-postman kubectl get tests -ntestkube -oyaml chuck-jokes-k6 kubectl get testsuites -ntestkube kubectl get testsuites -ntestkube kubectl get testsuites -ntestkube -oyaml chuck-jokes","title":"Show Testkube CRDs"},{"location":"demo-video/scenario/#run-the-tests-using-ui-and-cli","text":"","title":"Run the tests using UI and CLI"},{"location":"demo-video/scenario/#navigate-gui-and-cli-showing-executions","text":"","title":"Navigate GUI and CLI showing executions"},{"location":"demo-video/scenario/#configure-ingress-to-expose-the-the-ui","text":"All components should be ready now, but none of them are public as we've used default Testkube installation Ingresses and auth are optional. TODO Ingress walkthrough","title":"Configure ingress to expose the the UI"},{"location":"demo-video/scenario/#configure-github-authorization","text":"TODO Github / Google Auth walkthrough","title":"Configure Github authorization"},{"location":"demo-video/scenario/#final-message-with-the-slide-which-has-the-discord-twitter-and-github-links","text":"","title":"Final message with the slide which has the Discord, Twitter and github links."}]}